{
  "address": "0xb20e70a8fc122aDbeaa48f06C522BEc22c95Ce60",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "BV_DepositCap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BV_InvalidRebalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BV_NoPositionToRebalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "authorisedKeeperAddress",
          "type": "address"
        }
      ],
      "name": "BV_OnlyKeeperAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CYS_INVALID_FEES",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ETRS_INVALID_CLOSE",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseLiquidity",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTickLower",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTickUpper",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bps",
          "type": "uint256"
        }
      ],
      "name": "changeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeTokenPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "extsload",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "val",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "slots",
          "type": "bytes32[]"
        }
      ],
      "name": "extsload",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getMarketValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "marketValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceX128",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceX128",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultMarketValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "vaultMarketValue",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "grantAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "contract IERC20Metadata",
                          "name": "asset",
                          "type": "address"
                        },
                        {
                          "internalType": "string",
                          "name": "name",
                          "type": "string"
                        },
                        {
                          "internalType": "string",
                          "name": "symbol",
                          "type": "string"
                        }
                      ],
                      "internalType": "struct RageERC4626.RageERC4626InitParams",
                      "name": "rageErc4626InitParams",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint32",
                      "name": "ethPoolId",
                      "type": "uint32"
                    },
                    {
                      "internalType": "address",
                      "name": "rageClearingHouse",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "rageCollateralToken",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "rageSettlementToken",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct BaseVault.BaseVaultInitParams",
                  "name": "baseVaultInitParams",
                  "type": "tuple"
                },
                {
                  "internalType": "uint16",
                  "name": "closePositionSlippageSqrtToleranceBps",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "resetPositionThresholdBps",
                  "type": "uint16"
                },
                {
                  "internalType": "uint64",
                  "name": "minNotionalPositionToCloseThreshold",
                  "type": "uint64"
                }
              ],
              "internalType": "struct EightyTwentyRangeStrategyVault.EightyTwentyRangeStrategyVaultInitParams",
              "name": "eightyTwentyRangeStrategyVaultInitParams",
              "type": "tuple"
            },
            {
              "internalType": "contract IERC20",
              "name": "usdt",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "usdc",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "weth",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "crvToken",
              "type": "address"
            },
            {
              "internalType": "contract ICurveGauge",
              "name": "gauge",
              "type": "address"
            },
            {
              "internalType": "contract ISwapRouter",
              "name": "uniV3Router",
              "type": "address"
            },
            {
              "internalType": "contract ILPPriceGetter",
              "name": "lpPriceHolder",
              "type": "address"
            },
            {
              "internalType": "contract ICurveStableSwap",
              "name": "tricryptoPool",
              "type": "address"
            }
          ],
          "internalType": "struct CurveYieldStrategy.CurveYieldStrategyInitParams",
          "name": "curveYieldStrategyInitParams",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isReset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "vaultMarketValue",
          "type": "int256"
        }
      ],
      "name": "isValidRebalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRebalanceTS",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rageAccountNo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalancePriceThresholdBps",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalanceTimeThreshold",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "_crvOracle",
          "type": "address"
        }
      ],
      "name": "setCrvOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slippageTolerance",
          "type": "uint256"
        }
      ],
      "name": "setCrvSwapSlippageTolerance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_closePositionSlippageSqrtToleranceBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_resetPositionThresholdBps",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "_minNotionalPositionToCloseThreshold",
          "type": "uint64"
        }
      ],
      "name": "setEightTwentyParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newKeeperAddress",
          "type": "address"
        }
      ],
      "name": "setKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_notionalCrvHarvestThreshold",
          "type": "uint256"
        }
      ],
      "name": "setNotionalCrvHarvestThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_rebalanceTimeThreshold",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_rebalancePriceThresholdBps",
          "type": "uint16"
        }
      ],
      "name": "setRebalanceThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDepositCap",
          "type": "uint256"
        }
      ],
      "name": "updateDepositCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "R",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "T",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "CrvOracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tolerance",
          "type": "uint256"
        }
      ],
      "name": "CrvSwapSlippageToleranceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositCap",
          "type": "uint256"
        }
      ],
      "name": "DepositCapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "closePositionSlippageSqrtToleranceBps",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "resetPositionThresholdBps",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "minNotionalPositionToCloseThreshold",
          "type": "uint64"
        }
      ],
      "name": "EightyTwentyParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "FeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "name": "FeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "crvAmount",
          "type": "uint256"
        }
      ],
      "name": "Harvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        }
      ],
      "name": "KeeperUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "NotionalCrvHarvestThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "rebalanceTimeThreshold",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "rebalancePriceThresholdBps",
          "type": "uint16"
        }
      ],
      "name": "RebalanceThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpPrice",
          "type": "uint256"
        }
      ],
      "name": "StateInfo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "TokenPositionClosed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CYS_NEGATIVE_CRV_PRICE",
      "type": "error"
    }
  ],
  "transactionHash": "0xaeed1571dc567a0b97bee3446c963857fb03ecd4854697f75c59346d6a9bc58b",
  "receipt": {
    "to": null,
    "from": "0x4ec0dda0430A54b4796109913545F715B2d89F34",
    "contractAddress": "0xb20e70a8fc122aDbeaa48f06C522BEc22c95Ce60",
    "transactionIndex": 0,
    "gasUsed": "44648678",
    "logsBloom": "0x
    "blockHash": "0x5538c8f4bdd1d270d815cafc272f2189dc51b2fad7446eb874e4504a5da17c8b",
    "transactionHash": "0xaeed1571dc567a0b97bee3446c963857fb03ecd4854697f75c59346d6a9bc58b",
    "logs": [],
    "blockNumber": 11929460,
    "cumulativeGasUsed": "412317",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "dc4542551f5c8976e4dbdbc877131696",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"BV_DepositCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BV_InvalidRebalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BV_NoPositionToRebalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorisedKeeperAddress\",\"type\":\"address\"}],\"name\":\"BV_OnlyKeeperAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CYS_INVALID_FEES\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETRS_INVALID_CLOSE\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTickLower\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTickUpper\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTokenPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"extsload\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"slots\",\"type\":\"bytes32[]\"}],\"name\":\"extsload\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getMarketValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceX128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceX128\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultMarketValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"vaultMarketValue\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grantAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct RageERC4626.RageERC4626InitParams\",\"name\":\"rageErc4626InitParams\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"ethPoolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"rageClearingHouse\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rageCollateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rageSettlementToken\",\"type\":\"address\"}],\"internalType\":\"struct BaseVault.BaseVaultInitParams\",\"name\":\"baseVaultInitParams\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"closePositionSlippageSqrtToleranceBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"resetPositionThresholdBps\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"minNotionalPositionToCloseThreshold\",\"type\":\"uint64\"}],\"internalType\":\"struct EightyTwentyRangeStrategyVault.EightyTwentyRangeStrategyVaultInitParams\",\"name\":\"eightyTwentyRangeStrategyVaultInitParams\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"crvToken\",\"type\":\"address\"},{\"internalType\":\"contract ICurveGauge\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"uniV3Router\",\"type\":\"address\"},{\"internalType\":\"contract ILPPriceGetter\",\"name\":\"lpPriceHolder\",\"type\":\"address\"},{\"internalType\":\"contract ICurveStableSwap\",\"name\":\"tricryptoPool\",\"type\":\"address\"}],\"internalType\":\"struct CurveYieldStrategy.CurveYieldStrategyInitParams\",\"name\":\"curveYieldStrategyInitParams\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"vaultMarketValue\",\"type\":\"int256\"}],\"name\":\"isValidRebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebalanceTS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rageAccountNo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancePriceThresholdBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceTimeThreshold\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_crvOracle\",\"type\":\"address\"}],\"name\":\"setCrvOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippageTolerance\",\"type\":\"uint256\"}],\"name\":\"setCrvSwapSlippageTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_closePositionSlippageSqrtToleranceBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_resetPositionThresholdBps\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_minNotionalPositionToCloseThreshold\",\"type\":\"uint64\"}],\"name\":\"setEightTwentyParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newKeeperAddress\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_notionalCrvHarvestThreshold\",\"type\":\"uint256\"}],\"name\":\"setNotionalCrvHarvestThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_rebalanceTimeThreshold\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_rebalancePriceThresholdBps\",\"type\":\"uint16\"}],\"name\":\"setRebalanceThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDepositCap\",\"type\":\"uint256\"}],\"name\":\"updateDepositCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"changeFee(uint256)\":{\"params\":{\"bps\":\"new fee value (less than MAX_BPS)\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"extsload(bytes32)\":{\"params\":{\"slot\":\"to read from.\"},\"returns\":{\"val\":\"stored at the slot.\"}},\"extsload(bytes32[])\":{\"params\":{\"slots\":\"to read from.\"},\"returns\":{\"_0\":\"values stored at the slots.\"}},\"getMarketValue(uint256)\":{\"params\":{\"amount\":\"amount of LP tokens\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCrvOracle(address)\":{\"params\":{\"_crvOracle\":\"address of oracle\"}},\"setCrvSwapSlippageTolerance(uint256)\":{\"params\":{\"_slippageTolerance\":\"value in bps unit for slippage tolerance\"}},\"setNotionalCrvHarvestThreshold(uint256)\":{\"params\":{\"_notionalCrvHarvestThreshold\":\"minimum threshold value (in CRV)\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateDepositCap(uint256)\":{\"params\":{\"newDepositCap\":\"The new deposit cap in asset amount\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeFee(uint256)\":{\"notice\":\"changes the fee value for CRV yield generated\"},\"closeTokenPosition()\":{\"notice\":\"closes remaining token position (To be used when reset condition is hit)\"},\"extsload(bytes32)\":{\"notice\":\"Returns a value from the storage.\"},\"extsload(bytes32[])\":{\"notice\":\"Returns multiple values from storage.\"},\"getMarketValue(uint256)\":{\"notice\":\"compute notional value for given amount of LP tokens\"},\"getPriceX128()\":{\"notice\":\"gives x128 price of 1 tricrypto LP token\"},\"getVaultMarketValue()\":{\"notice\":\"Returns account market value of vault in USDC (settlement token)\"},\"grantAllowances()\":{\"notice\":\"grants one time max allowance to various third parties\"},\"rebalance()\":{\"notice\":\"Rebalance the vault assets\"},\"setCrvOracle(address)\":{\"notice\":\"Sets the CRV to USD oracle address\"},\"setCrvSwapSlippageTolerance(uint256)\":{\"notice\":\"Sets the max allowed slippage tolerance for CRV->WETH->USDT swap\"},\"setNotionalCrvHarvestThreshold(uint256)\":{\"notice\":\"Sets the minimum threshold to harvest CRV rewards\"},\"totalAssets()\":{\"notice\":\"returns the total vault asset balance + staked balance\"},\"updateDepositCap(uint256)\":{\"notice\":\"Set the deposit cap for the vault in asset amount\"},\"withdrawFees()\":{\"notice\":\"withdraw accumulated CRV fees\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/yieldStrategy/CurveYieldStrategy.sol\":\"CurveYieldStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x978847fbff92d66d27d8767402a90ba996970b1936b372406aa17f5492bd8dc5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../extensions/ERC20Burnable.sol\\\";\\nimport \\\"../extensions/ERC20Pausable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n *\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\n */\\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20, ERC20Pausable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2cd54808b851c4db22f459065af0b7a952262741a85a73923e7a660767cd7baa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"@ragetrade/core/contracts/extsloads/ClearingHouseExtsload.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\n\\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\\nimport { IExtsload } from '../interfaces/IExtsload.sol';\\nimport { IOracle } from '../interfaces/IOracle.sol';\\n\\nimport { Bytes32 } from '../libraries/Bytes32.sol';\\n\\nlibrary ClearingHouseExtsload {\\n    using Bytes32 for bytes32;\\n\\n    bytes32 constant PROTOCOL_SLOT = bytes32(uint256(100));\\n    bytes32 constant POOLS_MAPPING_SLOT = PROTOCOL_SLOT;\\n\\n    function getVPool(IClearingHouse clearingHouse, uint32 poolId) internal view returns (IUniswapV3Pool vPool) {\\n        bytes32 result = clearingHouse.extsload(keyOfVPool(poolId));\\n        assembly {\\n            vPool := result\\n        }\\n    }\\n\\n    function getPoolSettings(IClearingHouse clearingHouse, uint32 poolId)\\n        internal\\n        view\\n        returns (\\n            uint16 initialMarginRatioBps,\\n            uint16 maintainanceMarginRatioBps,\\n            uint16 maxVirtualPriceDeviationRatioBps,\\n            uint32 twapDuration,\\n            bool isAllowedForTrade,\\n            bool isCrossMargined,\\n            IOracle oracle\\n        )\\n    {\\n        bytes32 result = clearingHouse.extsload(keyOfPoolSettings(poolId));\\n\\n        (initialMarginRatioBps, result) = result.extractUint16();\\n        (maintainanceMarginRatioBps, result) = result.extractUint16();\\n        (maxVirtualPriceDeviationRatioBps, result) = result.extractUint16();\\n        (twapDuration, result) = result.extractUint32();\\n        (isAllowedForTrade, result) = result.extractBool();\\n        (isCrossMargined, result) = result.extractBool();\\n        address oracle_;\\n        (oracle_, result) = result.extractAddress();\\n        assembly {\\n            oracle := oracle_\\n        }\\n    }\\n\\n    function getTwapDuration(IClearingHouse clearingHouse, uint32 poolId) internal view returns (uint32 twapDuration) {\\n        bytes32 result = clearingHouse.extsload(keyOfPoolSettings(poolId));\\n        twapDuration = uint32(result.slice(0x30, 0x50));\\n    }\\n\\n    function getVPoolAndTwapDuration(IClearingHouse clearingHouse, uint32 poolId)\\n        internal\\n        view\\n        returns (IUniswapV3Pool vPool, uint32 twapDuration)\\n    {\\n        bytes32[] memory arr = new bytes32[](2);\\n        arr[0] = keyOfVPool(poolId);\\n        arr[1] = keyOfPoolSettings(poolId);\\n        arr = clearingHouse.extsload(arr);\\n        address vPool_;\\n        (vPool_, ) = arr[0].extractAddress();\\n        assembly {\\n            vPool := vPool_\\n        }\\n        twapDuration = uint32(arr[1].slice(0xB0, 0xD0));\\n    }\\n\\n    // KEY GENERATORS\\n\\n    function keyOfVPool(uint32 poolId) internal pure returns (bytes32) {\\n        return Bytes32.fromUint(poolId).keccak256Two(POOLS_MAPPING_SLOT).offset(1);\\n    }\\n\\n    function keyOfPoolSettings(uint32 poolId) internal pure returns (bytes32) {\\n        return Bytes32.fromUint(poolId).keccak256Two(POOLS_MAPPING_SLOT).offset(3);\\n    }\\n}\\n\",\"keccak256\":\"0xc833b714d5718f8aafaea5ceb3925932fb3ffa1bf33d18363c1dcab595a1e6f0\",\"license\":\"MIT\"},\"@ragetrade/core/contracts/interfaces/IClearingHouse.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { IGovernable } from './IGovernable.sol';\\n\\nimport { IClearingHouseActions } from './clearinghouse/IClearingHouseActions.sol';\\nimport { IClearingHouseCustomErrors } from './clearinghouse/IClearingHouseCustomErrors.sol';\\nimport { IClearingHouseEnums } from './clearinghouse/IClearingHouseEnums.sol';\\nimport { IClearingHouseEvents } from './clearinghouse/IClearingHouseEvents.sol';\\nimport { IClearingHouseOwnerActions } from './clearinghouse/IClearingHouseOwnerActions.sol';\\nimport { IClearingHouseStructures } from './clearinghouse/IClearingHouseStructures.sol';\\nimport { IClearingHouseSystemActions } from './clearinghouse/IClearingHouseSystemActions.sol';\\nimport { IClearingHouseView } from './clearinghouse/IClearingHouseView.sol';\\n\\ninterface IClearingHouse is\\n    IGovernable,\\n    IClearingHouseEnums,\\n    IClearingHouseStructures,\\n    IClearingHouseActions,\\n    IClearingHouseCustomErrors,\\n    IClearingHouseEvents,\\n    IClearingHouseOwnerActions,\\n    IClearingHouseSystemActions,\\n    IClearingHouseView\\n{}\\n\",\"keccak256\":\"0x96e80ddf4548ca1843d2c8a5e6a657682bba0afeda1943e1db55ae5d5ca29610\",\"license\":\"GPL-2.0-or-later\"},\"@ragetrade/core/contracts/interfaces/IExtsload.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\n/// @title This is an interface to read contract's state that supports extsload.\\ninterface IExtsload {\\n    /// @notice Returns a value from the storage.\\n    /// @param slot to read from.\\n    /// @return value stored at the slot.\\n    function extsload(bytes32 slot) external view returns (bytes32 value);\\n\\n    /// @notice Returns multiple values from storage.\\n    /// @param slots to read from.\\n    /// @return values stored at the slots.\\n    function extsload(bytes32[] memory slots) external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x9b2387dbfb081f98a6d21ed1b7297668cda241fc1cea540fc0127f140a982d17\",\"license\":\"MIT\"},\"@ragetrade/core/contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IGovernable {\\n    function governance() external view returns (address);\\n\\n    function teamMultisig() external view returns (address);\\n\\n    function transferGovernance(address newGovernance) external;\\n\\n    function transferTeamMultisig(address newTeamMultisig) external;\\n}\\n\",\"keccak256\":\"0x76ecf66d7ce1d2040b4fcd9803d10b141bd21cd80e1f81c4f5571198fbeb4a4c\",\"license\":\"MIT\"},\"@ragetrade/core/contracts/interfaces/IInsuranceFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\\n\\ninterface IInsuranceFund {\\n    function initialize(\\n        IERC20 settlementToken,\\n        IClearingHouse clearingHouse,\\n        string calldata name,\\n        string calldata symbol\\n    ) external;\\n\\n    function claim(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x2be3a0ff51b98c2715a67d66fa277f964202db03768ce9f16750ccd8c26664e0\",\"license\":\"GPL-2.0-or-later\"},\"@ragetrade/core/contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IOracle {\\n    function getTwapPriceX128(uint32 twapDuration) external view returns (uint256 priceX128);\\n}\\n\",\"keccak256\":\"0xe98d764bed7fc805dd2bb3aae8bf7b2f1cc66e42e15b61852840f28ea3b7d1e1\",\"license\":\"MIT\"},\"@ragetrade/core/contracts/interfaces/IVPoolWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\n\\nimport { IVQuote } from './IVQuote.sol';\\nimport { IVToken } from './IVToken.sol';\\nimport { IClearingHouse } from './IClearingHouse.sol';\\n\\ninterface IVPoolWrapper {\\n    struct InitializeVPoolWrapperParams {\\n        IClearingHouse clearingHouse; // address of clearing house contract (proxy)\\n        IVToken vToken; // address of vToken contract\\n        IVQuote vQuote; // address of vQuote contract\\n        IUniswapV3Pool vPool; // address of Uniswap V3 Pool contract, created using vToken and vQuote\\n        uint24 liquidityFeePips; // liquidity fee fraction (in 1e6)\\n        uint24 protocolFeePips; // protocol fee fraction (in 1e6)\\n    }\\n\\n    struct SwapResult {\\n        int256 amountSpecified; // amount of tokens/vQuote which were specified in the swap request\\n        int256 vTokenIn; // actual amount of vTokens paid by account to the Pool\\n        int256 vQuoteIn; // actual amount of vQuotes paid by account to the Pool\\n        uint256 liquidityFees; // actual amount of fees paid by account to the Pool\\n        uint256 protocolFees; // actual amount of fees paid by account to the Protocol\\n        uint160 sqrtPriceX96Start; // sqrt price at the beginning of the swap\\n        uint160 sqrtPriceX96End; // sqrt price at the end of the swap\\n    }\\n\\n    struct WrapperValuesInside {\\n        int256 sumAX128; // sum of all the A terms in the pool\\n        int256 sumBInsideX128; // sum of all the B terms in side the tick range in the pool\\n        int256 sumFpInsideX128; // sum of all the Fp terms in side the tick range in the pool\\n        uint256 sumFeeInsideX128; // sum of all the fee terms in side the tick range in the pool\\n    }\\n\\n    /// @notice Emitted whenever a swap takes place\\n    /// @param swapResult the swap result values\\n    event Swap(SwapResult swapResult);\\n\\n    /// @notice Emitted whenever liquidity is added\\n    /// @param tickLower the lower tick of the range\\n    /// @param tickUpper the upper tick of the range\\n    /// @param liquidity the amount of liquidity that was added\\n    /// @param vTokenPrincipal the amount of vToken that was sent to UniswapV3Pool\\n    /// @param vQuotePrincipal the mount of vQuote charged was sent to UniswapV3Pool\\n    event Mint(int24 tickLower, int24 tickUpper, uint128 liquidity, uint256 vTokenPrincipal, uint256 vQuotePrincipal);\\n\\n    /// @notice Emitted whenever liquidity is removed\\n    /// @param tickLower the lower tick of the range\\n    /// @param tickUpper the upper tick of the range\\n    /// @param liquidity the amount of liquidity that was removed\\n    /// @param vTokenPrincipal the amount of vToken that was received from UniswapV3Pool\\n    /// @param vQuotePrincipal the mount of vQuote charged was received from UniswapV3Pool\\n    event Burn(int24 tickLower, int24 tickUpper, uint128 liquidity, uint256 vTokenPrincipal, uint256 vQuotePrincipal);\\n\\n    /// @notice Emitted whenever clearing house enquired about the accrued protocol fees\\n    /// @param amount the amount of accrued protocol fees\\n    event AccruedProtocolFeeCollected(uint256 amount);\\n\\n    /// @notice Emitted when governance updates the liquidity fees\\n    /// @param liquidityFeePips the new liquidity fee ratio\\n    event LiquidityFeeUpdated(uint24 liquidityFeePips);\\n\\n    /// @notice Emitted when governance updates the protocol fees\\n    /// @param protocolFeePips the new protocol fee ratio\\n    event ProtocolFeeUpdated(uint24 protocolFeePips);\\n\\n    /// @notice Emitted when funding rate override is updated\\n    /// @param fundingRateOverrideX128 the new funding rate override value\\n    event FundingRateOverrideUpdated(int256 fundingRateOverrideX128);\\n\\n    function initialize(InitializeVPoolWrapperParams memory params) external;\\n\\n    function vPool() external view returns (IUniswapV3Pool);\\n\\n    function getValuesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (WrapperValuesInside memory wrapperValuesInside);\\n\\n    function getExtrapolatedValuesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (WrapperValuesInside memory wrapperValuesInside);\\n\\n    function swap(\\n        bool swapVTokenForVQuote, // zeroForOne\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (SwapResult memory swapResult);\\n\\n    function mint(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 liquidity\\n    )\\n        external\\n        returns (\\n            uint256 vTokenPrincipal,\\n            uint256 vQuotePrincipal,\\n            WrapperValuesInside memory wrapperValuesInside\\n        );\\n\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 liquidity\\n    )\\n        external\\n        returns (\\n            uint256 vTokenPrincipal,\\n            uint256 vQuotePrincipal,\\n            WrapperValuesInside memory wrapperValuesInside\\n        );\\n\\n    function getSumAX128() external view returns (int256);\\n\\n    function getExtrapolatedSumAX128() external view returns (int256);\\n\\n    function liquidityFeePips() external view returns (uint24);\\n\\n    function protocolFeePips() external view returns (uint24);\\n\\n    /// @notice Used by clearing house to update funding rate when clearing house is paused or unpaused.\\n    /// @param useZeroFundingRate: used to discount funding payment during the duration ch was paused.\\n    function updateGlobalFundingState(bool useZeroFundingRate) external;\\n\\n    /// @notice Used by clearing house to know how much protocol fee was collected.\\n    /// @return accruedProtocolFeeLast amount of protocol fees accrued since last collection.\\n    /// @dev Does not do any token transfer, just reduces the state in wrapper by accruedProtocolFeeLast.\\n    ///     Clearing house already has the amount of settlement tokens to send to treasury.\\n    function collectAccruedProtocolFee() external returns (uint256 accruedProtocolFeeLast);\\n}\\n\",\"keccak256\":\"0x53149107964b04443d4a38c340397b210e10c05d34ffbf99880bd11f71622518\",\"license\":\"GPL-2.0-or-later\"},\"@ragetrade/core/contracts/interfaces/IVQuote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IVQuote is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function authorize(address vPoolWrapper) external;\\n}\\n\",\"keccak256\":\"0x547cadc06e0b3849ca6aca3ba6deed7ac2b789a6394d88ebad7ea0c614fd9553\",\"license\":\"MIT\"},\"@ragetrade/core/contracts/interfaces/IVToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IVToken is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function setVPoolWrapper(address) external;\\n}\\n\",\"keccak256\":\"0x699675a44160b54b098f05556fce3c0f8fb1cec57adfb028daf2a0568aa5b245\",\"license\":\"MIT\"},\"@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\\n\\ninterface IClearingHouseActions is IClearingHouseStructures {\\n    /// @notice creates a new account and adds it to the accounts map\\n    /// @return newAccountId - serial number of the new account created\\n    function createAccount() external returns (uint256 newAccountId);\\n\\n    /// @notice deposits 'amount' of token associated with 'poolId'\\n    /// @param accountId account id\\n    /// @param collateralId truncated address of token to deposit\\n    /// @param amount amount of token to deposit\\n    function updateMargin(\\n        uint256 accountId,\\n        uint32 collateralId,\\n        int256 amount\\n    ) external;\\n\\n    /// @notice creates a new account and deposits 'amount' of token associated with 'poolId'\\n    /// @param collateralId truncated address of collateral token to deposit\\n    /// @param amount amount of token to deposit\\n    /// @return newAccountId - serial number of the new account created\\n    function createAccountAndAddMargin(uint32 collateralId, uint256 amount) external returns (uint256 newAccountId);\\n\\n    /// @notice withdraws 'amount' of settlement token from the profit made\\n    /// @param accountId account id\\n    /// @param amount amount of token to withdraw\\n    function updateProfit(uint256 accountId, int256 amount) external;\\n\\n    /// @notice settles the profit/loss made with the settlement token collateral deposits\\n    /// @param accountId account id\\n    function settleProfit(uint256 accountId) external;\\n\\n    /// @notice swaps token associated with 'poolId' by 'amount' (Long if amount>0 else Short)\\n    /// @param accountId account id\\n    /// @param poolId truncated address of token to withdraw\\n    /// @param swapParams swap parameters\\n    function swapToken(\\n        uint256 accountId,\\n        uint32 poolId,\\n        SwapParams memory swapParams\\n    ) external returns (int256 vTokenAmountOut, int256 vQuoteAmountOut);\\n\\n    /// @notice updates range order of token associated with 'poolId' by 'liquidityDelta' (Adds if amount>0 else Removes)\\n    /// @notice also can be used to update limitOrderType\\n    /// @param accountId account id\\n    /// @param poolId truncated address of token to withdraw\\n    /// @param liquidityChangeParams liquidity change parameters\\n    function updateRangeOrder(\\n        uint256 accountId,\\n        uint32 poolId,\\n        LiquidityChangeParams calldata liquidityChangeParams\\n    ) external returns (int256 vTokenAmountOut, int256 vQuoteAmountOut);\\n\\n    /// @notice keeper call to remove a limit order\\n    /// @dev checks the position of current price relative to limit order and checks limitOrderType\\n    /// @param accountId account id\\n    /// @param poolId truncated address of token to withdraw\\n    /// @param tickLower liquidity change parameters\\n    /// @param tickUpper liquidity change parameters\\n    function removeLimitOrder(\\n        uint256 accountId,\\n        uint32 poolId,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) external;\\n\\n    /// @notice keeper call for liquidation of range position\\n    /// @dev removes all the active range positions and gives liquidator a percent of notional amount closed + fixedFee\\n    /// @param accountId account id\\n    function liquidateLiquidityPositions(uint256 accountId) external;\\n\\n    /// @notice keeper call for liquidation of token position\\n    /// @dev transfers the fraction of token position at a discount to current price to liquidators account and gives liquidator some fixedFee\\n    /// @param targetAccountId account id\\n    /// @param poolId truncated address of token to withdraw\\n    /// @return keeperFee - amount of fees transferred to keeper\\n    function liquidateTokenPosition(uint256 targetAccountId, uint32 poolId) external returns (int256 keeperFee);\\n}\\n\",\"keccak256\":\"0xb3ff1e7c1a07b85b8a10c9ceadeef0ccf2fdc60f4dccb03cbb1735c4edbbe337\",\"license\":\"GPL-2.0-or-later\"},\"@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseCustomErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport { IVToken } from '../IVToken.sol';\\n\\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\\n\\ninterface IClearingHouseCustomErrors is IClearingHouseStructures {\\n    /// @notice error to denote invalid account access\\n    /// @param senderAddress address of msg sender\\n    error AccessDenied(address senderAddress);\\n\\n    /// @notice error to denote usage of uninitialized token\\n    /// @param collateralId address of token\\n    error CollateralDoesNotExist(uint32 collateralId);\\n\\n    /// @notice error to denote usage of unsupported collateral token\\n    /// @param collateralId address of token\\n    error CollateralNotAllowedForUse(uint32 collateralId);\\n\\n    /// @notice error to denote usage of uninitialized pool\\n    /// @param poolId unitialized truncated address supplied\\n    error PoolDoesNotExist(uint32 poolId);\\n\\n    /// @notice error to denote usage of unsupported pool\\n    /// @param poolId address of token\\n    error PoolNotAllowedForTrade(uint32 poolId);\\n\\n    /// @notice error to denote low notional value of txn\\n    /// @param notionalValue notional value of txn\\n    error LowNotionalValue(uint256 notionalValue);\\n\\n    /// @notice error to denote incorrect address is supplied while updating collateral settings\\n    /// @param incorrectAddress incorrect address of collateral token\\n    /// @param correctAddress correct address of collateral token\\n    error IncorrectCollateralAddress(IERC20 incorrectAddress, IERC20 correctAddress);\\n\\n    /// @notice error to denote invalid address supplied as a collateral token\\n    /// @param invalidAddress invalid address of collateral token\\n    error InvalidCollateralAddress(address invalidAddress);\\n\\n    /// @notice error to denote invalid token liquidation (fraction to liquidate> 1)\\n    error InvalidTokenLiquidationParameters();\\n\\n    /// @notice this is errored when the enum (uint8) value is out of bounds\\n    /// @param multicallOperationType is the value that is out of bounds\\n    error InvalidMulticallOperationType(MulticallOperationType multicallOperationType);\\n\\n    /// @notice error to denote slippage of txn beyond set threshold\\n    error SlippageBeyondTolerance();\\n\\n    /// @notice error to denote that keeper fee is negative or zero\\n    error KeeperFeeNotPositive(int256 keeperFee);\\n}\\n\",\"keccak256\":\"0x728b118f5b7649c4671997d3c7bdaa1701d1efca371f867f05886e374a26e52b\",\"license\":\"GPL-2.0-or-later\"},\"@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseEnums.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IClearingHouseEnums {\\n    enum LimitOrderType {\\n        NONE,\\n        LOWER_LIMIT,\\n        UPPER_LIMIT\\n    }\\n\\n    enum MulticallOperationType {\\n        UPDATE_MARGIN,\\n        UPDATE_PROFIT,\\n        SWAP_TOKEN,\\n        UPDATE_RANGE_ORDER,\\n        REMOVE_LIMIT_ORDER,\\n        LIQUIDATE_LIQUIDITY_POSITIONS,\\n        LIQUIDATE_TOKEN_POSITION\\n    }\\n}\\n\",\"keccak256\":\"0x5f940a8dca3208c611e557c79a3e2aeed8e96b5f41140312ce6e2814ea446ead\",\"license\":\"MIT\"},\"@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport { IVToken } from '../IVToken.sol';\\n\\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\\n\\ninterface IClearingHouseEvents is IClearingHouseStructures {\\n    /// @notice denotes new account creation\\n    /// @param ownerAddress wallet address of account owner\\n    /// @param accountId serial number of the account\\n    event AccountCreated(address indexed ownerAddress, uint256 accountId);\\n\\n    /// @notice new collateral supported as margin\\n    /// @param cTokenInfo collateral token info\\n    event CollateralSettingsUpdated(IERC20 cToken, CollateralSettings cTokenInfo);\\n\\n    /// @notice maintainance margin ratio of a pool changed\\n    /// @param poolId id of the rage trade pool\\n    /// @param settings new settings\\n    event PoolSettingsUpdated(uint32 poolId, PoolSettings settings);\\n\\n    /// @notice protocol settings changed\\n    /// @param liquidationParams liquidation params\\n    /// @param removeLimitOrderFee fee for remove limit order\\n    /// @param minimumOrderNotional minimum order notional\\n    /// @param minRequiredMargin minimum required margin\\n    event ProtocolSettingsUpdated(\\n        LiquidationParams liquidationParams,\\n        uint256 removeLimitOrderFee,\\n        uint256 minimumOrderNotional,\\n        uint256 minRequiredMargin\\n    );\\n\\n    event PausedUpdated(bool paused);\\n}\\n\",\"keccak256\":\"0xfe64741b82c084f8e83aef5b3e7ec062fb95201de87b1863acb25539d6533383\",\"license\":\"GPL-2.0-or-later\"},\"@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport { IVToken } from '../IVToken.sol';\\n\\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\\n\\ninterface IClearingHouseOwnerActions is IClearingHouseStructures {\\n    /// @notice updates the collataral settings\\n    /// @param cToken collateral token\\n    /// @param collateralSettings settings\\n    function updateCollateralSettings(IERC20 cToken, CollateralSettings memory collateralSettings) external;\\n\\n    /// @notice updates the rage trade pool settings\\n    /// @param poolId rage trade pool id\\n    /// @param newSettings updated rage trade pool settings\\n    function updatePoolSettings(uint32 poolId, PoolSettings calldata newSettings) external;\\n\\n    /// @notice updates the protocol settings\\n    /// @param liquidationParams liquidation params\\n    /// @param removeLimitOrderFee fee for remove limit order\\n    /// @param minimumOrderNotional minimum order notional\\n    /// @param minRequiredMargin minimum required margin\\n    function updateProtocolSettings(\\n        LiquidationParams calldata liquidationParams,\\n        uint256 removeLimitOrderFee,\\n        uint256 minimumOrderNotional,\\n        uint256 minRequiredMargin\\n    ) external;\\n\\n    /// @notice withdraws protocol fees collected in the supplied wrappers to team multisig\\n    /// @param wrapperAddresses list of wrapper addresses to collect fees from\\n    function withdrawProtocolFee(address[] calldata wrapperAddresses) external;\\n}\\n\",\"keccak256\":\"0xf55da5b7e3c130b7ab73b324b384b3704bd00f727cb38a9d0f0d76ef2ef0a9a1\",\"license\":\"GPL-2.0-or-later\"},\"@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseStructures.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\n\\nimport { IOracle } from '../IOracle.sol';\\nimport { IVToken } from '../IVToken.sol';\\nimport { IVPoolWrapper } from '../IVPoolWrapper.sol';\\n\\nimport { IClearingHouseEnums } from './IClearingHouseEnums.sol';\\n\\ninterface IClearingHouseStructures is IClearingHouseEnums {\\n    struct BalanceAdjustments {\\n        int256 vQuoteIncrease; // specifies the increase in vQuote balance\\n        int256 vTokenIncrease; // specifies the increase in token balance\\n        int256 traderPositionIncrease; // specifies the increase in trader position\\n    }\\n\\n    struct Collateral {\\n        IERC20 token; // address of the collateral token\\n        CollateralSettings settings; // collateral settings, changable by governance later\\n    }\\n\\n    struct CollateralSettings {\\n        IOracle oracle; // address of oracle which gives price to be used for collateral\\n        uint32 twapDuration; // duration of the twap in seconds\\n        bool isAllowedForDeposit; // whether the collateral is allowed to be deposited at the moment\\n    }\\n\\n    struct CollateralDepositView {\\n        IERC20 collateral; // address of the collateral token\\n        uint256 balance; // balance of the collateral in the account\\n    }\\n\\n    struct LiquidityChangeParams {\\n        int24 tickLower; // tick lower of the range\\n        int24 tickUpper; // tick upper of the range\\n        int128 liquidityDelta; // positive to add liquidity, negative to remove liquidity\\n        uint160 sqrtPriceCurrent; // hint for virtual price, to prevent sandwitch attack\\n        uint16 slippageToleranceBps; // slippage tolerance in bps, to prevent sandwitch attack\\n        bool closeTokenPosition; // whether to close the token position generated due to the liquidity change\\n        LimitOrderType limitOrderType; // limit order type\\n        bool settleProfit; // whether to settle profit against USDC margin\\n    }\\n\\n    struct LiquidityPositionView {\\n        int24 tickLower; // tick lower of the range\\n        int24 tickUpper; // tick upper of the range\\n        uint128 liquidity; // liquidity in the range by the account\\n        int256 vTokenAmountIn; // amount of token supplied by the account, to calculate net position\\n        int256 sumALastX128; // checkpoint of the term A in funding payment math\\n        int256 sumBInsideLastX128; // checkpoint of the term B in funding payment math\\n        int256 sumFpInsideLastX128; // checkpoint of the term Fp in funding payment math\\n        uint256 sumFeeInsideLastX128; // checkpoint of the trading fees\\n        LimitOrderType limitOrderType; // limit order type\\n    }\\n\\n    struct LiquidationParams {\\n        uint16 rangeLiquidationFeeFraction; // fraction of net token position rm from the range to be charged as liquidation fees (in 1e5)\\n        uint16 tokenLiquidationFeeFraction; // fraction of traded amount of vquote to be charged as liquidation fees (in 1e5)\\n        uint16 closeFactorMMThresholdBps; // fraction the MM threshold for partial liquidation (in 1e4)\\n        uint16 partialLiquidationCloseFactorBps; // fraction the % of position to be liquidated if partial liquidation should occur (in 1e4)\\n        uint16 insuranceFundFeeShareBps; // fraction of the fee share for insurance fund out of the total liquidation fee (in 1e4)\\n        uint16 liquidationSlippageSqrtToleranceBps; // fraction of the max sqrt price slippage threshold (in 1e4) (can be set to - actual price slippage tolerance / 2)\\n        uint64 maxRangeLiquidationFees; // maximum range liquidation fees (in settlement token amount decimals)\\n        uint64 minNotionalLiquidatable; // minimum notional value of position for it to be eligible for partial liquidation (in settlement token amount decimals)\\n    }\\n\\n    struct MulticallOperation {\\n        MulticallOperationType operationType; // operation type\\n        bytes data; // abi encoded data for the operation\\n    }\\n\\n    struct Pool {\\n        IVToken vToken; // address of the vToken, poolId = vToken.truncate()\\n        IUniswapV3Pool vPool; // address of the UniswapV3Pool(token0=vToken, token1=vQuote, fee=500)\\n        IVPoolWrapper vPoolWrapper; // wrapper address\\n        PoolSettings settings; // pool settings, which can be updated by governance later\\n    }\\n\\n    struct PoolSettings {\\n        uint16 initialMarginRatioBps; // margin ratio (1e4) considered for create/update position, removing margin or profit\\n        uint16 maintainanceMarginRatioBps; // margin ratio (1e4) considered for liquidations by keeper\\n        uint16 maxVirtualPriceDeviationRatioBps; // maximum deviation (1e4) from the current virtual price\\n        uint32 twapDuration; // twap duration (seconds) for oracle\\n        bool isAllowedForTrade; // whether the pool is allowed to be traded at the moment\\n        bool isCrossMargined; // whether cross margined is done for positions of this pool\\n        IOracle oracle; // spot price feed twap oracle for this pool\\n    }\\n\\n    struct SwapParams {\\n        int256 amount; // amount of tokens/vQuote to swap\\n        uint160 sqrtPriceLimit; // threshold sqrt price which should not be crossed\\n        bool isNotional; // whether the amount represents vQuote amount\\n        bool isPartialAllowed; // whether to end swap (partial) when sqrtPriceLimit is reached, instead of reverting\\n        bool settleProfit; // whether to settle profit against USDC margin\\n    }\\n\\n    struct VTokenPositionView {\\n        uint32 poolId; // id of the pool of which this token position is for\\n        int256 balance; // vTokenLong - vTokenShort\\n        int256 netTraderPosition; // net position due to trades and liquidity change carries\\n        int256 sumALastX128; // checkoint of the term A in funding payment math\\n        LiquidityPositionView[] liquidityPositions; // liquidity positions of the account in the pool\\n    }\\n}\\n\",\"keccak256\":\"0xcbbe517e7d702f183c9c39e17f9ebfa88ec5383d42b2ccdf4339cf500839638a\",\"license\":\"GPL-2.0-or-later\"},\"@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseSystemActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport { IInsuranceFund } from '../IInsuranceFund.sol';\\nimport { IOracle } from '../IOracle.sol';\\nimport { IVQuote } from '../IVQuote.sol';\\nimport { IVToken } from '../IVToken.sol';\\n\\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\\n\\ninterface IClearingHouseSystemActions is IClearingHouseStructures {\\n    /// @notice initializes clearing house contract\\n    /// @param rageTradeFactoryAddress rage trade factory address\\n    /// @param defaultCollateralToken address of default collateral token\\n    /// @param defaultCollateralTokenOracle address of default collateral token oracle\\n    /// @param insuranceFund address of insurance fund\\n    /// @param vQuote address of vQuote\\n    function initialize(\\n        address rageTradeFactoryAddress,\\n        IERC20 defaultCollateralToken,\\n        IOracle defaultCollateralTokenOracle,\\n        IInsuranceFund insuranceFund,\\n        IVQuote vQuote\\n    ) external;\\n\\n    function registerPool(Pool calldata poolInfo) external;\\n}\\n\",\"keccak256\":\"0xae72569f2e412d6cecfb3454efe067ef61fe8cd216336c730662bd74b0efbeb3\",\"license\":\"GPL-2.0-or-later\"},\"@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\\nimport { IExtsload } from '../IExtsload.sol';\\nimport { IVQuote } from '../IVQuote.sol';\\n\\ninterface IClearingHouseView is IClearingHouseStructures, IExtsload {\\n    /// @notice Gets details about account id\\n    /// @param accountId the account id\\n    /// @return owner address of the account creator\\n    /// @return vQuoteBalance the vQuote balance of the account\\n    /// @return collateralDeposits the collateral deposits of the account\\n    /// @return tokenPositions the token positions of the account along with liquidity positions\\n    function getAccountInfo(uint256 accountId)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            int256 vQuoteBalance,\\n            CollateralDepositView[] memory collateralDeposits,\\n            VTokenPositionView[] memory tokenPositions\\n        );\\n\\n    /// @notice Gets the market value and required margin of an account\\n    /// @dev This method can be used to check if an account is under water or not.\\n    ///     If accountMarketValue < requiredMargin then liquidation can take place.\\n    /// @param accountId the account id\\n    /// @param isInitialMargin true is initial margin, false is maintainance margin\\n    /// @return accountMarketValue the market value of the account, due to collateral and positions\\n    /// @return requiredMargin margin needed due to positions\\n    function getAccountMarketValueAndRequiredMargin(uint256 accountId, bool isInitialMargin)\\n        external\\n        view\\n        returns (int256 accountMarketValue, int256 requiredMargin);\\n\\n    /// @notice Gets the net profit of an account\\n    /// @param accountId the account id\\n    /// @return accountNetProfit the net profit of the account\\n    function getAccountNetProfit(uint256 accountId) external view returns (int256 accountNetProfit);\\n\\n    /// @notice Gets the net position of an account\\n    /// @param accountId the account id\\n    /// @param poolId the id of the pool (vETH, ... etc)\\n    /// @return netPosition the net position of the account\\n    function getAccountNetTokenPosition(uint256 accountId, uint32 poolId) external view returns (int256 netPosition);\\n\\n    /// @notice Gets the info about a supported collateral in the protocol\\n    /// @param collateralId the id of the collateral\\n    /// @return collateral the Collateral struct\\n    function getCollateralInfo(uint32 collateralId) external view returns (Collateral memory);\\n\\n    /// @notice Gets the info about a supported pool in the protocol\\n    /// @param poolId the id of the pool\\n    /// @return pool the Pool struct\\n    function getPoolInfo(uint32 poolId) external view returns (Pool memory);\\n\\n    /// @notice Gets the protocol info, global protocol settings\\n    /// @return settlementToken the token in which profit is settled\\n    /// @return vQuote the vQuote token contract\\n    /// @return liquidationParams the liquidation parameters\\n    /// @return minRequiredMargin minimum required margin an account has to keep with non-zero netPosition\\n    /// @return removeLimitOrderFee the fee charged for using removeLimitOrder service\\n    /// @return minimumOrderNotional the minimum order notional\\n    function getProtocolInfo()\\n        external\\n        view\\n        returns (\\n            IERC20 settlementToken,\\n            IVQuote vQuote,\\n            LiquidationParams memory liquidationParams,\\n            uint256 minRequiredMargin,\\n            uint256 removeLimitOrderFee,\\n            uint256 minimumOrderNotional\\n        );\\n\\n    /// @notice Gets the real twap price from the respective oracle of the given poolId\\n    /// @param poolId the id of the pool\\n    /// @return realPriceX128 the real price of the pool\\n    function getRealTwapPriceX128(uint32 poolId) external view returns (uint256 realPriceX128);\\n\\n    /// @notice Gets the virtual twap price from the respective oracle of the given poolId\\n    /// @param poolId the id of the pool\\n    /// @return virtualPriceX128 the virtual price of the pool\\n    function getVirtualTwapPriceX128(uint32 poolId) external view returns (uint256 virtualPriceX128);\\n\\n    /// @notice Checks if a poolId is unused\\n    /// @param poolId the id of the pool\\n    /// @return true if the poolId is unused, false otherwise\\n    function isPoolIdAvailable(uint32 poolId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa78ee8b5792076ecf921edfc52047f1668b5b0cbeeb1ff1f37ae6629ace6823c\",\"license\":\"GPL-2.0-or-later\"},\"@ragetrade/core/contracts/libraries/AddressHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport { IVToken } from '../interfaces/IVToken.sol';\\n\\n/// @title Address helper functions\\nlibrary AddressHelper {\\n    /// @notice Convert address to uint32, using the least significant 32 bits\\n    /// @param addr Address to convert\\n    /// @return truncated last 4 bytes of the address\\n    function truncate(address addr) internal pure returns (uint32 truncated) {\\n        assembly {\\n            truncated := and(addr, 0xffffffff)\\n        }\\n    }\\n\\n    function truncate(IERC20 addr) internal pure returns (uint32 truncated) {\\n        return truncate(address(addr));\\n    }\\n\\n    function eq(address a, address b) internal pure returns (bool) {\\n        return a == b;\\n    }\\n\\n    function eq(IERC20 a, IERC20 b) internal pure returns (bool) {\\n        return eq(address(a), address(b));\\n    }\\n\\n    function isZero(address a) internal pure returns (bool) {\\n        return a == address(0);\\n    }\\n\\n    function isZero(IERC20 a) internal pure returns (bool) {\\n        return isZero(address(a));\\n    }\\n}\\n\",\"keccak256\":\"0x5fee0cb1dcf501d0fed236300258070da27e3fe3df39db80df41c70f7e799699\",\"license\":\"MIT\"},\"@ragetrade/core/contracts/libraries/Bytes32.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Bytes32 {\\n    function slice(\\n        bytes32 input,\\n        uint256 start,\\n        uint256 end\\n    ) internal pure returns (uint256 val) {\\n        assembly {\\n            val := shl(start, input)\\n            val := shr(add(start, sub(256, end)), val)\\n        }\\n    }\\n\\n    // extracts given least significant bits\\n    function extract(bytes32 input, uint256 bits) internal pure returns (uint256 value, bytes32 inputUpdated) {\\n        assembly {\\n            let shift := sub(256, bits)\\n            value := shr(shift, shl(shift, input))\\n            inputUpdated := shr(bits, input)\\n        }\\n    }\\n\\n    function extractAddress(bytes32 input) internal pure returns (address value, bytes32 inputUpdated) {\\n        uint256 temp;\\n        (temp, inputUpdated) = extract(input, 160);\\n        assembly {\\n            value := temp\\n        }\\n    }\\n\\n    function extractUint16(bytes32 input) internal pure returns (uint16 value, bytes32 inputUpdated) {\\n        uint256 temp;\\n        (temp, inputUpdated) = extract(input, 16);\\n        value = uint16(temp);\\n    }\\n\\n    function extractUint32(bytes32 input) internal pure returns (uint32 value, bytes32 inputUpdated) {\\n        uint256 temp;\\n        (temp, inputUpdated) = extract(input, 32);\\n        value = uint32(temp);\\n    }\\n\\n    function extractBool(bytes32 input) internal pure returns (bool value, bytes32 inputUpdated) {\\n        uint256 temp;\\n        (temp, inputUpdated) = extract(input, 8);\\n        value = temp != 0;\\n    }\\n\\n    function offset(bytes32 key, uint256 offset_) internal pure returns (bytes32) {\\n        assembly {\\n            key := add(key, offset_)\\n        }\\n        return key;\\n    }\\n\\n    function fromUint(uint256 input) internal pure returns (bytes32 output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    function keccak256One(bytes32 input) internal pure returns (bytes32 result) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(0, input)\\n            result := keccak256(0, 0x20)\\n        }\\n    }\\n\\n    function keccak256Two(bytes32 input1, bytes32 input2) internal pure returns (bytes32 result) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(0, input1)\\n            mstore(0x20, input2)\\n            result := keccak256(0, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3af2a04d5d1efd211e0671a5fff231807656cd0d44eaaa4d4f0791e1a02d79a0\",\"license\":\"MIT\"},\"@ragetrade/core/contracts/libraries/SignedFullMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\\n\\nimport { SignedMath } from './SignedMath.sol';\\n\\n/// @title Signed full math functions\\nlibrary SignedFullMath {\\n    using SafeCast for uint256;\\n    using SignedMath for int256;\\n\\n    function mulDiv(\\n        int256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        result = FullMath.mulDiv(a < 0 ? uint256(-1 * a) : uint256(a), b, denominator).toInt256();\\n        if (a < 0) {\\n            result = -result;\\n        }\\n    }\\n\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        bool resultPositive = true;\\n        uint256 _a;\\n        uint256 _b;\\n        uint256 _denominator;\\n\\n        (_a, resultPositive) = a.extractSign(resultPositive);\\n        (_b, resultPositive) = b.extractSign(resultPositive);\\n        (_denominator, resultPositive) = denominator.extractSign(resultPositive);\\n\\n        result = FullMath.mulDiv(_a, _b, _denominator).toInt256();\\n        if (!resultPositive) {\\n            result = -result;\\n        }\\n    }\\n\\n    /// @notice Rounds down towards negative infinity\\n    /// @dev In Solidity -3/2 is -1. But this method result is -2\\n    function mulDivRoundingDown(\\n        int256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (result < 0 && _hasRemainder(a.absUint(), b, denominator)) {\\n            result += -1;\\n        }\\n    }\\n\\n    /// @notice Rounds down towards negative infinity\\n    /// @dev In Solidity -3/2 is -1. But this method result is -2\\n    function mulDivRoundingDown(\\n        int256 a,\\n        int256 b,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (result < 0 && _hasRemainder(a.absUint(), b.absUint(), denominator.absUint())) {\\n            result += -1;\\n        }\\n    }\\n\\n    function _hasRemainder(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) private pure returns (bool hasRemainder) {\\n        assembly {\\n            let remainder := mulmod(a, b, denominator)\\n            if gt(remainder, 0) {\\n                hasRemainder := 1\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x452ebf984ca08179db8fab297516aab915da8805505c562a8306e5614c6edb73\",\"license\":\"GPL-2.0-or-later\"},\"@ragetrade/core/contracts/libraries/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nint256 constant ONE = 1;\\n\\n/// @title Signed math functions\\nlibrary SignedMath {\\n    function abs(int256 value) internal pure returns (int256) {\\n        return value > 0 ? value : -value;\\n    }\\n\\n    function absUint(int256 value) internal pure returns (uint256) {\\n        return uint256(abs(value));\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value >= 0 ? ONE : -ONE;\\n    }\\n\\n    /// @notice Converts a signed integer into an unsigned integer and inverts positive bool if negative\\n    function extractSign(int256 a, bool positive) internal pure returns (uint256 _a, bool) {\\n        if (a < 0) {\\n            positive = !positive;\\n            _a = uint256(-a);\\n        } else {\\n            _a = uint256(a);\\n        }\\n        return (_a, positive);\\n    }\\n\\n    function extractSign(int256 a) internal pure returns (uint256 _a, bool) {\\n        return extractSign(a, true);\\n    }\\n\\n    /// @notice returns the max of two int256 numbers\\n    /// @param a first number\\n    /// @param b second number\\n    /// @return c  = max of a and b\\n    function max(int256 a, int256 b) internal pure returns (int256 c) {\\n        if (a > b) c = a;\\n        else c = b;\\n    }\\n}\\n\",\"keccak256\":\"0xbfc90b29f651e2a5bf9f2d281a8d4a0288db770fdc4b3424576aeee993fcdfa3\",\"license\":\"MIT\"},\"@ragetrade/core/contracts/libraries/UniswapV3PoolHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\\n\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\n\\n/// @title UniswapV3Pool helper functions\\nlibrary UniswapV3PoolHelper {\\n    using UniswapV3PoolHelper for IUniswapV3Pool;\\n\\n    error UV3PH_OracleConsultFailed();\\n\\n    /// @notice Get the pool's current tick\\n    /// @param v3Pool The uniswap v3 pool contract\\n    /// @return tick the current tick\\n    function tickCurrent(IUniswapV3Pool v3Pool) internal view returns (int24 tick) {\\n        (, tick, , , , , ) = v3Pool.slot0();\\n    }\\n\\n    /// @notice Get the pool's current sqrt price\\n    /// @param v3Pool The uniswap v3 pool contract\\n    /// @return sqrtPriceX96 the current sqrt price\\n    function sqrtPriceCurrent(IUniswapV3Pool v3Pool) internal view returns (uint160 sqrtPriceX96) {\\n        (sqrtPriceX96, , , , , , ) = v3Pool.slot0();\\n    }\\n\\n    /// @notice Get twap price for uniswap v3 pool\\n    /// @param v3Pool The uniswap v3 pool contract\\n    /// @param twapDuration The twap period\\n    /// @return sqrtPriceX96 the twap price\\n    function twapSqrtPrice(IUniswapV3Pool v3Pool, uint32 twapDuration) internal view returns (uint160 sqrtPriceX96) {\\n        int24 _twapTick = v3Pool.twapTick(twapDuration);\\n        sqrtPriceX96 = TickMath.getSqrtRatioAtTick(_twapTick);\\n    }\\n\\n    /// @notice Get twap tick for uniswap v3 pool\\n    /// @param v3Pool The uniswap v3 pool contract\\n    /// @param twapDuration The twap period\\n    /// @return _twapTick the twap tick\\n    function twapTick(IUniswapV3Pool v3Pool, uint32 twapDuration) internal view returns (int24 _twapTick) {\\n        if (twapDuration == 0) {\\n            return v3Pool.tickCurrent();\\n        }\\n\\n        uint32[] memory secondAgos = new uint32[](2);\\n        secondAgos[0] = twapDuration;\\n        secondAgos[1] = 0;\\n\\n        // this call will fail if period is bigger than MaxObservationPeriod\\n        try v3Pool.observe(secondAgos) returns (int56[] memory tickCumulatives, uint160[] memory) {\\n            int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n            int24 timeWeightedAverageTick = int24(tickCumulativesDelta / int56(uint56(twapDuration)));\\n\\n            // Always round to negative infinity\\n            if (tickCumulativesDelta < 0 && (tickCumulativesDelta % int56(uint56(twapDuration)) != 0)) {\\n                timeWeightedAverageTick--;\\n            }\\n            return timeWeightedAverageTick;\\n        } catch {\\n            // if for some reason v3Pool.observe fails, fallback to the current tick\\n            (, _twapTick, , , , , ) = v3Pool.slot0();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1ef448cdbc64f085dc546620e0e265bf44b5de5d8120e7469876a672410d1b3\",\"license\":\"GPL-2.0-or-later\"},\"@ragetrade/core/contracts/utils/Extsload.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IExtsload } from '../interfaces/IExtsload.sol';\\n\\n/// @notice Allows the inheriting contract make it's state accessable to other contracts\\n/// https://ethereum-magicians.org/t/extsload-opcode-proposal/2410/11\\nabstract contract Extsload is IExtsload {\\n    function extsload(bytes32 slot) external view returns (bytes32 val) {\\n        assembly {\\n            val := sload(slot)\\n        }\\n    }\\n\\n    function extsload(bytes32[] memory slots) external view returns (bytes32[] memory) {\\n        assembly {\\n            let end := add(0x20, add(slots, mul(mload(slots), 0x20)))\\n            for {\\n                let pointer := add(slots, 32)\\n            } lt(pointer, end) {\\n\\n            } {\\n                let value := sload(mload(pointer))\\n                mstore(pointer, value)\\n                pointer := add(pointer, 0x20)\\n            }\\n        }\\n\\n        return slots;\\n    }\\n}\\n\",\"keccak256\":\"0x7ffc477a2535e897482b6032f3a07af767c1ab6b536f2cd4102c23985cb0527d\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0240f7703cff32a61ee3e9fbb339e09a944260432a9ef37debf3692b1a6c8049\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x96ab2a92fbac88a704270b039691afb363c5a1ef1170fb0c955043e4da84b987\",\"license\":\"AGPL-3.0-only\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport {IUniswapV3PoolImmutables} from './pool/IUniswapV3PoolImmutables.sol';\\nimport {IUniswapV3PoolState} from './pool/IUniswapV3PoolState.sol';\\nimport {IUniswapV3PoolDerivedState} from './pool/IUniswapV3PoolDerivedState.sol';\\nimport {IUniswapV3PoolActions} from './pool/IUniswapV3PoolActions.sol';\\nimport {IUniswapV3PoolOwnerActions} from './pool/IUniswapV3PoolOwnerActions.sol';\\nimport {IUniswapV3PoolErrors} from './pool/IUniswapV3PoolErrors.sol';\\nimport {IUniswapV3PoolEvents} from './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolErrors,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0x4e64844c56061cd90e0a80de73534a9166704c43eed579eb83f90bc2780ce968\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Errors emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolErrors {\\n    error LOK();\\n    error TLU();\\n    error TLM();\\n    error TUM();\\n    error AI();\\n    error M0();\\n    error M1();\\n    error AS();\\n    error IIA();\\n    error L();\\n    error F0();\\n    error F1();\\n}\\n\",\"keccak256\":\"0xf80abf13fb1fafc127ba4e792f240dd8ea7c8c893978cdfd8439c27fae9a037b\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// @return tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// @return observationIndex The index of the last oracle observation that was written,\\n    /// @return observationCardinality The current maximum number of observations stored in the pool,\\n    /// @return observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// @return feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    /// @return The liquidity at the current price of the pool\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper\\n    /// @return liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// @return feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// @return feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// @return tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// @return secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// @return secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// @return initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return liquidity The amount of liquidity in the position,\\n    /// @return feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// @return feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// @return tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// @return tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// @return tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// @return secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// @return initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x44fa2ce1182f6c2f6bead3d1737804bf7e112252ae86e0f2e92f9b8249603f43\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7825565a4bb2a34a1dc96bbfead755785dfb0df8ef81bd934c43023689685645\",\"license\":\"MIT\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    error T();\\n    error R();\\n\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n            if (absTick > uint256(int256(MAX_TICK))) revert T();\\n\\n            uint256 ratio = absTick & 0x1 != 0\\n                ? 0xfffcb933bd6fad37aa2d162d1a594001\\n                : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        unchecked {\\n            // second inequality must be < because the price can never reach the price at the max tick\\n            if (!(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO)) revert R();\\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = ratio;\\n            uint256 msb = 0;\\n\\n            assembly {\\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(5, gt(r, 0xFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(4, gt(r, 0xFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(3, gt(r, 0xFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(2, gt(r, 0xF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(1, gt(r, 0x3))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := gt(r, 0x1)\\n                msb := or(msb, f)\\n            }\\n\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c57de03a91cc2ec8939865dbbcb0197bb6c353b711075eefd8e0fca5e102129\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/BaseVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { ERC20PresetMinterPauser as CollateralToken } from '@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol';\\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\\n\\nimport { IClearingHouse } from '@ragetrade/core/contracts/interfaces/IClearingHouse.sol';\\nimport { IClearingHouseStructures } from '@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseStructures.sol';\\nimport { IVToken } from '@ragetrade/core/contracts/interfaces/IVToken.sol';\\nimport { SignedMath } from '@ragetrade/core/contracts/libraries/SignedMath.sol';\\nimport { SignedFullMath } from '@ragetrade/core/contracts/libraries/SignedFullMath.sol';\\nimport { AddressHelper } from '@ragetrade/core/contracts/libraries/AddressHelper.sol';\\nimport { UniswapV3PoolHelper, IUniswapV3Pool } from '@ragetrade/core/contracts/libraries/UniswapV3PoolHelper.sol';\\nimport { Extsload } from '@ragetrade/core/contracts/utils/Extsload.sol';\\nimport { ClearingHouseExtsload } from '@ragetrade/core/contracts/extsloads/ClearingHouseExtsload.sol';\\n\\nimport { ERC20 } from '@rari-capital/solmate/src/tokens/ERC20.sol';\\n\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { FixedPoint96 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol';\\n\\nimport { IBaseVault } from '../interfaces/IBaseVault.sol';\\nimport { IBaseYieldStrategy } from '../interfaces/IBaseYieldStrategy.sol';\\n\\nimport { RageERC4626 } from './RageERC4626.sol';\\nimport { SafeCast } from '../libraries/SafeCast.sol';\\nimport { Logic } from '../libraries/Logic.sol';\\n\\nabstract contract BaseVault is IBaseVault, RageERC4626, IBaseYieldStrategy, OwnableUpgradeable, Extsload {\\n    using AddressHelper for address;\\n    using AddressHelper for IVToken;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SignedMath for int256;\\n    using SignedFullMath for int256;\\n    using UniswapV3PoolHelper for IUniswapV3Pool;\\n    using ClearingHouseExtsload for IClearingHouse;\\n\\n    IERC20Metadata internal rageSettlementToken;\\n    IClearingHouse internal rageClearingHouse;\\n    CollateralToken internal rageCollateralToken;\\n\\n    uint256 public rageAccountNo;\\n    uint32 internal ethPoolId;\\n    IUniswapV3Pool internal rageVPool;\\n\\n    uint256 public depositCap; // in vault shares\\n\\n    uint64 public lastRebalanceTS;\\n    uint16 public rebalancePriceThresholdBps;\\n    uint32 public rebalanceTimeThreshold; // seconds\\n\\n    address public keeper;\\n\\n    error BV_InvalidRebalance();\\n    error BV_NoPositionToRebalance();\\n    error BV_DepositCap(uint256 depositCap, uint256 depositAmount);\\n    error BV_OnlyKeeperAllowed(address msgSender, address authorisedKeeperAddress);\\n    modifier onlyKeeper() {\\n        if (msg.sender != keeper) revert BV_OnlyKeeperAllowed(msg.sender, keeper);\\n        _;\\n    }\\n\\n    struct BaseVaultInitParams {\\n        RageERC4626InitParams rageErc4626InitParams;\\n        uint32 ethPoolId;\\n        address rageClearingHouse;\\n        address rageCollateralToken;\\n        address rageSettlementToken;\\n    }\\n\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function __BaseVault_init(BaseVaultInitParams memory params) internal onlyInitializing {\\n        __Ownable_init();\\n        __RageERC4626_init(params.rageErc4626InitParams);\\n        ethPoolId = params.ethPoolId;\\n        rageClearingHouse = IClearingHouse(params.rageClearingHouse);\\n        rageAccountNo = rageClearingHouse.createAccount();\\n        rageCollateralToken = CollateralToken(params.rageCollateralToken);\\n        rageSettlementToken = IERC20Metadata(params.rageSettlementToken);\\n\\n        rageVPool = rageClearingHouse.getVPool(ethPoolId);\\n\\n        rebalancePriceThresholdBps = 500; //5%\\n        rebalanceTimeThreshold = 1 days;\\n        emit Logic.RebalanceThresholdUpdated(rebalanceTimeThreshold, rebalancePriceThresholdBps);\\n        // Give rageClearingHouse full allowance of rageCollateralToken and usdc\\n    }\\n\\n    function setRebalanceThreshold(uint32 _rebalanceTimeThreshold, uint16 _rebalancePriceThresholdBps)\\n        external\\n        onlyOwner\\n    {\\n        rebalanceTimeThreshold = _rebalanceTimeThreshold;\\n        rebalancePriceThresholdBps = _rebalancePriceThresholdBps;\\n        emit Logic.RebalanceThresholdUpdated(_rebalanceTimeThreshold, _rebalancePriceThresholdBps);\\n    }\\n\\n    /// @notice Set the deposit cap for the vault in asset amount\\n    /// @param newDepositCap The new deposit cap in asset amount\\n    function updateDepositCap(uint256 newDepositCap) external onlyOwner {\\n        depositCap = newDepositCap;\\n        emit Logic.DepositCapUpdated(newDepositCap);\\n    }\\n\\n    function setKeeper(address newKeeperAddress) external onlyOwner {\\n        keeper = newKeeperAddress;\\n        emit Logic.KeeperUpdated(newKeeperAddress);\\n    }\\n\\n    /// @notice grants relevant allowances\\n    function grantAllowances() external virtual {\\n        _grantBaseAllowances();\\n    }\\n\\n    /// @notice Rebalance the vault assets\\n    function rebalance() public virtual onlyKeeper {\\n        int256 vaultMarketValue = getVaultMarketValue();\\n\\n        if (!isValidRebalance(vaultMarketValue)) {\\n            revert BV_InvalidRebalance();\\n        }\\n        // Rebalance ranges based on the parameters passed\\n        IClearingHouse.CollateralDepositView[] memory deposits;\\n        IClearingHouse.VTokenPositionView[] memory vTokenPositions;\\n        // Step-0 Check if the rebalance can go through (time and threshold based checks)\\n        (deposits, vTokenPositions) = _rebalanceProfitAndCollateral();\\n\\n        // Step-4 Rebalance\\n        if (vTokenPositions.length == 0) revert BV_NoPositionToRebalance();\\n        _rebalanceRanges(vTokenPositions[0], vaultMarketValue);\\n\\n        // Post rebalance\\n        lastRebalanceTS = uint64(_blockTimestamp());\\n\\n        emit Logic.Rebalance();\\n    }\\n\\n    /// @notice closes remaining token position (To be used when reset condition is hit)\\n    function closeTokenPosition() external onlyKeeper {\\n        IClearingHouse.VTokenPositionView[] memory vTokenPositions;\\n        // Step-0 Check if the rebalance can go through (time and threshold based checks)\\n        (, , , vTokenPositions) = rageClearingHouse.getAccountInfo(rageAccountNo);\\n\\n        _closeTokenPositionOnReset(vTokenPositions[0]);\\n    }\\n\\n    /// @notice returns the total vault asset balance + staked balance\\n    function totalAssets() public view override returns (uint256) {\\n        return asset.balanceOf(address(this)) + _stakedAssetBalance();\\n    }\\n\\n    /// @notice Returns account market value of vault in USDC (settlement token)\\n    function getVaultMarketValue() public view returns (int256 vaultMarketValue) {\\n        vaultMarketValue = rageClearingHouse.getAccountNetProfit(rageAccountNo);\\n        vaultMarketValue += (getMarketValue(totalAssets())).toInt256();\\n    }\\n\\n    /// @notice grants allowances for base vault\\n    function _grantBaseAllowances() internal {\\n        rageCollateralToken.approve(address(rageClearingHouse), type(uint256).max);\\n        rageSettlementToken.approve(address(rageClearingHouse), type(uint256).max);\\n    }\\n\\n    /// @notice settles profit and collateral for the vault\\n    /// @param deposits The amount of collateral deposited to rage core\\n    /// @param vaultMarketValue The market value of the vault in USDC\\n    function _settleProfitAndCollateral(IClearingHouse.CollateralDepositView[] memory deposits, int256 vaultMarketValue)\\n        internal\\n    {\\n        // Settle net profit made from ranges and deposit/withdraw profits in USDC\\n        int256 netProfit = rageClearingHouse.getAccountNetProfit(rageAccountNo);\\n        if (netProfit > 0) {\\n            // If net profit > 0 withdraw USDC and convert USDC into LP tokens\\n            rageClearingHouse.updateProfit(rageAccountNo, -1 * netProfit);\\n            _convertSettlementTokenToAsset(uint256(netProfit));\\n        } else if (netProfit < 0) {\\n            // If net profit > 0 convert LP tokens into USDC and deposit USDC to cover loss\\n            uint256 settlementTokenOutput = _convertAssetToSettlementToken(uint256(-1 * netProfit));\\n\\n            if (settlementTokenOutput > 0) {\\n                rageClearingHouse.updateProfit(rageAccountNo, settlementTokenOutput.toInt256());\\n            }\\n        }\\n\\n        // Settle net change in market value and deposit/withdraw collateral tokens\\n        // Vault market value is just the collateral value since profit has been settled\\n        int256 vaultMarketValueDiff;\\n        if (deposits.length > 0) {\\n            //Since USDC never deposited as margin so there would just be 1 collateral\\n            // assert(deposits.length == 1);\\n            IClearingHouse.CollateralDepositView memory stablecoinDeposit = deposits[0];\\n            // assert(address(stablecoinDeposit.collateral) == address(rageCollateralToken));\\n            vaultMarketValueDiff =\\n                vaultMarketValue -\\n                stablecoinDeposit.balance.toInt256().mulDiv(\\n                    10**rageSettlementToken.decimals(),\\n                    10**rageCollateralToken.decimals()\\n                );\\n        } else {\\n            vaultMarketValueDiff = vaultMarketValue;\\n        }\\n        // Settlement basis market value difference\\n        _settleCollateral(vaultMarketValueDiff);\\n    }\\n\\n    /// @notice settles collateral for the vault\\n    /// @dev to be called after settle profits only (since vaultMarketValue if after settlement of profits)\\n    /// @param vaultMarketValueDiff The difference in current and previous market value of the vault in USDC\\n    function _settleCollateral(int256 vaultMarketValueDiff) internal {\\n        int256 normalizedVaultMarketValueDiff = vaultMarketValueDiff.mulDiv(\\n            10**rageCollateralToken.decimals(),\\n            10**rageSettlementToken.decimals()\\n        );\\n        uint256 normalizedVaultMarketValueDiffAbs = normalizedVaultMarketValueDiff.absUint();\\n\\n        if (normalizedVaultMarketValueDiff > 0) {\\n            // Mint collateral coins and deposit into rage trade\\n            rageCollateralToken.mint(address(this), normalizedVaultMarketValueDiffAbs);\\n            rageClearingHouse.updateMargin(\\n                rageAccountNo,\\n                address(rageCollateralToken).truncate(),\\n                int256(normalizedVaultMarketValueDiffAbs)\\n            );\\n        } else if (normalizedVaultMarketValueDiff < 0) {\\n            // Withdraw rage trade deposits\\n            rageClearingHouse.updateMargin(\\n                rageAccountNo,\\n                address(rageCollateralToken).truncate(),\\n                -int256(normalizedVaultMarketValueDiffAbs)\\n            );\\n            rageCollateralToken.burn(normalizedVaultMarketValueDiffAbs);\\n        }\\n    }\\n\\n    function _isValidRebalanceTime() internal view returns (bool) {\\n        return _blockTimestamp() - lastRebalanceTS > rebalanceTimeThreshold;\\n    }\\n\\n    function isValidRebalance(int256 vaultMarketValue) public view returns (bool isValid) {\\n        return _isValidRebalanceTime() || _isValidRebalanceRange(vaultMarketValue);\\n    }\\n\\n    /// @notice Rebalances the pnl on rage trade and converts profit into asset tokens and covers losses using asset tokens\\n    /// @notice Rebalances collateral based on the updated market value of vault assets\\n    function _rebalanceProfitAndCollateral()\\n        internal\\n        returns (\\n            IClearingHouse.CollateralDepositView[] memory deposits,\\n            IClearingHouse.VTokenPositionView[] memory vTokenPositions\\n        )\\n    {\\n        // Rebalance collateral and dummy stable coins representing the collateral\\n        // Update protocol and management fee accumulated\\n\\n        // Step-0 Check if the rebalance can go through (time and threshold based checks)\\n        (, , deposits, vTokenPositions) = rageClearingHouse.getAccountInfo(rageAccountNo);\\n        // #Token position = 0 or (1 and token should be VWETH)\\n        int256 vaultMarketValue = getVaultMarketValue();\\n\\n        // assert(vTokenPositions.length == 0 || (vTokenPositions.length == 1 && vTokenPositions[0].poolId == ethPoolId));\\n        // Harvest the rewards earned (Should be harvested before calculating vault market value)\\n        _harvestFees();\\n\\n        _settleProfitAndCollateral(deposits, vaultMarketValue);\\n        // stake the remaining LP tokens\\n        _stake(asset.balanceOf(address(this)));\\n    }\\n\\n    /// @notice returns twap price X96 from rage trade\\n    function _getTwapSqrtPriceX96() internal view returns (uint160 twapSqrtPriceX96) {\\n        twapSqrtPriceX96 = Logic.getTwapSqrtPriceX96(rageVPool, rageClearingHouse.getTwapDuration(ethPoolId));\\n    }\\n\\n    /// @notice converts all non-asset balances into asset\\n    /// @dev to be called before functions which allocate and deallocate shares (deposit, withdraw, mint and burn)\\n    function _beforeShareAllocation() internal virtual override {\\n        _rebalanceProfitAndCollateral();\\n    }\\n\\n    function afterDeposit(\\n        uint256 amount,\\n        uint256 /** shares **/\\n    ) internal virtual override {\\n        if (totalAssets() > depositCap) revert BV_DepositCap(depositCap, totalAssets());\\n        _afterDepositYield(amount);\\n        _afterDepositRanges(totalAssets(), amount);\\n    }\\n\\n    function beforeWithdraw(\\n        uint256 amount,\\n        uint256 /** shares **/\\n    ) internal virtual override {\\n        _beforeWithdrawRanges(totalAssets(), amount);\\n        _beforeWithdrawYield(amount);\\n    }\\n\\n    function beforeWithdrawClosePosition(uint256 amount) internal virtual override returns (uint256 updatedAmount) {\\n        return _beforeWithdrawClosePositionRanges(totalAssets(), amount);\\n    }\\n\\n    function _blockTimestamp() internal view virtual returns (uint256) {\\n        /* solhint-disable-next-line not-rely-on-time */\\n        return block.timestamp;\\n    }\\n\\n    /// @notice Get token notional absolute\\n    /// @param tokenAmount Token amount\\n    /// @param sqrtPriceX96 Sqrt of price in X96\\n    function _getTokenNotionalAbs(int256 tokenAmount, uint160 sqrtPriceX96)\\n        internal\\n        pure\\n        returns (uint256 tokenNotionalAbs)\\n    {\\n        tokenNotionalAbs = tokenAmount\\n            .mulDiv(sqrtPriceX96, FixedPoint96.Q96)\\n            .mulDiv(sqrtPriceX96, FixedPoint96.Q96)\\n            .absUint();\\n    }\\n\\n    /*\\n        YIELD STRATEGY\\n    */\\n    function getPriceX128() public view virtual returns (uint256 priceX128);\\n\\n    function getMarketValue(uint256 amount) public view virtual returns (uint256 marketValue);\\n\\n    function _stake(uint256 amount) internal virtual;\\n\\n    function _harvestFees() internal virtual;\\n\\n    /// @notice converts given amount of settlement token from asset token\\n    /// @param amount The amount of settlement token to created from asset token\\n    function _convertAssetToSettlementToken(uint256 amount) internal virtual returns (uint256 usdcAmount);\\n\\n    /// @notice converts given amount of settlement token to asset token\\n    /// @param amount The amount of settlement token to be converted to asset token\\n    function _convertSettlementTokenToAsset(uint256 amount) internal virtual;\\n\\n    /// @notice amount of asset tokens staked\\n    function _stakedAssetBalance() internal view virtual returns (uint256);\\n\\n    function _afterDepositYield(uint256 amount) internal virtual;\\n\\n    function _beforeWithdrawYield(uint256 amount) internal virtual;\\n\\n    /*\\n        RANGE STRATEGY\\n    */\\n\\n    /// @notice rebalance range added to rage trade\\n    /// @param vTokenPosition The token position of the vault of eth pool\\n    /// @param vaultMarketValue The market value of the vault in USDC\\n    function _rebalanceRanges(IClearingHouse.VTokenPositionView memory vTokenPosition, int256 vaultMarketValue)\\n        internal\\n        virtual;\\n\\n    /// @notice closes token position\\n    function _closeTokenPositionOnReset(IClearingHouse.VTokenPositionView memory vTokenPosition) internal virtual;\\n\\n    /// @notice Updates liquidity position and collateral in rage core after deposit\\n    /// @param amountAfterDeposit The amount of asset tokens after deposit\\n    /// @param amountDeposited The amount of asset tokens deposited\\n    function _afterDepositRanges(uint256 amountAfterDeposit, uint256 amountDeposited) internal virtual;\\n\\n    /// @notice Closes net token position before withdrawal\\n    /// @param amountBeforeWithdraw The amount of asset tokens before withdrawal\\n    /// @param amountWithdrawn The amount of asset tokens withdrawn\\n    function _beforeWithdrawClosePositionRanges(uint256 amountBeforeWithdraw, uint256 amountWithdrawn)\\n        internal\\n        virtual\\n        returns (uint256 updatedAmountWithdrawn);\\n\\n    /// @notice Updates liquidity position and collateral in rage core before withdrawal\\n    /// @param amountBeforeWithdraw The amount of asset tokens before withdrawal\\n    /// @param amountWithdrawn The amount of asset tokens withdrawn\\n    function _beforeWithdrawRanges(uint256 amountBeforeWithdraw, uint256 amountWithdrawn) internal virtual;\\n\\n    /// @notice Checks if rebalance is valid based on range\\n    function _isValidRebalanceRange(int256 vaultMarketValue) internal view virtual returns (bool isValid);\\n}\\n\",\"keccak256\":\"0x13c4263a26e9a675d19140113803684a8bf7c47f01037447da093817dc02820b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/RageERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport { ERC4626Upgradeable } from '../utils/ERC4626Upgradeable.sol';\\n\\nabstract contract RageERC4626 is ERC4626Upgradeable {\\n    using SafeERC20 for IERC20Metadata;\\n\\n    struct RageERC4626InitParams {\\n        IERC20Metadata asset;\\n        string name;\\n        string symbol;\\n    }\\n\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function __RageERC4626_init(RageERC4626InitParams memory params) internal {\\n        __ERC4626Upgradeable_init(params.asset, params.name, params.symbol);\\n    }\\n\\n    function deposit(uint256 amount, address to) public virtual override returns (uint256 shares) {\\n        _beforeShareAllocation();\\n        shares = super.deposit(amount, to);\\n    }\\n\\n    function mint(uint256 shares, address to) public virtual override returns (uint256 amount) {\\n        _beforeShareAllocation();\\n        amount = super.mint(shares, to);\\n    }\\n\\n    function withdraw(\\n        uint256 amount,\\n        address to,\\n        address from\\n    ) public override returns (uint256 shares) {\\n        _beforeShareAllocation();\\n        uint256 updatedAmount = beforeWithdrawClosePosition(amount);\\n        shares = super.withdraw(updatedAmount, to, from);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address to,\\n        address from\\n    ) public override returns (uint256 amount) {\\n        _beforeShareAllocation();\\n\\n        if (msg.sender != from) {\\n            uint256 allowed = allowance(from, msg.sender); // Saves gas for limited approvals.\\n            if (allowed != type(uint256).max) _approve(from, msg.sender, allowed - shares);\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((amount = previewRedeem(shares)) != 0, 'ZERO_ASSETS');\\n\\n        //Additional cap on withdraw to ensure the position closed does not breach slippage tolerance\\n        //In case tolerance is reached only partial withdraw is executed\\n        uint256 updatedAmount = beforeWithdrawClosePosition(amount);\\n        if (updatedAmount != amount) {\\n            amount = updatedAmount;\\n            shares = previewWithdraw(updatedAmount);\\n        }\\n\\n        beforeWithdraw(amount, shares);\\n\\n        _burn(from, shares);\\n\\n        emit Withdraw(msg.sender, to, from, amount, shares);\\n\\n        asset.safeTransfer(to, amount);\\n    }\\n\\n    function _beforeShareAllocation() internal virtual;\\n\\n    function beforeWithdrawClosePosition(uint256 amount) internal virtual returns (uint256 updatedAmount);\\n}\\n\",\"keccak256\":\"0xe0afda3e96b2b3f5f7209e5a9ba4b3925b2a9c9d157d7edc730f07be33e68bea\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IBaseVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseVault {\\n    function rebalance() external;\\n\\n    function closeTokenPosition() external;\\n}\\n\",\"keccak256\":\"0x1e8199a28d0d25635317ca097d28e17b5663b876ab718f678976a1f9d19b3626\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IBaseYieldStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseYieldStrategy {\\n    function getMarketValue(uint256 amount) external view returns (uint256 marketValue);\\n\\n    // Returns the price of yield token\\n    function getPriceX128() external view returns (uint256 priceX128);\\n}\\n\",\"keccak256\":\"0xb56ca238608ba259fd533f542c360a33068038b2b6c5a0b81d9ad745f45572c7\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/curve/ICurveGauge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\n/* solhint-disable func-name-mixedcase */\\n/* solhint-disable var-name-mixedcase */\\n\\ninterface ICurveGauge {\\n    function deposit(uint256 _value) external;\\n\\n    function deposit(uint256 _value, address addr) external;\\n\\n    function balanceOf(address arg0) external view returns (uint256);\\n\\n    function withdraw(uint256 _value) external;\\n\\n    function withdraw(uint256 _value, bool claim_rewards) external;\\n\\n    function claim_rewards() external;\\n\\n    function claim_rewards(address addr) external;\\n\\n    function claimable_tokens(address addr) external returns (uint256);\\n\\n    function claimable_reward(address user, address token) external view returns (uint256);\\n\\n    function integrate_fraction(address arg0) external view returns (uint256);\\n\\n    function claimable_reward_write(address user, address token) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x225a36c087dbcb112c8725ed8d50e3ab36e735aef7f86443871313c2e9dbccee\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/curve/ICurveStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\n/* solhint-disable func-name-mixedcase */\\n/* solhint-disable var-name-mixedcase */\\n\\ninterface ICurveStableSwap {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 token_amount,\\n        uint256 index,\\n        uint256 min_amount\\n    ) external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function exchange(\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        bool\\n    ) external;\\n\\n    function get_dy(\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external view returns (uint256);\\n\\n    function balances(uint256) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[3] memory amounts, bool deposit) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7f08fa8c9caaff39cfbb05b28c9c247e2074a727e2ca2df01ea38375259f6b45\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/curve/ILPPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\ninterface ILPPriceGetter {\\n    function lp_price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbd221005c486996d5f3eab43f89c3fccc4c07a7535c4c638f0ee9428d1888991\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Logic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport { AggregatorV3Interface } from '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport { UniswapV3PoolHelper } from '@ragetrade/core/contracts/libraries/UniswapV3PoolHelper.sol';\\n\\nimport { FixedPoint96 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol';\\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\n\\nimport { ICurveGauge } from '../interfaces/curve/ICurveGauge.sol';\\nimport { ILPPriceGetter } from '../interfaces/curve/ILPPriceGetter.sol';\\nimport { ICurveStableSwap } from '../interfaces/curve/ICurveStableSwap.sol';\\n\\nimport { SwapManager } from '../libraries/SwapManager.sol';\\nimport { SafeCast } from '../libraries/SafeCast.sol';\\n\\nlibrary Logic {\\n    using SafeCast for uint256;\\n    using FullMath for uint256;\\n    using UniswapV3PoolHelper for IUniswapV3Pool;\\n\\n    event Harvested(uint256 crvAmount);\\n    event Staked(uint256 amount, address indexed depositor);\\n\\n    event FeesWithdrawn(uint256 total);\\n    event FeesUpdated(uint256 fee);\\n\\n    event CrvOracleUpdated(address indexed oracle);\\n    event CrvSwapSlippageToleranceUpdated(uint256 tolerance);\\n    event NotionalCrvHarvestThresholdUpdated(uint256 threshold);\\n    event EightyTwentyParamsUpdated(\\n        uint16 closePositionSlippageSqrtToleranceBps,\\n        uint16 resetPositionThresholdBps,\\n        uint64 minNotionalPositionToCloseThreshold\\n    );\\n    event KeeperUpdated(address keeper);\\n    event DepositCapUpdated(uint256 depositCap);\\n    event RebalanceThresholdUpdated(uint32 rebalanceTimeThreshold, uint16 rebalancePriceThresholdBps);\\n    event Rebalance();\\n    event TokenPositionClosed();\\n\\n    event StateInfo(uint256 lpPrice);\\n\\n    // base vault\\n\\n    function getTwapSqrtPriceX96(IUniswapV3Pool rageVPool, uint32 rageTwapDuration)\\n        external\\n        view\\n        returns (uint160 twapSqrtPriceX96)\\n    {\\n        twapSqrtPriceX96 = rageVPool.twapSqrtPrice(rageTwapDuration);\\n    }\\n\\n    function _getTwapSqrtPriceX96(IUniswapV3Pool rageVPool, uint32 rageTwapDuration)\\n        internal\\n        view\\n        returns (uint160 twapSqrtPriceX96)\\n    {\\n        twapSqrtPriceX96 = rageVPool.twapSqrtPrice(rageTwapDuration);\\n    }\\n\\n    // 80 20\\n\\n    function isValidRebalanceRangeWithoutCheckReset(\\n        IUniswapV3Pool rageVPool,\\n        uint32 rageTwapDuration,\\n        uint16 rebalancePriceThresholdBps,\\n        int24 baseTickLower,\\n        int24 baseTickUpper\\n    ) external view returns (bool isValid) {\\n        uint256 twapSqrtPriceX96 = uint256(_getTwapSqrtPriceX96(rageVPool, rageTwapDuration));\\n        uint256 twapSqrtPriceX96Delta = twapSqrtPriceX96.mulDiv(rebalancePriceThresholdBps, 1e4);\\n        if (\\n            TickMath.getTickAtSqrtRatio((twapSqrtPriceX96 + twapSqrtPriceX96Delta).toUint160()) > baseTickUpper ||\\n            TickMath.getTickAtSqrtRatio((twapSqrtPriceX96 - twapSqrtPriceX96Delta).toUint160()) < baseTickLower\\n        ) isValid = true;\\n    }\\n\\n    /// @notice convert sqrt price in X96 to initializable tick\\n    /// @param sqrtPriceX96 Sqrt of price in X96\\n    /// @param isTickUpper true if price represents upper tick and false if price represents lower tick\\n    function sqrtPriceX96ToValidTick(uint160 sqrtPriceX96, bool isTickUpper) external pure returns (int24 roundedTick) {\\n        int24 tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96);\\n        if (isTickUpper) {\\n            roundedTick = tick + 10 - (tick % 10);\\n        } else {\\n            roundedTick = tick - (tick % 10);\\n        }\\n\\n        if (tick < 0) roundedTick -= 10;\\n    }\\n\\n    function _sqrtPriceX96ToValidTick(uint160 sqrtPriceX96, bool isTickUpper)\\n        internal\\n        pure\\n        returns (int24 roundedTick)\\n    {\\n        int24 tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96);\\n        if (isTickUpper) {\\n            roundedTick = tick + 10 - (tick % 10);\\n        } else {\\n            roundedTick = tick - (tick % 10);\\n        }\\n\\n        if (tick < 0) roundedTick -= 10;\\n    }\\n\\n    /// @notice Get updated base range params\\n    /// @param sqrtPriceX96 Sqrt of price in X96\\n    /// @param vaultMarketValue Market value of vault in USDC\\n    function getUpdatedBaseRangeParams(\\n        uint160 sqrtPriceX96,\\n        int256 vaultMarketValue,\\n        /* solhint-disable var-name-mixedcase */\\n        uint64 SQRT_PRICE_FACTOR_PIPS\\n    )\\n        external\\n        pure\\n        returns (\\n            int24 baseTickLowerUpdate,\\n            int24 baseTickUpperUpdate,\\n            uint128 baseLiquidityUpdate\\n        )\\n    {\\n        {\\n            uint160 sqrtPriceLowerX96 = uint256(sqrtPriceX96).mulDiv(SQRT_PRICE_FACTOR_PIPS, 1e6).toUint160();\\n            uint160 sqrtPriceUpperX96 = uint256(sqrtPriceX96).mulDiv(1e6, SQRT_PRICE_FACTOR_PIPS).toUint160();\\n\\n            baseTickLowerUpdate = _sqrtPriceX96ToValidTick(sqrtPriceLowerX96, false);\\n            baseTickUpperUpdate = _sqrtPriceX96ToValidTick(sqrtPriceUpperX96, true);\\n        }\\n\\n        uint160 updatedSqrtPriceLowerX96 = TickMath.getSqrtRatioAtTick(baseTickLowerUpdate);\\n\\n        // assert(vaultMarketValue > 0);\\n        baseLiquidityUpdate = (\\n            uint256(vaultMarketValue).mulDiv(FixedPoint96.Q96 / 10, (sqrtPriceX96 - updatedSqrtPriceLowerX96))\\n        ).toUint128();\\n    }\\n\\n    // curve yeild strategy\\n    function convertAssetToSettlementToken(\\n        uint256 amount,\\n        ILPPriceGetter lpPriceHolder,\\n        ICurveGauge gauge,\\n        ICurveStableSwap triCryptoPool,\\n        IERC20 usdt,\\n        ISwapRouter uniV3Router,\\n        IERC20 usdc\\n    ) external returns (uint256 usdcAmount) {\\n        uint256 pricePerLP = lpPriceHolder.lp_price();\\n        uint256 lpToWithdraw = ((amount * (10**12)) * (10**18)) / pricePerLP;\\n\\n        gauge.withdraw(lpToWithdraw);\\n        triCryptoPool.remove_liquidity_one_coin(lpToWithdraw, 0, 0);\\n\\n        uint256 balance = usdt.balanceOf(address(this));\\n\\n        bytes memory path = abi.encodePacked(usdt, uint24(500), usdc);\\n\\n        usdcAmount = SwapManager.swapUsdtToUsdc(balance, path, uniV3Router);\\n    }\\n\\n    function getMarketValue(uint256 amount, ILPPriceGetter lpPriceHolder) external view returns (uint256 marketValue) {\\n        marketValue = amount.mulDiv(_getPriceX128(lpPriceHolder), FixedPoint128.Q128);\\n    }\\n\\n    function getPriceX128(ILPPriceGetter lpPriceHolder) external view returns (uint256 priceX128) {\\n        return _getPriceX128(lpPriceHolder);\\n    }\\n\\n    function _getPriceX128(ILPPriceGetter lpPriceHolder) internal view returns (uint256 priceX128) {\\n        uint256 pricePerLP = lpPriceHolder.lp_price();\\n        return pricePerLP.mulDiv(FixedPoint128.Q128, 10**30); // 10**6 / (10**18*10**18)\\n    }\\n}\\n\",\"keccak256\":\"0xd6d3c2bc6b7e4042d47b86e5dbdf7b9013d1beef63f440c69b06a9117285875c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        unchecked {\\n            require((z = uint160(y)) == y, 'Overflow');\\n        }\\n    }\\n\\n    /// @notice Cast a uint256 to a uint128, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint128(uint256 y) internal pure returns (uint128 z) {\\n        unchecked {\\n            /* solhint-disable reason-string */\\n            require((z = uint128(y)) == y);\\n        }\\n    }\\n\\n    /// @notice Cast a uint128 to a int128, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt128(uint128 y) internal pure returns (int128 z) {\\n        unchecked {\\n            require(y < 2**127, 'Overflow');\\n            z = int128(y);\\n        }\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        unchecked {\\n            require((z = int128(y)) == y, 'Overflow');\\n        }\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            require(y < 2**255, 'Overflow');\\n            z = int256(y);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa92c99d01da478590c879d65570e9f206e12b49df250129d1b537f80c3e1986\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/SwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\nimport { ICurveStableSwap } from '../interfaces/curve/ICurveStableSwap.sol';\\n\\nimport { AggregatorV3Interface } from '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\n\\n/* solhint-disable not-rely-on-time */\\n\\nlibrary SwapManager {\\n    error CYS_NEGATIVE_CRV_PRICE();\\n\\n    uint256 internal constant MAX_BPS = 10_000;\\n\\n    function _getCrvPrice(AggregatorV3Interface crvOracle) internal view returns (uint256) {\\n        (, int256 answer, , , ) = crvOracle.latestRoundData();\\n        if (answer < 0) revert CYS_NEGATIVE_CRV_PRICE();\\n        return (uint256(answer));\\n    }\\n\\n    function swapUsdcToUsdtAndAddLiquidity(\\n        uint256 amount,\\n        bytes memory path,\\n        ISwapRouter uniV3Router,\\n        ICurveStableSwap triCrypto\\n    ) external {\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n            path: path,\\n            amountIn: amount,\\n            amountOutMinimum: 0,\\n            recipient: address(this),\\n            deadline: block.timestamp\\n        });\\n\\n        uint256 usdtOut = uniV3Router.exactInput(params);\\n\\n        // USDT, WBTC, WETH\\n        uint256[3] memory amounts = [usdtOut, uint256(0), uint256(0)];\\n        triCrypto.add_liquidity(amounts, 0);\\n    }\\n\\n    function swapUsdtToUsdc(\\n        uint256 amount,\\n        bytes memory path,\\n        ISwapRouter uniV3Router\\n    ) external returns (uint256 usdcOut) {\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n            path: path,\\n            amountIn: amount,\\n            amountOutMinimum: 0,\\n            recipient: address(this),\\n            deadline: block.timestamp\\n        });\\n\\n        usdcOut = uniV3Router.exactInput(params);\\n    }\\n\\n    function swapCrvToUsdtAndAddLiquidity(\\n        uint256 crvAmount,\\n        uint256 crvSwapSlippageTolerance,\\n        AggregatorV3Interface crvOracle,\\n        bytes memory path,\\n        ISwapRouter uniV3Router,\\n        ICurveStableSwap triCrypto\\n    ) external returns (uint256 usdtOut) {\\n        uint256 minOut = (_getCrvPrice(crvOracle) * crvAmount * crvSwapSlippageTolerance) / MAX_BPS;\\n        minOut = ((minOut * (10**6)) / 10**18) / 10**8;\\n\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n            path: path,\\n            amountIn: crvAmount,\\n            amountOutMinimum: minOut,\\n            recipient: address(this),\\n            deadline: block.timestamp\\n        });\\n\\n        usdtOut = uniV3Router.exactInput(params);\\n\\n        uint256[3] memory amounts = [usdtOut, uint256(0), uint256(0)];\\n        triCrypto.add_liquidity(amounts, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x9dbe3622f17cd7fd7c9568273896f8994193711002cfd717bc8848a908ff6546\",\"license\":\"GPL-2.0-or-later\"},\"contracts/rangeStrategy/EightyTwentyRangeStrategyVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { IVToken } from '@ragetrade/core/contracts/interfaces/IVToken.sol';\\nimport { IClearingHouse } from '@ragetrade/core/contracts/interfaces/IClearingHouse.sol';\\nimport { IClearingHouseStructures } from '@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseStructures.sol';\\nimport { IClearingHouseEnums } from '@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseEnums.sol';\\nimport { SignedMath } from '@ragetrade/core/contracts/libraries/SignedMath.sol';\\nimport { SignedFullMath } from '@ragetrade/core/contracts/libraries/SignedFullMath.sol';\\nimport { UniswapV3PoolHelper, IUniswapV3Pool } from '@ragetrade/core/contracts/libraries/UniswapV3PoolHelper.sol';\\n\\nimport { ClearingHouseExtsload } from '@ragetrade/core/contracts/extsloads/ClearingHouseExtsload.sol';\\nimport { FixedPoint96 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol';\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\n\\nimport { BaseVault } from '../base/BaseVault.sol';\\nimport { Logic } from '../libraries/Logic.sol';\\nimport { SafeCast } from '../libraries/SafeCast.sol';\\n\\nabstract contract EightyTwentyRangeStrategyVault is BaseVault {\\n    using SafeCast for uint256;\\n    using SafeCast for uint128;\\n    using SafeCast for int256;\\n    using SignedMath for int256;\\n    using SignedFullMath for int256;\\n    using FullMath for uint256;\\n    using UniswapV3PoolHelper for IUniswapV3Pool;\\n    using ClearingHouseExtsload for IClearingHouse;\\n\\n    error ETRS_INVALID_CLOSE();\\n\\n    int24 public baseTickLower;\\n    int24 public baseTickUpper;\\n    uint128 public baseLiquidity;\\n    bool public isReset;\\n    uint16 private closePositionSlippageSqrtToleranceBps;\\n    uint16 private resetPositionThresholdBps;\\n    uint64 private minNotionalPositionToCloseThreshold;\\n    uint64 private constant SQRT_PRICE_FACTOR_PIPS = 800000; // scaled by 1e6\\n\\n    struct EightyTwentyRangeStrategyVaultInitParams {\\n        BaseVaultInitParams baseVaultInitParams;\\n        uint16 closePositionSlippageSqrtToleranceBps;\\n        uint16 resetPositionThresholdBps;\\n        uint64 minNotionalPositionToCloseThreshold;\\n    }\\n\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function __EightyTwentyRangeStrategyVault_init(EightyTwentyRangeStrategyVaultInitParams memory params)\\n        internal\\n        onlyInitializing\\n    {\\n        __BaseVault_init(params.baseVaultInitParams);\\n        closePositionSlippageSqrtToleranceBps = params.closePositionSlippageSqrtToleranceBps;\\n        resetPositionThresholdBps = params.resetPositionThresholdBps;\\n        minNotionalPositionToCloseThreshold = params.minNotionalPositionToCloseThreshold;\\n        emit Logic.EightyTwentyParamsUpdated(\\n            params.closePositionSlippageSqrtToleranceBps,\\n            params.resetPositionThresholdBps,\\n            params.minNotionalPositionToCloseThreshold\\n        );\\n    }\\n\\n    function setEightTwentyParams(\\n        uint16 _closePositionSlippageSqrtToleranceBps,\\n        uint16 _resetPositionThresholdBps,\\n        uint64 _minNotionalPositionToCloseThreshold\\n    ) external onlyOwner {\\n        closePositionSlippageSqrtToleranceBps = _closePositionSlippageSqrtToleranceBps;\\n        resetPositionThresholdBps = _resetPositionThresholdBps;\\n        minNotionalPositionToCloseThreshold = _minNotionalPositionToCloseThreshold;\\n        emit Logic.EightyTwentyParamsUpdated(\\n            _closePositionSlippageSqrtToleranceBps,\\n            _resetPositionThresholdBps,\\n            _minNotionalPositionToCloseThreshold\\n        );\\n    }\\n\\n    /*\\n        RANGE STRATEGY\\n    */\\n\\n    /// @inheritdoc BaseVault\\n    function _isValidRebalanceRange(int256 vaultMarketValue) internal view override returns (bool isValid) {\\n        isValid = Logic.isValidRebalanceRangeWithoutCheckReset(\\n            rageVPool,\\n            rageClearingHouse.getTwapDuration(ethPoolId),\\n            rebalancePriceThresholdBps,\\n            baseTickLower,\\n            baseTickUpper\\n        );\\n\\n        if (!isValid) {\\n            isValid = checkIsReset(vaultMarketValue);\\n        }\\n    }\\n\\n    function checkIsReset(int256 vaultMarketValue) internal view returns (bool _isReset) {\\n        int256 netPosition = rageClearingHouse.getAccountNetTokenPosition(rageAccountNo, ethPoolId);\\n\\n        uint256 netPositionNotional = _getTokenNotionalAbs(netPosition, _getTwapSqrtPriceX96());\\n        //To Reset if netPositionNotional > 20% of vaultMarketValue\\n        _isReset = netPositionNotional > vaultMarketValue.absUint().mulDiv(resetPositionThresholdBps, 1e4);\\n    }\\n\\n    /// @inheritdoc BaseVault\\n    function _afterDepositRanges(uint256 amountAfterDeposit, uint256 amountDeposited) internal virtual override {\\n        int256 depositMarketValue = getMarketValue(amountDeposited).toInt256();\\n\\n        // add collateral token based on updated market value - so that adding more liquidity does not cause issues\\n        _settleCollateral(depositMarketValue);\\n\\n        IClearingHouseStructures.LiquidityChangeParams memory liquidityChangeParam;\\n        if (baseLiquidity == 0 && amountAfterDeposit == amountDeposited) {\\n            // No range present - calculate range params and add new range\\n            uint160 twapSqrtPriceX96 = _getTwapSqrtPriceX96();\\n            (baseTickLower, baseTickUpper, baseLiquidity) = Logic.getUpdatedBaseRangeParams(\\n                twapSqrtPriceX96,\\n                depositMarketValue,\\n                SQRT_PRICE_FACTOR_PIPS\\n            );\\n            liquidityChangeParam = _getLiquidityChangeParams(baseTickLower, baseTickUpper, baseLiquidity.toInt128());\\n        } else {\\n            // Range Present - Add to base range based on the additional assets deposited\\n            liquidityChangeParam = _getLiquidityChangeParamsAfterDepositWithdraw(\\n                amountAfterDeposit - amountDeposited,\\n                amountDeposited,\\n                false\\n            );\\n            // assert(liquidityChangeParam.liquidityDelta > 0);\\n\\n            baseLiquidity += uint128(liquidityChangeParam.liquidityDelta);\\n        }\\n        //Update range on rage core\\n        rageClearingHouse.updateRangeOrder(rageAccountNo, ethPoolId, liquidityChangeParam);\\n    }\\n\\n    /// @inheritdoc BaseVault\\n    function _beforeWithdrawRanges(uint256 amountBeforeWithdraw, uint256 amountWithdrawn) internal virtual override {\\n        // Remove from base range based on the collateral removal\\n        IClearingHouseStructures.LiquidityChangeParams\\n            memory liquidityChangeParam = _getLiquidityChangeParamsAfterDepositWithdraw(\\n                amountBeforeWithdraw,\\n                amountWithdrawn,\\n                true\\n            );\\n        // assert(liquidityChangeParam.liquidityDelta < 0);\\n        baseLiquidity -= uint128(-liquidityChangeParam.liquidityDelta);\\n\\n        //In case liquidity is becoming 0 then remove the remaining position\\n        //Remaining position should not lead to high slippage since threshold check is done before withdrawal\\n        if (baseLiquidity == 0) liquidityChangeParam.closeTokenPosition = true;\\n        rageClearingHouse.updateRangeOrder(rageAccountNo, ethPoolId, liquidityChangeParam);\\n\\n        // Settle collateral based on updated market value of assets\\n        int256 depositMarketValue = getMarketValue(amountWithdrawn).toInt256();\\n        _settleCollateral(-depositMarketValue);\\n    }\\n\\n    /// @inheritdoc BaseVault\\n    function _beforeWithdrawClosePositionRanges(uint256 amountBeforeWithdraw, uint256 amountWithdrawn)\\n        internal\\n        override\\n        returns (uint256 updatedAmountWithdrawn)\\n    {\\n        uint160 sqrtPriceX96 = _getTwapSqrtPriceX96();\\n        int256 netPosition = rageClearingHouse.getAccountNetTokenPosition(rageAccountNo, ethPoolId);\\n        int256 tokensToTrade = -netPosition.mulDiv(amountWithdrawn, amountBeforeWithdraw);\\n        uint256 tokensToTradeNotionalAbs = _getTokenNotionalAbs(netPosition, sqrtPriceX96);\\n\\n        if (tokensToTradeNotionalAbs > minNotionalPositionToCloseThreshold) {\\n            (int256 vTokenAmountOut, ) = _closeTokenPosition(\\n                tokensToTrade,\\n                sqrtPriceX96,\\n                closePositionSlippageSqrtToleranceBps\\n            );\\n\\n            if (vTokenAmountOut == tokensToTrade) updatedAmountWithdrawn = amountWithdrawn;\\n            else {\\n                int256 updatedAmountWithdrawnInt = -vTokenAmountOut.mulDiv(\\n                    amountBeforeWithdraw.toInt256(),\\n                    netPosition\\n                );\\n                // assert(updatedAmountWithdrawnInt > 0);\\n                updatedAmountWithdrawn = uint256(updatedAmountWithdrawnInt);\\n            }\\n        } else {\\n            updatedAmountWithdrawn = amountWithdrawn;\\n        }\\n    }\\n\\n    /// @inheritdoc BaseVault\\n    function _rebalanceRanges(IClearingHouse.VTokenPositionView memory vTokenPosition, int256 vaultMarketValue)\\n        internal\\n        override\\n    {\\n        isReset = checkIsReset(vaultMarketValue);\\n        IClearingHouseStructures.LiquidityChangeParams[2]\\n            memory liquidityChangeParamList = _getLiquidityChangeParamsOnRebalance(vaultMarketValue);\\n\\n        for (uint8 i = 0; i < liquidityChangeParamList.length; i++) {\\n            if (liquidityChangeParamList[i].liquidityDelta == 0) break;\\n            rageClearingHouse.updateRangeOrder(rageAccountNo, ethPoolId, liquidityChangeParamList[i]);\\n        }\\n\\n        if (isReset) _closeTokenPositionOnReset(vTokenPosition);\\n    }\\n\\n    /// @inheritdoc BaseVault\\n    function _closeTokenPositionOnReset(IClearingHouse.VTokenPositionView memory vTokenPosition) internal override {\\n        if (!isReset) revert ETRS_INVALID_CLOSE();\\n        int256 tokensToTrade = -vTokenPosition.netTraderPosition;\\n        uint160 sqrtTwapPriceX96 = _getTwapSqrtPriceX96();\\n        uint256 tokensToTradeNotionalAbs = _getTokenNotionalAbs(tokensToTrade, sqrtTwapPriceX96);\\n\\n        if (tokensToTradeNotionalAbs > minNotionalPositionToCloseThreshold) {\\n            (int256 vTokenAmountOut, ) = _closeTokenPosition(\\n                tokensToTrade,\\n                sqrtTwapPriceX96,\\n                closePositionSlippageSqrtToleranceBps\\n            );\\n\\n            //If whole position is closed then reset is done\\n            if (tokensToTrade == vTokenAmountOut) isReset = false;\\n        } else {\\n            isReset = false;\\n        }\\n\\n        emit Logic.TokenPositionClosed();\\n    }\\n\\n    /// @notice Close position on rage clearing house\\n    /// @param tokensToTrade Amount of tokens to trade\\n    /// @param sqrtPriceX96 Sqrt of price in X96\\n    /// @param slippageSqrtToleranceBps Slippage tolerance of sqrt price\\n    /// @return vTokenAmountOut amount of tokens on close\\n    /// @return vQuoteAmountOut amount of quote on close\\n    function _closeTokenPosition(\\n        int256 tokensToTrade,\\n        uint160 sqrtPriceX96,\\n        uint16 slippageSqrtToleranceBps\\n    ) internal returns (int256 vTokenAmountOut, int256 vQuoteAmountOut) {\\n        uint160 sqrtPriceLimitX96;\\n\\n        if (tokensToTrade > 0) {\\n            sqrtPriceLimitX96 = uint256(sqrtPriceX96).mulDiv(1e4 + slippageSqrtToleranceBps, 1e4).toUint160();\\n        } else {\\n            sqrtPriceLimitX96 = uint256(sqrtPriceX96).mulDiv(1e4 - slippageSqrtToleranceBps, 1e4).toUint160();\\n        }\\n        IClearingHouseStructures.SwapParams memory swapParams = IClearingHouseStructures.SwapParams({\\n            amount: tokensToTrade,\\n            sqrtPriceLimit: sqrtPriceLimitX96,\\n            isNotional: false,\\n            isPartialAllowed: true,\\n            settleProfit: false\\n        });\\n        (vTokenAmountOut, vQuoteAmountOut) = rageClearingHouse.swapToken(rageAccountNo, ethPoolId, swapParams);\\n    }\\n\\n    /// @notice Get liquidity change params on rebalance\\n    /// @param vaultMarketValue Market value of vault in USDC\\n    /// @return liquidityChangeParamList Liquidity change params\\n    function _getLiquidityChangeParamsOnRebalance(int256 vaultMarketValue)\\n        internal\\n        returns (IClearingHouseStructures.LiquidityChangeParams[2] memory liquidityChangeParamList)\\n    {\\n        // Get net token position\\n        // Remove reabalance\\n        // Add new rebalance range\\n        // Update base range liquidity\\n        uint8 liqCount = 0;\\n\\n        if (baseLiquidity > 0) {\\n            // assert(baseTickLower != 0);\\n            // assert(baseTickUpper != 0);\\n            // assert(baseLiquidity != 0);\\n            //Remove previous range\\n            liquidityChangeParamList[liqCount] = _getLiquidityChangeParams(\\n                baseTickLower,\\n                baseTickUpper,\\n                -baseLiquidity.toInt128()\\n            );\\n            liqCount++;\\n        }\\n        uint160 twapSqrtPriceX96 = _getTwapSqrtPriceX96();\\n\\n        uint128 baseLiquidityUpdate;\\n        (baseTickLower, baseTickUpper, baseLiquidityUpdate) = Logic.getUpdatedBaseRangeParams(\\n            twapSqrtPriceX96,\\n            vaultMarketValue,\\n            SQRT_PRICE_FACTOR_PIPS\\n        );\\n\\n        // If (there are no ranges) || (netPositionNotional > 20% of vault market value) then update base liquidity otherwise carry forward same liquidity value\\n        if (baseLiquidity == 0 || isReset) {\\n            baseLiquidity = baseLiquidityUpdate;\\n        }\\n\\n        //Add new range\\n        liquidityChangeParamList[liqCount] = _getLiquidityChangeParams(\\n            baseTickLower,\\n            baseTickUpper,\\n            baseLiquidity.toInt128()\\n        );\\n        liqCount++;\\n    }\\n\\n    /// @notice Get liquidity change params on deposit\\n    /// @param amountBefore Amount of asset tokens after deposit\\n    /// @param amountDelta Amount of asset tokens deposited\\n    /// @param isWithdraw True if withdraw else deposit\\n    function _getLiquidityChangeParamsAfterDepositWithdraw(\\n        uint256 amountBefore,\\n        uint256 amountDelta,\\n        bool isWithdraw\\n    ) internal view returns (IClearingHouseStructures.LiquidityChangeParams memory liquidityChangeParam) {\\n        int128 liquidityDelta = baseLiquidity.toInt256().mulDiv(amountDelta, amountBefore).toInt128();\\n        if (isWithdraw) liquidityDelta = -liquidityDelta;\\n        liquidityChangeParam = _getLiquidityChangeParams(baseTickLower, baseTickUpper, liquidityDelta);\\n    }\\n\\n    /// @notice Get liquidity change params struct\\n    /// @param tickLower Lower tick of range\\n    /// @param tickUpper Upper tick of range\\n    /// @param liquidityDelta Liquidity delta of range\\n    function _getLiquidityChangeParams(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int128 liquidityDelta\\n    ) internal pure returns (IClearingHouseStructures.LiquidityChangeParams memory liquidityChangeParam) {\\n        liquidityChangeParam = IClearingHouseStructures.LiquidityChangeParams(\\n            tickLower,\\n            tickUpper,\\n            liquidityDelta,\\n            0,\\n            0,\\n            false,\\n            IClearingHouseEnums.LimitOrderType.NONE,\\n            false\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x48d141651baf346245e47496fa1534b2ae8bad545e400473667a53177598e424\",\"license\":\"GPL-2.0-or-later\"},\"contracts/utils/ERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport { ERC20Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport { FixedPointMathLib } from '@rari-capital/solmate/src/utils/FixedPointMathLib.sol';\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Copied and modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626Upgradeable is ERC20Upgradeable {\\n    using SafeERC20 for IERC20Metadata;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               STATE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    IERC20Metadata public asset;\\n\\n    /* solhint-disable func-name-mixedcase */\\n    function __ERC4626Upgradeable_init(\\n        IERC20Metadata _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) internal {\\n        __ERC20_init(_name, _symbol);\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, 'ZERO_SHARES');\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance(owner, msg.sender); // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) _approve(owner, msg.sender, allowed - shares);\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance(owner, msg.sender); // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) _approve(owner, msg.sender, allowed - shares);\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, 'ZERO_ASSETS');\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf(owner));\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /* solhint-disable no-empty-blocks */\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n    /* solhint-disable no-empty-blocks */\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n}\\n\",\"keccak256\":\"0x516e3f4b67608262c31dc702617d0eccfb5c7de59b45ff46e5fc25d78ef95981\",\"license\":\"AGPL-3.0-only\"},\"contracts/yieldStrategy/CurveYieldStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\\n\\nimport { EightyTwentyRangeStrategyVault } from '../rangeStrategy/EightyTwentyRangeStrategyVault.sol';\\n\\nimport { ICurveGauge } from '../interfaces/curve/ICurveGauge.sol';\\nimport { ILPPriceGetter } from '../interfaces/curve/ILPPriceGetter.sol';\\nimport { ICurveStableSwap } from '../interfaces/curve/ICurveStableSwap.sol';\\n\\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\n\\nimport { AggregatorV3Interface } from '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\n\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\\n\\nimport { SwapManager } from '../libraries/SwapManager.sol';\\n\\nimport { Logic } from '../libraries/Logic.sol';\\n\\ncontract CurveYieldStrategy is EightyTwentyRangeStrategyVault {\\n    using FullMath for uint256;\\n\\n    error CYS_INVALID_FEES();\\n\\n    IERC20 private usdt;\\n    IERC20 private weth;\\n    IERC20 private usdc;\\n    IERC20 private crvToken;\\n\\n    ICurveGauge private gauge;\\n    ISwapRouter private uniV3Router;\\n    ILPPriceGetter private lpPriceHolder;\\n    ICurveStableSwap private triCryptoPool;\\n\\n    AggregatorV3Interface private crvOracle;\\n\\n    uint256 private crvSwapSlippageTolerance; // in bps, 10**4\\n    uint256 private notionalCrvHarvestThreshold;\\n\\n    /* solhint-disable var-name-mixedcase */\\n    uint256 public constant MAX_BPS = 10_000;\\n    /* solhint-disable var-name-mixedcase */\\n    uint256 public FEE = 1000;\\n\\n    function initialize(CurveYieldStrategyInitParams memory curveYieldStrategyInitParams) external initializer {\\n        __CurveYieldStrategy_init(curveYieldStrategyInitParams);\\n    }\\n\\n    struct CurveYieldStrategyInitParams {\\n        EightyTwentyRangeStrategyVaultInitParams eightyTwentyRangeStrategyVaultInitParams;\\n        IERC20 usdt;\\n        IERC20 usdc;\\n        IERC20 weth;\\n        IERC20 crvToken;\\n        ICurveGauge gauge;\\n        ISwapRouter uniV3Router;\\n        ILPPriceGetter lpPriceHolder;\\n        ICurveStableSwap tricryptoPool;\\n    }\\n\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function __CurveYieldStrategy_init(CurveYieldStrategyInitParams memory params) internal onlyInitializing {\\n        __EightyTwentyRangeStrategyVault_init(params.eightyTwentyRangeStrategyVaultInitParams);\\n        usdt = params.usdt;\\n        usdc = params.usdc;\\n        weth = params.weth;\\n        gauge = params.gauge;\\n        crvToken = params.crvToken;\\n        uniV3Router = params.uniV3Router;\\n        triCryptoPool = params.tricryptoPool;\\n        lpPriceHolder = params.lpPriceHolder;\\n    }\\n\\n    /// @notice Sets the CRV to USD oracle address\\n    /// @param _crvOracle address of oracle\\n    function setCrvOracle(AggregatorV3Interface _crvOracle) external onlyOwner {\\n        crvOracle = _crvOracle;\\n        emit Logic.CrvOracleUpdated(address(_crvOracle));\\n    }\\n\\n    /// @notice Sets the max allowed slippage tolerance for CRV->WETH->USDT swap\\n    /// @param _slippageTolerance value in bps unit for slippage tolerance\\n    function setCrvSwapSlippageTolerance(uint256 _slippageTolerance) external onlyOwner {\\n        crvSwapSlippageTolerance = _slippageTolerance;\\n        emit Logic.CrvSwapSlippageToleranceUpdated(_slippageTolerance);\\n    }\\n\\n    /// @notice Sets the minimum threshold to harvest CRV rewards\\n    /// @param _notionalCrvHarvestThreshold minimum threshold value (in CRV)\\n    function setNotionalCrvHarvestThreshold(uint256 _notionalCrvHarvestThreshold) external onlyOwner {\\n        notionalCrvHarvestThreshold = _notionalCrvHarvestThreshold;\\n        emit Logic.NotionalCrvHarvestThresholdUpdated(_notionalCrvHarvestThreshold);\\n    }\\n\\n    /// @notice grants one time max allowance to various third parties\\n    function grantAllowances() public override onlyOwner {\\n        _grantBaseAllowances();\\n\\n        asset.approve(address(gauge), type(uint256).max);\\n        asset.approve(address(triCryptoPool), type(uint256).max);\\n\\n        /// @dev USDT requires allowance set to 0 before re-approving\\n        usdc.approve(address(uniV3Router), 0);\\n        usdt.approve(address(uniV3Router), 0);\\n        usdt.approve(address(triCryptoPool), 0);\\n\\n        usdc.approve(address(uniV3Router), type(uint256).max);\\n        usdt.approve(address(uniV3Router), type(uint256).max);\\n        usdt.approve(address(triCryptoPool), type(uint256).max);\\n\\n        crvToken.approve(address(uniV3Router), type(uint256).max);\\n    }\\n\\n    /// @notice changes the fee value for CRV yield generated\\n    /// @param bps new fee value (less than MAX_BPS)\\n    function changeFee(uint256 bps) external onlyOwner {\\n        if (bps > MAX_BPS) revert CYS_INVALID_FEES();\\n        FEE = bps;\\n        emit Logic.FeesUpdated(bps);\\n    }\\n\\n    /// @notice withdraw accumulated CRV fees\\n    function withdrawFees() external onlyOwner {\\n        uint256 bal = crvToken.balanceOf(address(this));\\n        crvToken.transfer(msg.sender, bal);\\n        emit Logic.FeesWithdrawn(bal);\\n    }\\n\\n    /// @notice triggered from the afterDeposit hook, stakes the deposited tricrypto LP tokens\\n    /// @param amount amount of LP tokens\\n    function _afterDepositYield(uint256 amount) internal override {\\n        emit Logic.StateInfo(lpPriceHolder.lp_price());\\n        _stake(amount);\\n    }\\n\\n    /// @notice triggered from beforeWithdraw hook\\n    /// @param amount amount of LP tokens\\n    function _beforeWithdrawYield(uint256 amount) internal override {\\n        emit Logic.StateInfo(lpPriceHolder.lp_price());\\n        gauge.withdraw(amount);\\n        _harvestFees();\\n    }\\n\\n    /// @notice sells settlementToken for LP tokens and then stakes LP tokens\\n    /// @param amount amount of settlementToken\\n    function _convertSettlementTokenToAsset(uint256 amount) internal override {\\n        bytes memory path = abi.encodePacked(usdc, uint24(500), usdt);\\n        SwapManager.swapUsdcToUsdtAndAddLiquidity(amount, path, uniV3Router, triCryptoPool);\\n        _stake(asset.balanceOf(address(this)));\\n    }\\n\\n    /// @notice claims the accumulated CRV rewards from the gauge, sells CRV rewards for LP tokens and stakes LP tokens\\n    function _harvestFees() internal override {\\n        uint256 claimable = gauge.claimable_reward(address(this), address(crvToken));\\n\\n        if (claimable > notionalCrvHarvestThreshold) {\\n            uint256 afterDeductions = claimable - ((claimable * FEE) / MAX_BPS);\\n            gauge.claim_rewards(address(this));\\n\\n            emit Logic.Harvested(claimable);\\n\\n            bytes memory path = abi.encodePacked(\\n                address(crvToken),\\n                uint24(3000),\\n                address(weth),\\n                uint24(500),\\n                address(usdt)\\n            );\\n\\n            SwapManager.swapCrvToUsdtAndAddLiquidity(\\n                afterDeductions,\\n                crvSwapSlippageTolerance,\\n                crvOracle,\\n                path,\\n                uniV3Router,\\n                triCryptoPool\\n            );\\n\\n            _stake(asset.balanceOf(address(this)));\\n        }\\n    }\\n\\n    /// @notice stakes LP tokens (i.e deposits into reward gauge)\\n    /// @param amount amount of LP tokens\\n    function _stake(uint256 amount) internal override {\\n        gauge.deposit(amount);\\n        emit Logic.Staked(amount, msg.sender);\\n    }\\n\\n    /// @notice total LP tokens staked in the curve rewards gauge\\n    function _stakedAssetBalance() internal view override returns (uint256) {\\n        return gauge.balanceOf(address(this));\\n    }\\n\\n    /// @notice withdraws LP tokens from gauge, sells LP token for settlementToken\\n    /// @param amount amount of LP tokens\\n    function _convertAssetToSettlementToken(uint256 amount) internal override returns (uint256 usdcAmount) {\\n        return\\n            Logic.convertAssetToSettlementToken(amount, lpPriceHolder, gauge, triCryptoPool, usdt, uniV3Router, usdc);\\n    }\\n\\n    /// @notice compute notional value for given amount of LP tokens\\n    /// @param amount amount of LP tokens\\n    function getMarketValue(uint256 amount) public view override returns (uint256 marketValue) {\\n        return Logic.getMarketValue(amount, lpPriceHolder);\\n    }\\n\\n    /// @notice gives x128 price of 1 tricrypto LP token\\n    function getPriceX128() public view override returns (uint256 priceX128) {\\n        return Logic.getPriceX128(lpPriceHolder);\\n    }\\n}\\n\",\"keccak256\":\"0x74192b7454c83eb7f391915feb76a42e4fa17027138f7c2c87105a1c6e537baa\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040526103e860ac5534801561001657600080fd5b50615ea280620000276000396000f3fe608060405234801561001057600080fd5b50600436106103af5760003560e01c80637999e84e116101f4578063ba0876521161011a578063dbd5edc7116100ad578063ef8b30f71161007c578063ef8b30f714610821578063f2fde38b14610834578063fd967f4714610847578063ff9281531461085057600080fd5b8063dbd5edc7146107e9578063dd62ed3e146107f2578063e23c090814610805578063e66488531461081857600080fd5b8063c6e6f592116100e9578063c6e6f59214610790578063ce96cb77146107a3578063d905777e146107b6578063dbd035ff146107c957600080fd5b8063ba0876521461076c578063bf9571f11461077f578063c57981b514610787578063c63d75b61461052957600080fd5b806395d89b4111610192578063b3d7f6b911610161578063b3d7f6b91461071f578063b460af9414610732578063b6cdc2d514610745578063b81aecd91461075957600080fd5b806395d89b41146106de578063a457c2d7146106e6578063a9059cbb146106f9578063aced16611461070c57600080fd5b80638d315d7b116101ce5780638d315d7b1461069f5780638da5cb5b146106a75780638fcda03e146106b857806394bf804d146106cb57600080fd5b80637999e84e1461067c5780637d7c2a1c146106845780638121305e1461068c57600080fd5b80633f6be822116102d9578063554070bc116102775780636e553f65116102465780636e553f651461062557806370a0823114610638578063715018a614610661578063748747e61461066957600080fd5b8063554070bc146105c357806357b082fc146105d6578063620bc225146105ea5780636a1db1bf1461061257600080fd5b8063476343ee116102b3578063476343ee146105515780634afe813e146105595780634cdad506146105855780635053145f1461059857600080fd5b80633f6be822146104fe578063402d267d146105295780634441a2ce1461053e57600080fd5b8063171e5e8811610351578063313ce56711610320578063313ce567146104a957806338d52e0f146104b857806339509351146104e35780633d672a45146104f657600080fd5b8063171e5e881461046957806318160ddd1461047c5780631e2eaeaf1461048457806323b872dd1461049657600080fd5b8063095ea7b31161038d578063095ea7b3146103f757806309a68a921461041a5780630a28a47714610441578063142dbe691461045457600080fd5b806301e1d114146103b457806306fdde03146103cf57806307a2d13a146103e4575b600080fd5b6103bc610863565b6040519081526020015b60405180910390f35b6103d76108e8565b6040516103c69190614de6565b6103bc6103f2366004614df9565b61097a565b61040a610405366004614e32565b6109af565b60405190151581526020016103c6565b609f5461042e90600160b81b900460020b81565b60405160029190910b81526020016103c6565b6103bc61044f366004614df9565b6109c9565b610467610462366004615159565b6109f1565b005b610467610477366004614df9565b610ab9565b6035546103bc565b6103bc610492366004614df9565b5490565b61040a6104a4366004615253565b610b1f565b604051601281526020016103c6565b6065546104cb906001600160a01b031681565b6040516001600160a01b0390911681526020016103c6565b61040a6104f1366004614e32565b610b43565b6103bc610b82565b609e54610511906001600160401b031681565b6040516001600160401b0390911681526020016103c6565b6103bc610537366004615294565b5060001990565b61046761054c366004614df9565b610c08565b610467610c67565b609e5461057090600160501b900463ffffffff1681565b60405163ffffffff90911681526020016103c6565b6103bc610593366004614df9565b610da5565b60a0546105ab906001600160801b031681565b6040516001600160801b0390911681526020016103c6565b6103bc6105d1366004614df9565b610db0565b60a05461040a90600160801b900460ff1681565b609e546105ff90600160401b900461ffff1681565b60405161ffff90911681526020016103c6565b610467610620366004614df9565b610e3b565b6103bc6106333660046152b1565b610ebd565b6103bc610646366004615294565b6001600160a01b031660009081526033602052604090205490565b610467610ed1565b610467610677366004615294565b610f07565b610467610f7f565b610467611062565b61046761069a366004614df9565b611174565b6103bc6111d3565b6066546001600160a01b03166104cb565b6104676106c63660046152e1565b611264565b6103bc6106d93660046152b1565b611310565b6103d7611324565b61040a6106f4366004614e32565b611333565b61040a610707366004614e32565b6113c5565b609f546104cb906001600160a01b031681565b6103bc61072d366004614df9565b6113d3565b6103bc610740366004615316565b6113fa565b609f5461042e90600160a01b900460020b81565b61040a610767366004614df9565b611425565b6103bc61077a366004615316565b61143e565b61046761156a565b6103bc60ac5481565b6103bc61079e366004614df9565b6119f4565b6103bc6107b1366004615294565b611a1c565b6103bc6107c4366004615294565b611a3e565b6107dc6107d736600461537b565b611a5c565b6040516103c69190615405565b6103bc609d5481565b6103bc610800366004615449565b611a8a565b610467610813366004615294565b611ab5565b6103bc609b5481565b6103bc61082f366004614df9565b611b29565b610467610842366004615294565b611b34565b6103bc61271081565b61046761085e366004615477565b611bcc565b600061086d611c99565b6065546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d991906154ba565b6108e391906154e9565b905090565b6060603680546108f790615501565b80601f016020809104026020016040519081016040528092919081815260200182805461092390615501565b80156109705780601f1061094557610100808354040283529160200191610970565b820191906000526020600020905b81548152906001019060200180831161095357829003601f168201915b5050505050905090565b60008061098660355490565b905080156109a6576109a1610999610863565b849083611ce2565b6109a8565b825b9392505050565b6000336109bd818585611d01565b60019150505b92915050565b6000806109d560355490565b905080156109a6576109a1816109e9610863565b859190611e25565b600054610100900460ff16610a0c5760005460ff1615610a10565b303b155b610a785760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff16158015610a9a576000805461ffff19166101011790555b610aa382611e53565b8015610ab5576000805461ff00191690555b5050565b6066546001600160a01b03163314610ae35760405162461bcd60e51b8152600401610a6f9061553b565b609d8190556040518181527f333b26cca69716ad4680ddb07663f5bfb4f06045671f336af9a83690a3ae00f9906020015b60405180910390a150565b600033610b2d858285611f36565b610b38858585611fb0565b506001949350505050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091906109bd9082908690610b7d9087906154e9565b611d01565b60a7546040516001620e8cb360e11b031981526001600160a01b03909116600482015260009073C88bBEa708B5748DAB3b6729f3Bfb16b1b6188f19063ffe2e69a90602401602060405180830381865af4158015610be4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e391906154ba565b6066546001600160a01b03163314610c325760405162461bcd60e51b8152600401610a6f9061553b565b60ab8190556040518181527fbaf704dc582d2430f506b48fda242593270667e77656cf3ba2f77a630594466390602001610b14565b6066546001600160a01b03163314610c915760405162461bcd60e51b8152600401610a6f9061553b565b60a4546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfe91906154ba565b60a45460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb90610d319033908590600401615570565b6020604051808303816000875af1158015610d50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d749190615589565b506040518181527f9800e6f57aeb4360eaa72295a820a4293e1e66fbfcabcd8874ae141304a76deb90602001610b14565b60006109c38261097a565b60a754604051637a5fda7960e01b8152600481018390526001600160a01b03909116602482015260009073C88bBEa708B5748DAB3b6729f3Bfb16b1b6188f190637a5fda79906044015b602060405180830381865af4158015610e17573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c391906154ba565b6066546001600160a01b03163314610e655760405162461bcd60e51b8152600401610a6f9061553b565b612710811115610e8857604051630709dc8560e31b815260040160405180910390fd5b60ac8190556040518181527f9fe6eeb0f0541c644a56c67efeb872dbadd803a60b909d7dde1b35a3fe230b0e90602001610b14565b6000610ec761217e565b6109a88383612186565b6066546001600160a01b03163314610efb5760405162461bcd60e51b8152600401610a6f9061553b565b610f056000612243565b565b6066546001600160a01b03163314610f315760405162461bcd60e51b8152600401610a6f9061553b565b609f80546001600160a01b0319166001600160a01b0383169081179091556040519081527f0425bcd291db1d48816f2a98edc7ecaf6dd5c64b973d9e4b3b6b750763dc6c2e90602001610b14565b609f546001600160a01b03163314610fbf57609f546040516369958c7360e01b81523360048201526001600160a01b039091166024820152604401610a6f565b609954609b54604051630ed586bf60e21b815260048101919091526060916001600160a01b031690633b561afc90602401600060405180830381865afa15801561100d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261103591908101906157b4565b805190945061105f935084925060009150611052576110526158ba565b6020026020010151612295565b50565b609f546001600160a01b031633146110a257609f546040516369958c7360e01b81523360048201526001600160a01b039091166024820152604401610a6f565b60006110ac6111d3565b90506110b781611425565b6110d457604051636fa1adc360e01b815260040160405180910390fd5b6060806110df61237e565b80519193509150600003611106576040516301d84bb360e11b815260040160405180910390fd5b61112a8160008151811061111c5761111c6158ba565b60200260200101518461249d565b609e805467ffffffffffffffff1916426001600160401b03161790556040517ff57243a1fddfdc9fa2c7de26cc3503b1b94cfd4368d2b82d0970bfbb2fbce3a490600090a1505050565b6066546001600160a01b0316331461119e5760405162461bcd60e51b8152600401610a6f9061553b565b60aa8190556040518181527f77bc5ea45f61ae2f050ec3af00a3ebcbeff6082d4c04905ebb7e01ff797dacf390602001610b14565b609954609b54604051631c7a838360e31b815260048101919091526000916001600160a01b03169063e3d41c1890602401602060405180830381865afa158015611221573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124591906154ba565b905061125a6112556105d1610863565b6125d6565b6108e390826158d0565b6066546001600160a01b0316331461128e5760405162461bcd60e51b8152600401610a6f9061553b565b609e805465ffffffffffff60401b1916600160501b63ffffffff851690810269ffff0000000000000000191691909117600160401b61ffff8516908102919091179092556040805191825260208201929092527f9af00b5d3a5006b7a36e8fe4a8f67a155aa897efbee30711b474e18eed221555910160405180910390a15050565b600061131a61217e565b6109a883836125ff565b6060603780546108f790615501565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909190838110156113b85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610a6f565b610b388286868403611d01565b6000336109bd818585611fb0565b6000806113df60355490565b905080156109a6576109a16113f2610863565b849083611e25565b600061140461217e565b600061140f8561267f565b905061141c818585612692565b95945050505050565b600061142f61274d565b806109c357506109c38261277a565b600061144861217e565b336001600160a01b038316146114805760006114648333611a8a565b9050600019811461147e5761147e8333610b7d8885615911565b505b61148984610da5565b9050806000036114c95760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f41535345545360a81b6044820152606401610a6f565b60006114d48261267f565b90508181146114ec578091506114e9816109c9565b94505b6114f68286612888565b61150083866128a2565b60408051838152602081018790526001600160a01b03808616929087169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4606554611562906001600160a01b031685846129f0565b509392505050565b6066546001600160a01b031633146115945760405162461bcd60e51b8152600401610a6f9061553b565b61159c612a46565b60655460a55460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926115d49291169060001990600401615570565b6020604051808303816000875af11580156115f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116179190615589565b5060655460a85460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926116509291169060001990600401615570565b6020604051808303816000875af115801561166f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116939190615589565b5060a35460a65460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926116cb92911690600090600401615570565b6020604051808303816000875af11580156116ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170e9190615589565b5060a15460a65460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261174692911690600090600401615570565b6020604051808303816000875af1158015611765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117899190615589565b5060a15460a85460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926117c192911690600090600401615570565b6020604051808303816000875af11580156117e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118049190615589565b5060a35460a65460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261183d9291169060001990600401615570565b6020604051808303816000875af115801561185c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118809190615589565b5060a15460a65460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926118b99291169060001990600401615570565b6020604051808303816000875af11580156118d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fc9190615589565b5060a15460a85460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926119359291169060001990600401615570565b6020604051808303816000875af1158015611954573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119789190615589565b5060a45460a65460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926119b19291169060001990600401615570565b6020604051808303816000875af11580156119d0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105f9190615589565b600080611a0060355490565b905080156109a6576109a181611a14610863565b859190611ce2565b6001600160a01b0381166000908152603360205260408120546109c39061097a565b6001600160a01b0381166000908152603360205260408120546109c3565b606060208251028201602001602083015b81811015611a82578051548152602001611a6d565b509192915050565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6066546001600160a01b03163314611adf5760405162461bcd60e51b8152600401610a6f9061553b565b60a980546001600160a01b0319166001600160a01b0383169081179091556040517f37e6fa50467241d1adf59e9c0011228de6a03425a9efdea6d2d3662c77eaba5390600090a250565b60006109c3826119f4565b6066546001600160a01b03163314611b5e5760405162461bcd60e51b8152600401610a6f9061553b565b6001600160a01b038116611bc35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a6f565b61105f81612243565b6066546001600160a01b03163314611bf65760405162461bcd60e51b8152600401610a6f9061553b565b60a0805463ffffffff60881b1916600160881b61ffff86811691820261ffff60981b191692909217600160981b9286169283021767ffffffffffffffff60a81b1916600160a81b6001600160401b03861690810291909117909355604080519182526020820192909252908101919091527f4a9bdb3bab9a7cff0ea02e1428a3901c565a962f3b99b7d8d2b02787ca4f93f99060600160405180910390a1505050565b60a5546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610be4573d6000803e3d6000fd5b828202811515841585830485141716611cfa57600080fd5b0492915050565b6001600160a01b038316611d635760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a6f565b6001600160a01b038216611dc45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a6f565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b828202811515841585830485141716611e3d57600080fd5b6001826001830304018115150290509392505050565b600054610100900460ff16611e7a5760405162461bcd60e51b8152600401610a6f90615928565b8051611e8590612afa565b602081015160a180546001600160a01b03199081166001600160a01b0393841617909155604083015160a380548316918416919091179055606083015160a28054831691841691909117905560a083015160a580548316918416919091179055608083015160a48054831691841691909117905560c083015160a68054831691841691909117905561010083015160a88054831691841691909117905560e09092015160a780549093169116179055565b6000611f428484611a8a565b90506000198114611faa5781811015611f9d5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610a6f565b611faa8484848403611d01565b50505050565b6001600160a01b0383166120145760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610a6f565b6001600160a01b0382166120765760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610a6f565b6001600160a01b038316600090815260336020526040902054818110156120ee5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610a6f565b6001600160a01b038085166000908152603360205260408082208585039055918516815290812080548492906121259084906154e9565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161217191815260200190565b60405180910390a3611faa565b610ab561237e565b600061219183611b29565b9050806000036121d15760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f53484152455360a81b6044820152606401610a6f565b6065546121e9906001600160a01b0316333086612bd8565b6121f38282612c10565b60408051848152602081018390526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a36109c38382612cef565b606680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60a054600160801b900460ff166122bf57604051632f0c3e3160e11b815260040160405180910390fd5b600081604001516122cf90615973565b905060006122db612d47565b905060006122e98383612e08565b60a054909150600160a81b90046001600160401b0316811115612341576000612323848460a060119054906101000a900461ffff16612e36565b50905080840361233b5760a0805460ff60801b191690555b5061234f565b60a0805460ff60801b191690555b6040517f9a94a63b02012d6753ed863b962aceb756429b4265fc327391dd05fb24d4502b90600090a150505050565b609954609b54604051630ed586bf60e21b815260609283926001600160a01b0390911691633b561afc916123b89160040190815260200190565b600060405180830381865afa1580156123d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123fd91908101906157b4565b90945092506000915061241090506111d3565b905061241a612f75565b61242483826131ed565b6065546040516370a0823160e01b8152306004820152612498916001600160a01b0316906370a08231906024015b602060405180830381865afa15801561246f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249391906154ba565b6134ee565b509091565b6124a681613584565b60a08054911515600160801b0260ff60801b1990921691909117905560006124cd8261364d565b905060005b60028160ff1610156125b557818160ff16600281106124f3576124f36158ba565b602002015160400151600f0b156125b557609954609b54609c546001600160a01b039092169163c7505c15919063ffffffff168560ff86166002811061253b5761253b6158ba565b60200201516040518463ffffffff1660e01b815260040161255e939291906159c7565b60408051808303816000875af115801561257c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a09190615a65565b505080806125ad90615a89565b9150506124d2565b5060a054600160801b900460ff16156125d1576125d183612295565b505050565b6000600160ff1b82106125fb5760405162461bcd60e51b8152600401610a6f90615aa8565b5090565b600061260a836113d3565b606554909150612625906001600160a01b0316333084612bd8565b61262f8284612c10565b60408051828152602081018590526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a36109c38184612cef565b60006109c361268c610863565b83613852565b600061269d846109c9565b9050336001600160a01b038316146126d75760006126bb8333611a8a565b905060001981146126d5576126d58333610b7d8585615911565b505b6126e18482612888565b6126eb82826128a2565b60408051858152602081018390526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a46065546109a8906001600160a01b031684866129f0565b609e5460009063ffffffff600160501b82041690612774906001600160401b031642615911565b11905090565b609c5460995460009173C88bBEa708B5748DAB3b6729f3Bfb16b1b6188f19163757d5fd6916001600160a01b0364010000000082048116926127c89291169063ffffffff9081169061398b16565b609e54609f5460405160e086901b6001600160e01b03191681526001600160a01b03909416600485015263ffffffff9092166024840152600160401b900461ffff166044830152600160a01b8104600290810b6064840152600160b81b909104900b608482015260a401602060405180830381865af415801561284f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128739190615589565b905080612883576109c382613584565b919050565b612899612893610863565b83613a1b565b610ab582613b2f565b6001600160a01b0382166129025760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610a6f565b6001600160a01b038216600090815260336020526040902054818110156129765760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610a6f565b6001600160a01b03831660009081526033602052604081208383039055603580548492906129a5908490615911565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6125d18363a9059cbb60e01b8484604051602401612a0f929190615570565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613c33565b609a5460995460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392612a7e9291169060001990600401615570565b6020604051808303816000875af1158015612a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac19190615589565b5060985460995460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926119b19291169060001990600401615570565b600054610100900460ff16612b215760405162461bcd60e51b8152600401610a6f90615928565b8051612b2c90613d05565b60208181015160a0805460408086015160608088015163ffffffff60881b19909416600160881b61ffff97881690810261ffff60981b191691909117600160981b979093169687029290921767ffffffffffffffff60a81b1916600160a81b6001600160401b0390951694850217909455815190815294850193909352918301919091527f4a9bdb3bab9a7cff0ea02e1428a3901c565a962f3b99b7d8d2b02787ca4f93f99101610b14565b6040516001600160a01b0380851660248301528316604482015260648101829052611faa9085906323b872dd60e01b90608401612a0f565b6001600160a01b038216612c665760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a6f565b8060356000828254612c7891906154e9565b90915550506001600160a01b03821660009081526033602052604081208054839290612ca59084906154e9565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b609d54612cfa610863565b1115612d2d57609d54612d0b610863565b6040516301b25d0360e41b815260048101929092526024820152604401610a6f565b612d3682613ed0565b610ab5612d41610863565b83613f77565b609c5460995460009173C88bBEa708B5748DAB3b6729f3Bfb16b1b6188f19163e54c8fd8916001600160a01b036401000000008204811692612d959291169063ffffffff9081169061398b16565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015263ffffffff166024820152604401602060405180830381865af4158015612de4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e39190615aca565b60006109a8612e316001600160a01b038416600160601b612e2a8783836141b8565b91906141b8565b6141fa565b600080600080861315612e7857612e71612e6c612e5586612710615ae7565b6001600160a01b0388169061ffff16612710614205565b6142b7565b9050612e8d565b612e8a612e6c612e5586612710615b0d565b90505b6040805160a0810182528781526001600160a01b0383811660208301908152600083850181815260016060860190815260808601928352609954609b54609c5498516383d778eb60e01b8152600481019190915263ffffffff90981660248901528651604489015293518516606488015290511515608487015251151560a486015251151560c485015291929116906383d778eb9060e40160408051808303816000875af1158015612f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f679190615a65565b909890975095505050505050565b60a55460a454604051630cff5bdd60e21b81523060048201526001600160a01b03918216602482015260009291909116906333fd6f7490604401602060405180830381865afa158015612fcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff091906154ba565b905060ab5481111561105f57600061271060ac548361300f9190615b30565b6130199190615b4f565b6130239083615911565b60a554604051634274debf60e11b81523060048201529192506001600160a01b0316906384e9bd7e90602401600060405180830381600087803b15801561306957600080fd5b505af115801561307d573d6000803e3d6000fd5b505050507f8e55ccfc9778ff8eba1646d765cf1982537ce0f9257054a17b48aad745250183826040516130b291815260200190565b60405180910390a160a45460a25460a1546040516bffffffffffffffffffffffff19606094851b8116602083015261017760eb1b603483015292841b83166037820152607d60ea1b604b820152921b16604e82015260009060620160408051808303601f190181529082905260aa5460a95460a65460a854631a6dbd7760e21b865293955073a6fD01D0F8b366beDa3C35a6E8bDE296Da11a199946369b6f5dc9461317994899490936001600160a01b03918216938a939183169290911690600401615b71565b602060405180830381865af4158015613196573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ba91906154ba565b506065546040516370a0823160e01b81523060048201526125d1916001600160a01b0316906370a0823190602401612452565b609954609b54604051631c7a838360e31b815260048101919091526000916001600160a01b03169063e3d41c1890602401602060405180830381865afa15801561323b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325f91906154ba565b905060008113156132f257609954609b546001600160a01b0390911690639cd1be589061328e84600019615bba565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b1580156132cc57600080fd5b505af11580156132e0573d6000803e3d6000fd5b505050506132ed816142e0565b613393565b600081121561339357600061331161330c83600019615bba565b6143df565b9050801561339157609954609b546001600160a01b0390911690639cd1be589061333a846125d6565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b15801561337857600080fd5b505af115801561338c573d6000803e3d6000fd5b505050505b505b8251600090156134e2576000846000815181106133b2576133b26158ba565b602002602001015190506134d0609860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134369190615c3f565b61344190600a615d46565b609a60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b89190615c3f565b6134c390600a615d46565b612e2a84602001516125d6565b6134da9085615d55565b9150506134e5565b50815b611faa81614464565b60a55460405163b6b55f2560e01b8152600481018390526001600160a01b039091169063b6b55f2590602401600060405180830381600087803b15801561353457600080fd5b505af1158015613548573d6000803e3d6000fd5b50506040518381523392507f6e47dcdd359b6cd69456f0f97d394bd4540a2e7c4adc1b9da076859df53756c7915060200160405180910390a250565b609954609b54609c54604051633524324160e11b8152600481019290925263ffffffff16602482015260009182916001600160a01b0390911690636a48648290604401602060405180830381865afa1580156135e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360891906154ba565b9050600061361d82613618612d47565b612e08565b60a05490915061364590600160981b900461ffff1661271061363e876141fa565b9190614205565b109392505050565b613655614c8c565b60a0546000906001600160801b0316156136d357609f5460a0546136ab91600160a01b8104600290810b92600160b81b909204900b9061369d906001600160801b0316614759565b6136a690615d94565b614787565b828260ff16600281106136c0576136c06158ba565b6020020152806136cf81615a89565b9150505b60006136dd612d47565b604051630ad6ed5b60e41b81526001600160a01b038216600482015260248101869052620c3500604482015290915060009073C88bBEa708B5748DAB3b6729f3Bfb16b1b6188f19063ad6ed5b090606401606060405180830381865af415801561374b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061376f9190615dc3565b609f805465ffffffffffff60a01b1916600160b81b62ffffff9485160262ffffff60a01b191617600160a01b94909316939093029190911790915560a0549091506001600160801b031615806137ce575060a054600160801b900460ff165b156137ef5760a080546001600160801b0319166001600160801b0383161790555b609f5460a05461382391600160a01b8104600290810b92600160b81b909204900b906136a6906001600160801b0316614759565b848460ff1660028110613838576138386158ba565b60200201528261384781615a89565b935050505050919050565b60008061385d612d47565b609954609b54609c54604051633524324160e11b8152600481019290925263ffffffff1660248201529192506000916001600160a01b0390911690636a48648290604401602060405180830381865afa1580156138be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138e291906154ba565b905060006138f18286886141b8565b6138fa90615973565b905060006139088385612e08565b60a054909150600160a81b90046001600160401b031681111561397d576000613942838660a060119054906101000a900461ffff16612e36565b50905082810361395457869550613977565b600061396a6139628a6125d6565b8390876147ff565b61397390615973565b9650505b50613981565b8594505b5050505092915050565b600080836001600160a01b0316631e2eaeaf6139a68561485c565b6040518263ffffffff1660e01b81526004016139c491815260200190565b602060405180830381865afa1580156139e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a0591906154ba565b905063ffffffff60b082901c165b949350505050565b6000613a2983836001614884565b90508060400151613a3990615d94565b60a08054600090613a549084906001600160801b0316615dfd565b82546101009290920a6001600160801b0381810219909316918316021790915560a054166000039050613a8957600160a08201525b609954609b54609c5460405163c7505c1560e01b81526001600160a01b039093169263c7505c1592613aca92909163ffffffff9091169086906004016159c7565b60408051808303816000875af1158015613ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b0c9190615a65565b50506000613b1c61125584610db0565b9050611faa613b2a82615973565b614464565b60a754604080516354f0f7d560e01b815290517fc852a00896bd42656c7822f2f6c850502574cfdbb70db38df4ea5eb56f5af8fd926001600160a01b0316916354f0f7d59160048083019260209291908290030181865afa158015613b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bbc91906154ba565b60405190815260200160405180910390a160a554604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b158015613c1357600080fd5b505af1158015613c27573d6000803e3d6000fd5b5050505061105f612f75565b6000613c88826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166148ec9092919063ffffffff16565b8051909150156125d15780806020019051810190613ca69190615589565b6125d15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a6f565b600054610100900460ff16613d2c5760405162461bcd60e51b8152600401610a6f90615928565b613d346148fb565b8051613d3f9061492a565b602081810151609c805463ffffffff191663ffffffff909216919091179055604080830151609980546001600160a01b0319166001600160a01b0390921691821790558151639dca362f60e01b815291519092639dca362f926004808201939182900301816000875af1158015613dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dde91906154ba565b609b556060810151609a80546001600160a01b03199081166001600160a01b0393841617909155608083015160988054909216908316179055609c54609954613e3292169063ffffffff9081169061494116565b609c80546001600160a01b039290921664010000000002640100000000600160c01b0319909216919091179055609e80546c01518001f4000000000000000065ffffffffffff60401b19909116179081905560408051600160501b830463ffffffff168152600160401b90920461ffff1660208301527f9af00b5d3a5006b7a36e8fe4a8f67a155aa897efbee30711b474e18eed2215559101610b14565b60a754604080516354f0f7d560e01b815290517fc852a00896bd42656c7822f2f6c850502574cfdbb70db38df4ea5eb56f5af8fd926001600160a01b0316916354f0f7d59160048083019260209291908290030181865afa158015613f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f5d91906154ba565b60405190815260200160405180910390a161105f816134ee565b6000613f8561125583610db0565b9050613f9081614464565b613f98614cb9565b60a0546001600160801b0316158015613fb057508284145b156140ce576000613fbf612d47565b604051630ad6ed5b60e41b81526001600160a01b038216600482015260248101859052620c3500604482015290915073C88bBEa708B5748DAB3b6729f3Bfb16b1b6188f19063ad6ed5b090606401606060405180830381865af415801561402a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061404e9190615dc3565b60a080546001600160801b0319166001600160801b03929092169182179055609f805465ffffffffffff60a01b1916600160b81b62ffffff948516810262ffffff60a01b191691909117600160a01b95909416850293909317908190556140c6938104600290810b93909104900b906136a690614759565b91505061412d565b6140e36140db8486615911565b846000614884565b604081015160a0805492935090916000906141089084906001600160801b0316615e1d565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b609954609b54609c5460405163c7505c1560e01b81526001600160a01b039093169263c7505c159261416e92909163ffffffff9091169086906004016159c7565b60408051808303816000875af115801561418c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141b09190615a65565b505050505050565b60006141e66141e1600086126141ce57856141da565b6141da86600019615bba565b8585614205565b6149bb565b905060008412156109a857613a1381615973565b60006109c3826149cd565b600080806000198587098587029250828110838203039150508060000361423e576000841161423357600080fd5b5082900490506109a8565b80841161424a57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b806001600160a01b03811681146128835760405162461bcd60e51b8152600401610a6f90615aa8565b60a35460a1546040516bffffffffffffffffffffffff19606093841b81166020830152607d60ea1b60348301529190921b166037820152600090604b0160408051601f198184030181529082905260a65460a854638b8f9f0f60e01b845291935073a6fD01D0F8b366beDa3C35a6E8bDE296Da11a19992638b8f9f0f9261437b92879287926001600160a01b03928316921690600401615e3f565b60006040518083038186803b15801561439357600080fd5b505af41580156143a7573d6000803e3d6000fd5b50506065546040516370a0823160e01b8152306004820152610ab593506001600160a01b0390911691506370a0823190602401612452565b60a75460a55460a85460a15460a65460a3546040516303d0ed4560e31b8152600481018890526001600160a01b039687166024820152948616604486015292851660648501529084166084840152831660a48301529190911660c482015260009073C88bBEa708B5748DAB3b6729f3Bfb16b1b6188f190631e876a289060e401610dfa565b6000614575609a60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144e09190615c3f565b6144eb90600a615d46565b609860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561453e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145629190615c3f565b61456d90600a615d46565b8491906141b8565b90506000614582826141fa565b9050600082131561467b57609a546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906145bf9030908590600401615570565b600060405180830381600087803b1580156145d957600080fd5b505af11580156145ed573d6000803e3d6000fd5b5050609954609b54609a546001600160a01b039092169350637d2efe0792509063ffffffff166040516001600160e01b031960e085901b168152600481019290925263ffffffff16602482015260448101849052606401600060405180830381600087803b15801561465e57600080fd5b505af1158015614672573d6000803e3d6000fd5b50505050505050565b60008212156125d157609954609b54609a546001600160a01b0390921691637d2efe07919063ffffffff166146af85615973565b6040516001600160e01b031960e086901b168152600481019390935263ffffffff9190911660248301526044820152606401600060405180830381600087803b1580156146fb57600080fd5b505af115801561470f573d6000803e3d6000fd5b5050609a54604051630852cd8d60e31b8152600481018590526001600160a01b0390911692506342966c689150602401600060405180830381600087803b15801561465e57600080fd5b60006001607f1b826001600160801b0316106125fb5760405162461bcd60e51b8152600401610a6f90615aa8565b61478f614cb9565b6040518061010001604052808560020b81526020018460020b815260200183600f0b815260200160006001600160a01b03168152602001600061ffff168152602001600015158152602001600060028111156147ed576147ed61598f565b81526000602090910152949350505050565b6000600181808061481088856149e4565b9450925061481e87856149e4565b9450915061482c86856149e4565b9450905061483e6141e1848484614205565b9450836148515761484e85615973565b94505b505050509392505050565b60006109c36003614880606463ffffffff86165b9060009182526020526040902090565b0190565b61488c614cb9565b60a0546000906148b5906148b09086908890612e2a906001600160801b03166125d6565b614a0e565b905082156148c9576148c681615d94565b90505b609f5461141c90600160a01b8104600290810b91600160b81b9004900b83614787565b6060613a138484600085614a32565b600054610100900460ff166149225760405162461bcd60e51b8152600401610a6f90615928565b610f05614b63565b61105f816000015182602001518360400151614b93565b600080836001600160a01b0316631e2eaeaf61495c85614bc1565b6040518263ffffffff1660e01b815260040161497a91815260200190565b602060405180830381865afa158015614997573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1391906154ba565b6000600160ff1b82106125fb57600080fd5b60008082136125fb576149df82615973565b6109c3565b6000806000841215614a03579115916149fc84615973565b9150614a07565b8391505b5092909150565b80600f81900b81146128835760405162461bcd60e51b8152600401610a6f90615aa8565b606082471015614a935760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a6f565b6001600160a01b0385163b614aea5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a6f565b600080866001600160a01b03168587604051614b069190615e79565b60006040518083038185875af1925050503d8060008114614b43576040519150601f19603f3d011682016040523d82523d6000602084013e614b48565b606091505b5091509150614b58828286614bd9565b979650505050505050565b600054610100900460ff16614b8a5760405162461bcd60e51b8152600401610a6f90615928565b610f0533612243565b614b9d8282614c12565b5050606580546001600160a01b0319166001600160a01b0392909216919091179055565b60006109c36001614880606463ffffffff8616614870565b60608315614be85750816109a8565b825115614bf85782518084602001fd5b8160405162461bcd60e51b8152600401610a6f9190614de6565b600054610100900460ff16614c395760405162461bcd60e51b8152600401610a6f90615928565b610ab58282600054610100900460ff16614c655760405162461bcd60e51b8152600401610a6f90615928565b8151614c78906036906020850190614cfe565b5080516125d1906037906020840190614cfe565b60405180604001604052806002905b614ca3614cb9565b815260200190600190039081614c9b5790505090565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a081018290529060c08201908152600060209091015290565b828054614d0a90615501565b90600052602060002090601f016020900481019282614d2c5760008555614d72565b82601f10614d4557805160ff1916838001178555614d72565b82800160010185558215614d72579182015b82811115614d72578251825591602001919060010190614d57565b506125fb9291505b808211156125fb5760008155600101614d7a565b60005b83811015614da9578181015183820152602001614d91565b83811115611faa5750506000910152565b60008151808452614dd2816020860160208601614d8e565b601f01601f19169290920160200192915050565b6020815260006109a86020830184614dba565b600060208284031215614e0b57600080fd5b5035919050565b6001600160a01b038116811461105f57600080fd5b803561288381614e12565b60008060408385031215614e4557600080fd5b8235614e5081614e12565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715614e9657614e96614e5e565b60405290565b60405160a081016001600160401b0381118282101715614e9657614e96614e5e565b604051606081016001600160401b0381118282101715614e9657614e96614e5e565b60405161012081016001600160401b0381118282101715614e9657614e96614e5e565b604080519081016001600160401b0381118282101715614e9657614e96614e5e565b604051601f8201601f191681016001600160401b0381118282101715614f4d57614f4d614e5e565b604052919050565b600082601f830112614f6657600080fd5b81356001600160401b03811115614f7f57614f7f614e5e565b614f92601f8201601f1916602001614f25565b818152846020838601011115614fa757600080fd5b816020850160208301376000918101602001919091529392505050565b63ffffffff8116811461105f57600080fd5b803561288381614fc4565b803561ffff8116811461288357600080fd5b80356001600160401b038116811461288357600080fd5b60006080828403121561501c57600080fd5b615024614e74565b905081356001600160401b038082111561503d57600080fd5b9083019060a0828603121561505157600080fd5b615059614e9c565b82358281111561506857600080fd5b83016060818803121561507a57600080fd5b615082614ebe565b813561508d81614e12565b8152602082810135858111156150a257600080fd5b6150ae8a828601614f55565b8284015250604080840135868111156150c657600080fd5b6150d28b828701614f55565b82850152508285526150e5828801614fd6565b828601526150f4818801614e27565b8186015261510460608801614e27565b606086015261511560808801614e27565b6080860152848852615128828a01614fe1565b82890152615137818a01614fe1565b818901525050505050505061514e60608301614ff3565b606082015292915050565b60006020828403121561516b57600080fd5b81356001600160401b038082111561518257600080fd5b90830190610120828603121561519757600080fd5b61519f614ee0565b8235828111156151ae57600080fd5b6151ba8782860161500a565b8252506151c960208401614e27565b60208201526151da60408401614e27565b60408201526151eb60608401614e27565b60608201526151fc60808401614e27565b608082015261520d60a08401614e27565b60a082015261521e60c08401614e27565b60c082015261522f60e08401614e27565b60e08201526101009150615244828401614e27565b91810191909152949350505050565b60008060006060848603121561526857600080fd5b833561527381614e12565b9250602084013561528381614e12565b929592945050506040919091013590565b6000602082840312156152a657600080fd5b81356109a881614e12565b600080604083850312156152c457600080fd5b8235915060208301356152d681614e12565b809150509250929050565b600080604083850312156152f457600080fd5b82356152ff81614fc4565b915061530d60208401614fe1565b90509250929050565b60008060006060848603121561532b57600080fd5b83359250602084013561533d81614e12565b9150604084013561534d81614e12565b809150509250925092565b60006001600160401b0382111561537157615371614e5e565b5060051b60200190565b6000602080838503121561538e57600080fd5b82356001600160401b038111156153a457600080fd5b8301601f810185136153b557600080fd5b80356153c86153c382615358565b614f25565b81815260059190911b820183019083810190878311156153e757600080fd5b928401925b82841015614b58578335825292840192908401906153ec565b6020808252825182820181905260009190848201906040850190845b8181101561543d57835183529284019291840191600101615421565b50909695505050505050565b6000806040838503121561545c57600080fd5b823561546781614e12565b915060208301356152d681614e12565b60008060006060848603121561548c57600080fd5b61549584614fe1565b92506154a360208501614fe1565b91506154b160408501614ff3565b90509250925092565b6000602082840312156154cc57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156154fc576154fc6154d3565b500190565b600181811c9082168061551557607f821691505b60208210810361553557634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b03929092168252602082015260400190565b60006020828403121561559b57600080fd5b815180151581146109a857600080fd5b8051600281900b811461288357600080fd5b80516001600160801b038116811461288357600080fd5b80516003811061288357600080fd5b600082601f8301126155f457600080fd5b815160206156046153c383615358565b82815260059290921b8401810191818101908684111561562357600080fd5b8286015b848110156157a95780516001600160401b038082111561564657600080fd5b9088019060a0828b03601f1901121561565e57600080fd5b615666614e9c565b8683015161567381614fc4565b80825250604083015187820152606083015160408201526080830151606082015260a0830151828111156156a657600080fd5b8084019350508a603f8401126156bb57600080fd5b8683015191506156cd6153c383615358565b82815261012092830284016040019288820191908d8511156156ee57600080fd5b6040860195505b848610156157935780868f03121561570c57600080fd5b615714614ee0565b61571d876155ab565b815261572a8b88016155ab565b8b82015261573a604088016155bd565b6040820152606087015160608201526080870151608082015260a087015160a082015260c087015160c082015260e087015160e082015261577e61010088016155d4565b610100820152835294850194918901916156f5565b5060808301525085525050918301918301615627565b509695505050505050565b600080600080608085870312156157ca57600080fd5b84516157d581614e12565b8094505060208086015193506040808701516001600160401b03808211156157fc57600080fd5b818901915089601f83011261581057600080fd5b815161581e6153c382615358565b81815260069190911b8301850190858101908c83111561583d57600080fd5b938601935b828510156158865785858e03121561585a5760008081fd5b615862614f03565b855161586d81614e12565b8152858801518882015282529385019390860190615842565b60608c0151909850955050508084111561589f57600080fd5b5050506158ae878288016155e3565b91505092959194509250565b634e487b7160e01b600052603260045260246000fd5b600080821280156001600160ff1b03849003851316156158f2576158f26154d3565b600160ff1b839003841281161561590b5761590b6154d3565b50500190565b600082821015615923576159236154d3565b500390565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000600160ff1b8201615988576159886154d3565b5060000390565b634e487b7160e01b600052602160045260246000fd5b600381106159c357634e487b7160e01b600052602160045260246000fd5b9052565b60006101408201905084825263ffffffff84166020830152825160020b6040830152602083015160020b60608301526040830151600f0b60808301526060830151615a1d60a08401826001600160a01b03169052565b50608083015161ffff1660c08381019190915260a0840151151560e0840152830151615a4d6101008401826159a5565b5060e083015180151561012084015250949350505050565b60008060408385031215615a7857600080fd5b505080516020909101519092909150565b600060ff821660ff8103615a9f57615a9f6154d3565b60010192915050565b6020808252600890820152674f766572666c6f7760c01b604082015260600190565b600060208284031215615adc57600080fd5b81516109a881614e12565b600061ffff808316818516808303821115615b0457615b046154d3565b01949350505050565b600061ffff83811690831681811015615b2857615b286154d3565b039392505050565b6000816000190483118215151615615b4a57615b4a6154d3565b500290565b600082615b6c57634e487b7160e01b600052601260045260246000fd5b500490565b868152856020820152600060018060a01b03808716604084015260c06060840152615b9f60c0840187614dba565b94811660808401529290921660a09091015250949350505050565b60006001600160ff1b0381841382841380821686840486111615615be057615be06154d3565b600160ff1b6000871282811687830589121615615bff57615bff6154d3565b60008712925087820587128484161615615c1b57615c1b6154d3565b87850587128184161615615c3157615c316154d3565b505050929093029392505050565b600060208284031215615c5157600080fd5b815160ff811681146109a857600080fd5b600181815b80851115615c9d578160001904821115615c8357615c836154d3565b80851615615c9057918102915b93841c9390800290615c67565b509250929050565b600082615cb4575060016109c3565b81615cc1575060006109c3565b8160018114615cd75760028114615ce157615cfd565b60019150506109c3565b60ff841115615cf257615cf26154d3565b50506001821b6109c3565b5060208310610133831016604e8410600b8410161715615d20575081810a6109c3565b615d2a8383615c62565b8060001904821115615d3e57615d3e6154d3565b029392505050565b60006109a860ff841683615ca5565b60008083128015600160ff1b850184121615615d7357615d736154d3565b6001600160ff1b0384018313811615615d8e57615d8e6154d3565b50500390565b600081600f0b6f7fffffffffffffffffffffffffffffff198103615dba57615dba6154d3565b60000392915050565b600080600060608486031215615dd857600080fd5b615de1846155ab565b9250615def602085016155ab565b91506154b1604085016155bd565b60006001600160801b0383811690831681811015615b2857615b286154d3565b60006001600160801b03808316818516808303821115615b0457615b046154d3565b848152608060208201526000615e586080830186614dba565b6001600160a01b039485166040840152929093166060909101529392505050565b60008251615e8b818460208701614d8e565b919091019291505056fea164736f6c634300080d000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103af5760003560e01c80637999e84e116101f4578063ba0876521161011a578063dbd5edc7116100ad578063ef8b30f71161007c578063ef8b30f714610821578063f2fde38b14610834578063fd967f4714610847578063ff9281531461085057600080fd5b8063dbd5edc7146107e9578063dd62ed3e146107f2578063e23c090814610805578063e66488531461081857600080fd5b8063c6e6f592116100e9578063c6e6f59214610790578063ce96cb77146107a3578063d905777e146107b6578063dbd035ff146107c957600080fd5b8063ba0876521461076c578063bf9571f11461077f578063c57981b514610787578063c63d75b61461052957600080fd5b806395d89b4111610192578063b3d7f6b911610161578063b3d7f6b91461071f578063b460af9414610732578063b6cdc2d514610745578063b81aecd91461075957600080fd5b806395d89b41146106de578063a457c2d7146106e6578063a9059cbb146106f9578063aced16611461070c57600080fd5b80638d315d7b116101ce5780638d315d7b1461069f5780638da5cb5b146106a75780638fcda03e146106b857806394bf804d146106cb57600080fd5b80637999e84e1461067c5780637d7c2a1c146106845780638121305e1461068c57600080fd5b80633f6be822116102d9578063554070bc116102775780636e553f65116102465780636e553f651461062557806370a0823114610638578063715018a614610661578063748747e61461066957600080fd5b8063554070bc146105c357806357b082fc146105d6578063620bc225146105ea5780636a1db1bf1461061257600080fd5b8063476343ee116102b3578063476343ee146105515780634afe813e146105595780634cdad506146105855780635053145f1461059857600080fd5b80633f6be822146104fe578063402d267d146105295780634441a2ce1461053e57600080fd5b8063171e5e8811610351578063313ce56711610320578063313ce567146104a957806338d52e0f146104b857806339509351146104e35780633d672a45146104f657600080fd5b8063171e5e881461046957806318160ddd1461047c5780631e2eaeaf1461048457806323b872dd1461049657600080fd5b8063095ea7b31161038d578063095ea7b3146103f757806309a68a921461041a5780630a28a47714610441578063142dbe691461045457600080fd5b806301e1d114146103b457806306fdde03146103cf57806307a2d13a146103e4575b600080fd5b6103bc610863565b6040519081526020015b60405180910390f35b6103d76108e8565b6040516103c69190614de6565b6103bc6103f2366004614df9565b61097a565b61040a610405366004614e32565b6109af565b60405190151581526020016103c6565b609f5461042e90600160b81b900460020b81565b60405160029190910b81526020016103c6565b6103bc61044f366004614df9565b6109c9565b610467610462366004615159565b6109f1565b005b610467610477366004614df9565b610ab9565b6035546103bc565b6103bc610492366004614df9565b5490565b61040a6104a4366004615253565b610b1f565b604051601281526020016103c6565b6065546104cb906001600160a01b031681565b6040516001600160a01b0390911681526020016103c6565b61040a6104f1366004614e32565b610b43565b6103bc610b82565b609e54610511906001600160401b031681565b6040516001600160401b0390911681526020016103c6565b6103bc610537366004615294565b5060001990565b61046761054c366004614df9565b610c08565b610467610c67565b609e5461057090600160501b900463ffffffff1681565b60405163ffffffff90911681526020016103c6565b6103bc610593366004614df9565b610da5565b60a0546105ab906001600160801b031681565b6040516001600160801b0390911681526020016103c6565b6103bc6105d1366004614df9565b610db0565b60a05461040a90600160801b900460ff1681565b609e546105ff90600160401b900461ffff1681565b60405161ffff90911681526020016103c6565b610467610620366004614df9565b610e3b565b6103bc6106333660046152b1565b610ebd565b6103bc610646366004615294565b6001600160a01b031660009081526033602052604090205490565b610467610ed1565b610467610677366004615294565b610f07565b610467610f7f565b610467611062565b61046761069a366004614df9565b611174565b6103bc6111d3565b6066546001600160a01b03166104cb565b6104676106c63660046152e1565b611264565b6103bc6106d93660046152b1565b611310565b6103d7611324565b61040a6106f4366004614e32565b611333565b61040a610707366004614e32565b6113c5565b609f546104cb906001600160a01b031681565b6103bc61072d366004614df9565b6113d3565b6103bc610740366004615316565b6113fa565b609f5461042e90600160a01b900460020b81565b61040a610767366004614df9565b611425565b6103bc61077a366004615316565b61143e565b61046761156a565b6103bc60ac5481565b6103bc61079e366004614df9565b6119f4565b6103bc6107b1366004615294565b611a1c565b6103bc6107c4366004615294565b611a3e565b6107dc6107d736600461537b565b611a5c565b6040516103c69190615405565b6103bc609d5481565b6103bc610800366004615449565b611a8a565b610467610813366004615294565b611ab5565b6103bc609b5481565b6103bc61082f366004614df9565b611b29565b610467610842366004615294565b611b34565b6103bc61271081565b61046761085e366004615477565b611bcc565b600061086d611c99565b6065546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d991906154ba565b6108e391906154e9565b905090565b6060603680546108f790615501565b80601f016020809104026020016040519081016040528092919081815260200182805461092390615501565b80156109705780601f1061094557610100808354040283529160200191610970565b820191906000526020600020905b81548152906001019060200180831161095357829003601f168201915b5050505050905090565b60008061098660355490565b905080156109a6576109a1610999610863565b849083611ce2565b6109a8565b825b9392505050565b6000336109bd818585611d01565b60019150505b92915050565b6000806109d560355490565b905080156109a6576109a1816109e9610863565b859190611e25565b600054610100900460ff16610a0c5760005460ff1615610a10565b303b155b610a785760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff16158015610a9a576000805461ffff19166101011790555b610aa382611e53565b8015610ab5576000805461ff00191690555b5050565b6066546001600160a01b03163314610ae35760405162461bcd60e51b8152600401610a6f9061553b565b609d8190556040518181527f333b26cca69716ad4680ddb07663f5bfb4f06045671f336af9a83690a3ae00f9906020015b60405180910390a150565b600033610b2d858285611f36565b610b38858585611fb0565b506001949350505050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091906109bd9082908690610b7d9087906154e9565b611d01565b60a7546040516001620e8cb360e11b031981526001600160a01b03909116600482015260009073__$9842325bb1826b70c2ef476a1c714a02a7$__9063ffe2e69a90602401602060405180830381865af4158015610be4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e391906154ba565b6066546001600160a01b03163314610c325760405162461bcd60e51b8152600401610a6f9061553b565b60ab8190556040518181527fbaf704dc582d2430f506b48fda242593270667e77656cf3ba2f77a630594466390602001610b14565b6066546001600160a01b03163314610c915760405162461bcd60e51b8152600401610a6f9061553b565b60a4546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfe91906154ba565b60a45460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb90610d319033908590600401615570565b6020604051808303816000875af1158015610d50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d749190615589565b506040518181527f9800e6f57aeb4360eaa72295a820a4293e1e66fbfcabcd8874ae141304a76deb90602001610b14565b60006109c38261097a565b60a754604051637a5fda7960e01b8152600481018390526001600160a01b03909116602482015260009073__$9842325bb1826b70c2ef476a1c714a02a7$__90637a5fda79906044015b602060405180830381865af4158015610e17573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c391906154ba565b6066546001600160a01b03163314610e655760405162461bcd60e51b8152600401610a6f9061553b565b612710811115610e8857604051630709dc8560e31b815260040160405180910390fd5b60ac8190556040518181527f9fe6eeb0f0541c644a56c67efeb872dbadd803a60b909d7dde1b35a3fe230b0e90602001610b14565b6000610ec761217e565b6109a88383612186565b6066546001600160a01b03163314610efb5760405162461bcd60e51b8152600401610a6f9061553b565b610f056000612243565b565b6066546001600160a01b03163314610f315760405162461bcd60e51b8152600401610a6f9061553b565b609f80546001600160a01b0319166001600160a01b0383169081179091556040519081527f0425bcd291db1d48816f2a98edc7ecaf6dd5c64b973d9e4b3b6b750763dc6c2e90602001610b14565b609f546001600160a01b03163314610fbf57609f546040516369958c7360e01b81523360048201526001600160a01b039091166024820152604401610a6f565b609954609b54604051630ed586bf60e21b815260048101919091526060916001600160a01b031690633b561afc90602401600060405180830381865afa15801561100d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261103591908101906157b4565b805190945061105f935084925060009150611052576110526158ba565b6020026020010151612295565b50565b609f546001600160a01b031633146110a257609f546040516369958c7360e01b81523360048201526001600160a01b039091166024820152604401610a6f565b60006110ac6111d3565b90506110b781611425565b6110d457604051636fa1adc360e01b815260040160405180910390fd5b6060806110df61237e565b80519193509150600003611106576040516301d84bb360e11b815260040160405180910390fd5b61112a8160008151811061111c5761111c6158ba565b60200260200101518461249d565b609e805467ffffffffffffffff1916426001600160401b03161790556040517ff57243a1fddfdc9fa2c7de26cc3503b1b94cfd4368d2b82d0970bfbb2fbce3a490600090a1505050565b6066546001600160a01b0316331461119e5760405162461bcd60e51b8152600401610a6f9061553b565b60aa8190556040518181527f77bc5ea45f61ae2f050ec3af00a3ebcbeff6082d4c04905ebb7e01ff797dacf390602001610b14565b609954609b54604051631c7a838360e31b815260048101919091526000916001600160a01b03169063e3d41c1890602401602060405180830381865afa158015611221573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124591906154ba565b905061125a6112556105d1610863565b6125d6565b6108e390826158d0565b6066546001600160a01b0316331461128e5760405162461bcd60e51b8152600401610a6f9061553b565b609e805465ffffffffffff60401b1916600160501b63ffffffff851690810269ffff0000000000000000191691909117600160401b61ffff8516908102919091179092556040805191825260208201929092527f9af00b5d3a5006b7a36e8fe4a8f67a155aa897efbee30711b474e18eed221555910160405180910390a15050565b600061131a61217e565b6109a883836125ff565b6060603780546108f790615501565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909190838110156113b85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610a6f565b610b388286868403611d01565b6000336109bd818585611fb0565b6000806113df60355490565b905080156109a6576109a16113f2610863565b849083611e25565b600061140461217e565b600061140f8561267f565b905061141c818585612692565b95945050505050565b600061142f61274d565b806109c357506109c38261277a565b600061144861217e565b336001600160a01b038316146114805760006114648333611a8a565b9050600019811461147e5761147e8333610b7d8885615911565b505b61148984610da5565b9050806000036114c95760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f41535345545360a81b6044820152606401610a6f565b60006114d48261267f565b90508181146114ec578091506114e9816109c9565b94505b6114f68286612888565b61150083866128a2565b60408051838152602081018790526001600160a01b03808616929087169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4606554611562906001600160a01b031685846129f0565b509392505050565b6066546001600160a01b031633146115945760405162461bcd60e51b8152600401610a6f9061553b565b61159c612a46565b60655460a55460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926115d49291169060001990600401615570565b6020604051808303816000875af11580156115f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116179190615589565b5060655460a85460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926116509291169060001990600401615570565b6020604051808303816000875af115801561166f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116939190615589565b5060a35460a65460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926116cb92911690600090600401615570565b6020604051808303816000875af11580156116ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170e9190615589565b5060a15460a65460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261174692911690600090600401615570565b6020604051808303816000875af1158015611765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117899190615589565b5060a15460a85460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926117c192911690600090600401615570565b6020604051808303816000875af11580156117e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118049190615589565b5060a35460a65460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261183d9291169060001990600401615570565b6020604051808303816000875af115801561185c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118809190615589565b5060a15460a65460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926118b99291169060001990600401615570565b6020604051808303816000875af11580156118d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fc9190615589565b5060a15460a85460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926119359291169060001990600401615570565b6020604051808303816000875af1158015611954573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119789190615589565b5060a45460a65460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926119b19291169060001990600401615570565b6020604051808303816000875af11580156119d0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105f9190615589565b600080611a0060355490565b905080156109a6576109a181611a14610863565b859190611ce2565b6001600160a01b0381166000908152603360205260408120546109c39061097a565b6001600160a01b0381166000908152603360205260408120546109c3565b606060208251028201602001602083015b81811015611a82578051548152602001611a6d565b509192915050565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6066546001600160a01b03163314611adf5760405162461bcd60e51b8152600401610a6f9061553b565b60a980546001600160a01b0319166001600160a01b0383169081179091556040517f37e6fa50467241d1adf59e9c0011228de6a03425a9efdea6d2d3662c77eaba5390600090a250565b60006109c3826119f4565b6066546001600160a01b03163314611b5e5760405162461bcd60e51b8152600401610a6f9061553b565b6001600160a01b038116611bc35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a6f565b61105f81612243565b6066546001600160a01b03163314611bf65760405162461bcd60e51b8152600401610a6f9061553b565b60a0805463ffffffff60881b1916600160881b61ffff86811691820261ffff60981b191692909217600160981b9286169283021767ffffffffffffffff60a81b1916600160a81b6001600160401b03861690810291909117909355604080519182526020820192909252908101919091527f4a9bdb3bab9a7cff0ea02e1428a3901c565a962f3b99b7d8d2b02787ca4f93f99060600160405180910390a1505050565b60a5546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610be4573d6000803e3d6000fd5b828202811515841585830485141716611cfa57600080fd5b0492915050565b6001600160a01b038316611d635760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a6f565b6001600160a01b038216611dc45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a6f565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b828202811515841585830485141716611e3d57600080fd5b6001826001830304018115150290509392505050565b600054610100900460ff16611e7a5760405162461bcd60e51b8152600401610a6f90615928565b8051611e8590612afa565b602081015160a180546001600160a01b03199081166001600160a01b0393841617909155604083015160a380548316918416919091179055606083015160a28054831691841691909117905560a083015160a580548316918416919091179055608083015160a48054831691841691909117905560c083015160a68054831691841691909117905561010083015160a88054831691841691909117905560e09092015160a780549093169116179055565b6000611f428484611a8a565b90506000198114611faa5781811015611f9d5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610a6f565b611faa8484848403611d01565b50505050565b6001600160a01b0383166120145760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610a6f565b6001600160a01b0382166120765760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610a6f565b6001600160a01b038316600090815260336020526040902054818110156120ee5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610a6f565b6001600160a01b038085166000908152603360205260408082208585039055918516815290812080548492906121259084906154e9565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161217191815260200190565b60405180910390a3611faa565b610ab561237e565b600061219183611b29565b9050806000036121d15760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f53484152455360a81b6044820152606401610a6f565b6065546121e9906001600160a01b0316333086612bd8565b6121f38282612c10565b60408051848152602081018390526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a36109c38382612cef565b606680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60a054600160801b900460ff166122bf57604051632f0c3e3160e11b815260040160405180910390fd5b600081604001516122cf90615973565b905060006122db612d47565b905060006122e98383612e08565b60a054909150600160a81b90046001600160401b0316811115612341576000612323848460a060119054906101000a900461ffff16612e36565b50905080840361233b5760a0805460ff60801b191690555b5061234f565b60a0805460ff60801b191690555b6040517f9a94a63b02012d6753ed863b962aceb756429b4265fc327391dd05fb24d4502b90600090a150505050565b609954609b54604051630ed586bf60e21b815260609283926001600160a01b0390911691633b561afc916123b89160040190815260200190565b600060405180830381865afa1580156123d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123fd91908101906157b4565b90945092506000915061241090506111d3565b905061241a612f75565b61242483826131ed565b6065546040516370a0823160e01b8152306004820152612498916001600160a01b0316906370a08231906024015b602060405180830381865afa15801561246f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249391906154ba565b6134ee565b509091565b6124a681613584565b60a08054911515600160801b0260ff60801b1990921691909117905560006124cd8261364d565b905060005b60028160ff1610156125b557818160ff16600281106124f3576124f36158ba565b602002015160400151600f0b156125b557609954609b54609c546001600160a01b039092169163c7505c15919063ffffffff168560ff86166002811061253b5761253b6158ba565b60200201516040518463ffffffff1660e01b815260040161255e939291906159c7565b60408051808303816000875af115801561257c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a09190615a65565b505080806125ad90615a89565b9150506124d2565b5060a054600160801b900460ff16156125d1576125d183612295565b505050565b6000600160ff1b82106125fb5760405162461bcd60e51b8152600401610a6f90615aa8565b5090565b600061260a836113d3565b606554909150612625906001600160a01b0316333084612bd8565b61262f8284612c10565b60408051828152602081018590526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a36109c38184612cef565b60006109c361268c610863565b83613852565b600061269d846109c9565b9050336001600160a01b038316146126d75760006126bb8333611a8a565b905060001981146126d5576126d58333610b7d8585615911565b505b6126e18482612888565b6126eb82826128a2565b60408051858152602081018390526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a46065546109a8906001600160a01b031684866129f0565b609e5460009063ffffffff600160501b82041690612774906001600160401b031642615911565b11905090565b609c5460995460009173__$9842325bb1826b70c2ef476a1c714a02a7$__9163757d5fd6916001600160a01b0364010000000082048116926127c89291169063ffffffff9081169061398b16565b609e54609f5460405160e086901b6001600160e01b03191681526001600160a01b03909416600485015263ffffffff9092166024840152600160401b900461ffff166044830152600160a01b8104600290810b6064840152600160b81b909104900b608482015260a401602060405180830381865af415801561284f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128739190615589565b905080612883576109c382613584565b919050565b612899612893610863565b83613a1b565b610ab582613b2f565b6001600160a01b0382166129025760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610a6f565b6001600160a01b038216600090815260336020526040902054818110156129765760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610a6f565b6001600160a01b03831660009081526033602052604081208383039055603580548492906129a5908490615911565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6125d18363a9059cbb60e01b8484604051602401612a0f929190615570565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613c33565b609a5460995460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392612a7e9291169060001990600401615570565b6020604051808303816000875af1158015612a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac19190615589565b5060985460995460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926119b19291169060001990600401615570565b600054610100900460ff16612b215760405162461bcd60e51b8152600401610a6f90615928565b8051612b2c90613d05565b60208181015160a0805460408086015160608088015163ffffffff60881b19909416600160881b61ffff97881690810261ffff60981b191691909117600160981b979093169687029290921767ffffffffffffffff60a81b1916600160a81b6001600160401b0390951694850217909455815190815294850193909352918301919091527f4a9bdb3bab9a7cff0ea02e1428a3901c565a962f3b99b7d8d2b02787ca4f93f99101610b14565b6040516001600160a01b0380851660248301528316604482015260648101829052611faa9085906323b872dd60e01b90608401612a0f565b6001600160a01b038216612c665760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a6f565b8060356000828254612c7891906154e9565b90915550506001600160a01b03821660009081526033602052604081208054839290612ca59084906154e9565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b609d54612cfa610863565b1115612d2d57609d54612d0b610863565b6040516301b25d0360e41b815260048101929092526024820152604401610a6f565b612d3682613ed0565b610ab5612d41610863565b83613f77565b609c5460995460009173__$9842325bb1826b70c2ef476a1c714a02a7$__9163e54c8fd8916001600160a01b036401000000008204811692612d959291169063ffffffff9081169061398b16565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015263ffffffff166024820152604401602060405180830381865af4158015612de4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e39190615aca565b60006109a8612e316001600160a01b038416600160601b612e2a8783836141b8565b91906141b8565b6141fa565b600080600080861315612e7857612e71612e6c612e5586612710615ae7565b6001600160a01b0388169061ffff16612710614205565b6142b7565b9050612e8d565b612e8a612e6c612e5586612710615b0d565b90505b6040805160a0810182528781526001600160a01b0383811660208301908152600083850181815260016060860190815260808601928352609954609b54609c5498516383d778eb60e01b8152600481019190915263ffffffff90981660248901528651604489015293518516606488015290511515608487015251151560a486015251151560c485015291929116906383d778eb9060e40160408051808303816000875af1158015612f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f679190615a65565b909890975095505050505050565b60a55460a454604051630cff5bdd60e21b81523060048201526001600160a01b03918216602482015260009291909116906333fd6f7490604401602060405180830381865afa158015612fcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff091906154ba565b905060ab5481111561105f57600061271060ac548361300f9190615b30565b6130199190615b4f565b6130239083615911565b60a554604051634274debf60e11b81523060048201529192506001600160a01b0316906384e9bd7e90602401600060405180830381600087803b15801561306957600080fd5b505af115801561307d573d6000803e3d6000fd5b505050507f8e55ccfc9778ff8eba1646d765cf1982537ce0f9257054a17b48aad745250183826040516130b291815260200190565b60405180910390a160a45460a25460a1546040516bffffffffffffffffffffffff19606094851b8116602083015261017760eb1b603483015292841b83166037820152607d60ea1b604b820152921b16604e82015260009060620160408051808303601f190181529082905260aa5460a95460a65460a854631a6dbd7760e21b865293955073__$f09208ef53137b379b85ea4a8d399069d8$__946369b6f5dc9461317994899490936001600160a01b03918216938a939183169290911690600401615b71565b602060405180830381865af4158015613196573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ba91906154ba565b506065546040516370a0823160e01b81523060048201526125d1916001600160a01b0316906370a0823190602401612452565b609954609b54604051631c7a838360e31b815260048101919091526000916001600160a01b03169063e3d41c1890602401602060405180830381865afa15801561323b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325f91906154ba565b905060008113156132f257609954609b546001600160a01b0390911690639cd1be589061328e84600019615bba565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b1580156132cc57600080fd5b505af11580156132e0573d6000803e3d6000fd5b505050506132ed816142e0565b613393565b600081121561339357600061331161330c83600019615bba565b6143df565b9050801561339157609954609b546001600160a01b0390911690639cd1be589061333a846125d6565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b15801561337857600080fd5b505af115801561338c573d6000803e3d6000fd5b505050505b505b8251600090156134e2576000846000815181106133b2576133b26158ba565b602002602001015190506134d0609860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134369190615c3f565b61344190600a615d46565b609a60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b89190615c3f565b6134c390600a615d46565b612e2a84602001516125d6565b6134da9085615d55565b9150506134e5565b50815b611faa81614464565b60a55460405163b6b55f2560e01b8152600481018390526001600160a01b039091169063b6b55f2590602401600060405180830381600087803b15801561353457600080fd5b505af1158015613548573d6000803e3d6000fd5b50506040518381523392507f6e47dcdd359b6cd69456f0f97d394bd4540a2e7c4adc1b9da076859df53756c7915060200160405180910390a250565b609954609b54609c54604051633524324160e11b8152600481019290925263ffffffff16602482015260009182916001600160a01b0390911690636a48648290604401602060405180830381865afa1580156135e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360891906154ba565b9050600061361d82613618612d47565b612e08565b60a05490915061364590600160981b900461ffff1661271061363e876141fa565b9190614205565b109392505050565b613655614c8c565b60a0546000906001600160801b0316156136d357609f5460a0546136ab91600160a01b8104600290810b92600160b81b909204900b9061369d906001600160801b0316614759565b6136a690615d94565b614787565b828260ff16600281106136c0576136c06158ba565b6020020152806136cf81615a89565b9150505b60006136dd612d47565b604051630ad6ed5b60e41b81526001600160a01b038216600482015260248101869052620c3500604482015290915060009073__$9842325bb1826b70c2ef476a1c714a02a7$__9063ad6ed5b090606401606060405180830381865af415801561374b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061376f9190615dc3565b609f805465ffffffffffff60a01b1916600160b81b62ffffff9485160262ffffff60a01b191617600160a01b94909316939093029190911790915560a0549091506001600160801b031615806137ce575060a054600160801b900460ff165b156137ef5760a080546001600160801b0319166001600160801b0383161790555b609f5460a05461382391600160a01b8104600290810b92600160b81b909204900b906136a6906001600160801b0316614759565b848460ff1660028110613838576138386158ba565b60200201528261384781615a89565b935050505050919050565b60008061385d612d47565b609954609b54609c54604051633524324160e11b8152600481019290925263ffffffff1660248201529192506000916001600160a01b0390911690636a48648290604401602060405180830381865afa1580156138be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138e291906154ba565b905060006138f18286886141b8565b6138fa90615973565b905060006139088385612e08565b60a054909150600160a81b90046001600160401b031681111561397d576000613942838660a060119054906101000a900461ffff16612e36565b50905082810361395457869550613977565b600061396a6139628a6125d6565b8390876147ff565b61397390615973565b9650505b50613981565b8594505b5050505092915050565b600080836001600160a01b0316631e2eaeaf6139a68561485c565b6040518263ffffffff1660e01b81526004016139c491815260200190565b602060405180830381865afa1580156139e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a0591906154ba565b905063ffffffff60b082901c165b949350505050565b6000613a2983836001614884565b90508060400151613a3990615d94565b60a08054600090613a549084906001600160801b0316615dfd565b82546101009290920a6001600160801b0381810219909316918316021790915560a054166000039050613a8957600160a08201525b609954609b54609c5460405163c7505c1560e01b81526001600160a01b039093169263c7505c1592613aca92909163ffffffff9091169086906004016159c7565b60408051808303816000875af1158015613ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b0c9190615a65565b50506000613b1c61125584610db0565b9050611faa613b2a82615973565b614464565b60a754604080516354f0f7d560e01b815290517fc852a00896bd42656c7822f2f6c850502574cfdbb70db38df4ea5eb56f5af8fd926001600160a01b0316916354f0f7d59160048083019260209291908290030181865afa158015613b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bbc91906154ba565b60405190815260200160405180910390a160a554604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b158015613c1357600080fd5b505af1158015613c27573d6000803e3d6000fd5b5050505061105f612f75565b6000613c88826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166148ec9092919063ffffffff16565b8051909150156125d15780806020019051810190613ca69190615589565b6125d15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a6f565b600054610100900460ff16613d2c5760405162461bcd60e51b8152600401610a6f90615928565b613d346148fb565b8051613d3f9061492a565b602081810151609c805463ffffffff191663ffffffff909216919091179055604080830151609980546001600160a01b0319166001600160a01b0390921691821790558151639dca362f60e01b815291519092639dca362f926004808201939182900301816000875af1158015613dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dde91906154ba565b609b556060810151609a80546001600160a01b03199081166001600160a01b0393841617909155608083015160988054909216908316179055609c54609954613e3292169063ffffffff9081169061494116565b609c80546001600160a01b039290921664010000000002640100000000600160c01b0319909216919091179055609e80546c01518001f4000000000000000065ffffffffffff60401b19909116179081905560408051600160501b830463ffffffff168152600160401b90920461ffff1660208301527f9af00b5d3a5006b7a36e8fe4a8f67a155aa897efbee30711b474e18eed2215559101610b14565b60a754604080516354f0f7d560e01b815290517fc852a00896bd42656c7822f2f6c850502574cfdbb70db38df4ea5eb56f5af8fd926001600160a01b0316916354f0f7d59160048083019260209291908290030181865afa158015613f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f5d91906154ba565b60405190815260200160405180910390a161105f816134ee565b6000613f8561125583610db0565b9050613f9081614464565b613f98614cb9565b60a0546001600160801b0316158015613fb057508284145b156140ce576000613fbf612d47565b604051630ad6ed5b60e41b81526001600160a01b038216600482015260248101859052620c3500604482015290915073__$9842325bb1826b70c2ef476a1c714a02a7$__9063ad6ed5b090606401606060405180830381865af415801561402a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061404e9190615dc3565b60a080546001600160801b0319166001600160801b03929092169182179055609f805465ffffffffffff60a01b1916600160b81b62ffffff948516810262ffffff60a01b191691909117600160a01b95909416850293909317908190556140c6938104600290810b93909104900b906136a690614759565b91505061412d565b6140e36140db8486615911565b846000614884565b604081015160a0805492935090916000906141089084906001600160801b0316615e1d565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b609954609b54609c5460405163c7505c1560e01b81526001600160a01b039093169263c7505c159261416e92909163ffffffff9091169086906004016159c7565b60408051808303816000875af115801561418c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141b09190615a65565b505050505050565b60006141e66141e1600086126141ce57856141da565b6141da86600019615bba565b8585614205565b6149bb565b905060008412156109a857613a1381615973565b60006109c3826149cd565b600080806000198587098587029250828110838203039150508060000361423e576000841161423357600080fd5b5082900490506109a8565b80841161424a57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b806001600160a01b03811681146128835760405162461bcd60e51b8152600401610a6f90615aa8565b60a35460a1546040516bffffffffffffffffffffffff19606093841b81166020830152607d60ea1b60348301529190921b166037820152600090604b0160408051601f198184030181529082905260a65460a854638b8f9f0f60e01b845291935073__$f09208ef53137b379b85ea4a8d399069d8$__92638b8f9f0f9261437b92879287926001600160a01b03928316921690600401615e3f565b60006040518083038186803b15801561439357600080fd5b505af41580156143a7573d6000803e3d6000fd5b50506065546040516370a0823160e01b8152306004820152610ab593506001600160a01b0390911691506370a0823190602401612452565b60a75460a55460a85460a15460a65460a3546040516303d0ed4560e31b8152600481018890526001600160a01b039687166024820152948616604486015292851660648501529084166084840152831660a48301529190911660c482015260009073__$9842325bb1826b70c2ef476a1c714a02a7$__90631e876a289060e401610dfa565b6000614575609a60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144e09190615c3f565b6144eb90600a615d46565b609860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561453e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145629190615c3f565b61456d90600a615d46565b8491906141b8565b90506000614582826141fa565b9050600082131561467b57609a546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906145bf9030908590600401615570565b600060405180830381600087803b1580156145d957600080fd5b505af11580156145ed573d6000803e3d6000fd5b5050609954609b54609a546001600160a01b039092169350637d2efe0792509063ffffffff166040516001600160e01b031960e085901b168152600481019290925263ffffffff16602482015260448101849052606401600060405180830381600087803b15801561465e57600080fd5b505af1158015614672573d6000803e3d6000fd5b50505050505050565b60008212156125d157609954609b54609a546001600160a01b0390921691637d2efe07919063ffffffff166146af85615973565b6040516001600160e01b031960e086901b168152600481019390935263ffffffff9190911660248301526044820152606401600060405180830381600087803b1580156146fb57600080fd5b505af115801561470f573d6000803e3d6000fd5b5050609a54604051630852cd8d60e31b8152600481018590526001600160a01b0390911692506342966c689150602401600060405180830381600087803b15801561465e57600080fd5b60006001607f1b826001600160801b0316106125fb5760405162461bcd60e51b8152600401610a6f90615aa8565b61478f614cb9565b6040518061010001604052808560020b81526020018460020b815260200183600f0b815260200160006001600160a01b03168152602001600061ffff168152602001600015158152602001600060028111156147ed576147ed61598f565b81526000602090910152949350505050565b6000600181808061481088856149e4565b9450925061481e87856149e4565b9450915061482c86856149e4565b9450905061483e6141e1848484614205565b9450836148515761484e85615973565b94505b505050509392505050565b60006109c36003614880606463ffffffff86165b9060009182526020526040902090565b0190565b61488c614cb9565b60a0546000906148b5906148b09086908890612e2a906001600160801b03166125d6565b614a0e565b905082156148c9576148c681615d94565b90505b609f5461141c90600160a01b8104600290810b91600160b81b9004900b83614787565b6060613a138484600085614a32565b600054610100900460ff166149225760405162461bcd60e51b8152600401610a6f90615928565b610f05614b63565b61105f816000015182602001518360400151614b93565b600080836001600160a01b0316631e2eaeaf61495c85614bc1565b6040518263ffffffff1660e01b815260040161497a91815260200190565b602060405180830381865afa158015614997573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1391906154ba565b6000600160ff1b82106125fb57600080fd5b60008082136125fb576149df82615973565b6109c3565b6000806000841215614a03579115916149fc84615973565b9150614a07565b8391505b5092909150565b80600f81900b81146128835760405162461bcd60e51b8152600401610a6f90615aa8565b606082471015614a935760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a6f565b6001600160a01b0385163b614aea5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a6f565b600080866001600160a01b03168587604051614b069190615e79565b60006040518083038185875af1925050503d8060008114614b43576040519150601f19603f3d011682016040523d82523d6000602084013e614b48565b606091505b5091509150614b58828286614bd9565b979650505050505050565b600054610100900460ff16614b8a5760405162461bcd60e51b8152600401610a6f90615928565b610f0533612243565b614b9d8282614c12565b5050606580546001600160a01b0319166001600160a01b0392909216919091179055565b60006109c36001614880606463ffffffff8616614870565b60608315614be85750816109a8565b825115614bf85782518084602001fd5b8160405162461bcd60e51b8152600401610a6f9190614de6565b600054610100900460ff16614c395760405162461bcd60e51b8152600401610a6f90615928565b610ab58282600054610100900460ff16614c655760405162461bcd60e51b8152600401610a6f90615928565b8151614c78906036906020850190614cfe565b5080516125d1906037906020840190614cfe565b60405180604001604052806002905b614ca3614cb9565b815260200190600190039081614c9b5790505090565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a081018290529060c08201908152600060209091015290565b828054614d0a90615501565b90600052602060002090601f016020900481019282614d2c5760008555614d72565b82601f10614d4557805160ff1916838001178555614d72565b82800160010185558215614d72579182015b82811115614d72578251825591602001919060010190614d57565b506125fb9291505b808211156125fb5760008155600101614d7a565b60005b83811015614da9578181015183820152602001614d91565b83811115611faa5750506000910152565b60008151808452614dd2816020860160208601614d8e565b601f01601f19169290920160200192915050565b6020815260006109a86020830184614dba565b600060208284031215614e0b57600080fd5b5035919050565b6001600160a01b038116811461105f57600080fd5b803561288381614e12565b60008060408385031215614e4557600080fd5b8235614e5081614e12565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715614e9657614e96614e5e565b60405290565b60405160a081016001600160401b0381118282101715614e9657614e96614e5e565b604051606081016001600160401b0381118282101715614e9657614e96614e5e565b60405161012081016001600160401b0381118282101715614e9657614e96614e5e565b604080519081016001600160401b0381118282101715614e9657614e96614e5e565b604051601f8201601f191681016001600160401b0381118282101715614f4d57614f4d614e5e565b604052919050565b600082601f830112614f6657600080fd5b81356001600160401b03811115614f7f57614f7f614e5e565b614f92601f8201601f1916602001614f25565b818152846020838601011115614fa757600080fd5b816020850160208301376000918101602001919091529392505050565b63ffffffff8116811461105f57600080fd5b803561288381614fc4565b803561ffff8116811461288357600080fd5b80356001600160401b038116811461288357600080fd5b60006080828403121561501c57600080fd5b615024614e74565b905081356001600160401b038082111561503d57600080fd5b9083019060a0828603121561505157600080fd5b615059614e9c565b82358281111561506857600080fd5b83016060818803121561507a57600080fd5b615082614ebe565b813561508d81614e12565b8152602082810135858111156150a257600080fd5b6150ae8a828601614f55565b8284015250604080840135868111156150c657600080fd5b6150d28b828701614f55565b82850152508285526150e5828801614fd6565b828601526150f4818801614e27565b8186015261510460608801614e27565b606086015261511560808801614e27565b6080860152848852615128828a01614fe1565b82890152615137818a01614fe1565b818901525050505050505061514e60608301614ff3565b606082015292915050565b60006020828403121561516b57600080fd5b81356001600160401b038082111561518257600080fd5b90830190610120828603121561519757600080fd5b61519f614ee0565b8235828111156151ae57600080fd5b6151ba8782860161500a565b8252506151c960208401614e27565b60208201526151da60408401614e27565b60408201526151eb60608401614e27565b60608201526151fc60808401614e27565b608082015261520d60a08401614e27565b60a082015261521e60c08401614e27565b60c082015261522f60e08401614e27565b60e08201526101009150615244828401614e27565b91810191909152949350505050565b60008060006060848603121561526857600080fd5b833561527381614e12565b9250602084013561528381614e12565b929592945050506040919091013590565b6000602082840312156152a657600080fd5b81356109a881614e12565b600080604083850312156152c457600080fd5b8235915060208301356152d681614e12565b809150509250929050565b600080604083850312156152f457600080fd5b82356152ff81614fc4565b915061530d60208401614fe1565b90509250929050565b60008060006060848603121561532b57600080fd5b83359250602084013561533d81614e12565b9150604084013561534d81614e12565b809150509250925092565b60006001600160401b0382111561537157615371614e5e565b5060051b60200190565b6000602080838503121561538e57600080fd5b82356001600160401b038111156153a457600080fd5b8301601f810185136153b557600080fd5b80356153c86153c382615358565b614f25565b81815260059190911b820183019083810190878311156153e757600080fd5b928401925b82841015614b58578335825292840192908401906153ec565b6020808252825182820181905260009190848201906040850190845b8181101561543d57835183529284019291840191600101615421565b50909695505050505050565b6000806040838503121561545c57600080fd5b823561546781614e12565b915060208301356152d681614e12565b60008060006060848603121561548c57600080fd5b61549584614fe1565b92506154a360208501614fe1565b91506154b160408501614ff3565b90509250925092565b6000602082840312156154cc57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156154fc576154fc6154d3565b500190565b600181811c9082168061551557607f821691505b60208210810361553557634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b03929092168252602082015260400190565b60006020828403121561559b57600080fd5b815180151581146109a857600080fd5b8051600281900b811461288357600080fd5b80516001600160801b038116811461288357600080fd5b80516003811061288357600080fd5b600082601f8301126155f457600080fd5b815160206156046153c383615358565b82815260059290921b8401810191818101908684111561562357600080fd5b8286015b848110156157a95780516001600160401b038082111561564657600080fd5b9088019060a0828b03601f1901121561565e57600080fd5b615666614e9c565b8683015161567381614fc4565b80825250604083015187820152606083015160408201526080830151606082015260a0830151828111156156a657600080fd5b8084019350508a603f8401126156bb57600080fd5b8683015191506156cd6153c383615358565b82815261012092830284016040019288820191908d8511156156ee57600080fd5b6040860195505b848610156157935780868f03121561570c57600080fd5b615714614ee0565b61571d876155ab565b815261572a8b88016155ab565b8b82015261573a604088016155bd565b6040820152606087015160608201526080870151608082015260a087015160a082015260c087015160c082015260e087015160e082015261577e61010088016155d4565b610100820152835294850194918901916156f5565b5060808301525085525050918301918301615627565b509695505050505050565b600080600080608085870312156157ca57600080fd5b84516157d581614e12565b8094505060208086015193506040808701516001600160401b03808211156157fc57600080fd5b818901915089601f83011261581057600080fd5b815161581e6153c382615358565b81815260069190911b8301850190858101908c83111561583d57600080fd5b938601935b828510156158865785858e03121561585a5760008081fd5b615862614f03565b855161586d81614e12565b8152858801518882015282529385019390860190615842565b60608c0151909850955050508084111561589f57600080fd5b5050506158ae878288016155e3565b91505092959194509250565b634e487b7160e01b600052603260045260246000fd5b600080821280156001600160ff1b03849003851316156158f2576158f26154d3565b600160ff1b839003841281161561590b5761590b6154d3565b50500190565b600082821015615923576159236154d3565b500390565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000600160ff1b8201615988576159886154d3565b5060000390565b634e487b7160e01b600052602160045260246000fd5b600381106159c357634e487b7160e01b600052602160045260246000fd5b9052565b60006101408201905084825263ffffffff84166020830152825160020b6040830152602083015160020b60608301526040830151600f0b60808301526060830151615a1d60a08401826001600160a01b03169052565b50608083015161ffff1660c08381019190915260a0840151151560e0840152830151615a4d6101008401826159a5565b5060e083015180151561012084015250949350505050565b60008060408385031215615a7857600080fd5b505080516020909101519092909150565b600060ff821660ff8103615a9f57615a9f6154d3565b60010192915050565b6020808252600890820152674f766572666c6f7760c01b604082015260600190565b600060208284031215615adc57600080fd5b81516109a881614e12565b600061ffff808316818516808303821115615b0457615b046154d3565b01949350505050565b600061ffff83811690831681811015615b2857615b286154d3565b039392505050565b6000816000190483118215151615615b4a57615b4a6154d3565b500290565b600082615b6c57634e487b7160e01b600052601260045260246000fd5b500490565b868152856020820152600060018060a01b03808716604084015260c06060840152615b9f60c0840187614dba565b94811660808401529290921660a09091015250949350505050565b60006001600160ff1b0381841382841380821686840486111615615be057615be06154d3565b600160ff1b6000871282811687830589121615615bff57615bff6154d3565b60008712925087820587128484161615615c1b57615c1b6154d3565b87850587128184161615615c3157615c316154d3565b505050929093029392505050565b600060208284031215615c5157600080fd5b815160ff811681146109a857600080fd5b600181815b80851115615c9d578160001904821115615c8357615c836154d3565b80851615615c9057918102915b93841c9390800290615c67565b509250929050565b600082615cb4575060016109c3565b81615cc1575060006109c3565b8160018114615cd75760028114615ce157615cfd565b60019150506109c3565b60ff841115615cf257615cf26154d3565b50506001821b6109c3565b5060208310610133831016604e8410600b8410161715615d20575081810a6109c3565b615d2a8383615c62565b8060001904821115615d3e57615d3e6154d3565b029392505050565b60006109a860ff841683615ca5565b60008083128015600160ff1b850184121615615d7357615d736154d3565b6001600160ff1b0384018313811615615d8e57615d8e6154d3565b50500390565b600081600f0b6f7fffffffffffffffffffffffffffffff198103615dba57615dba6154d3565b60000392915050565b600080600060608486031215615dd857600080fd5b615de1846155ab565b9250615def602085016155ab565b91506154b1604085016155bd565b60006001600160801b0383811690831681811015615b2857615b286154d3565b60006001600160801b03808316818516808303821115615b0457615b046154d3565b848152608060208201526000615e586080830186614dba565b6001600160a01b039485166040840152929093166060909101529392505050565b60008251615e8b818460208701614d8e565b919091019291505056fea164736f6c634300080d000a",
  "libraries": {
    "SwapManager": "0xa6fD01D0F8b366beDa3C35a6E8bDE296Da11a199",
    "Logic": "0xC88bBEa708B5748DAB3b6729f3Bfb16b1b6188f1"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "changeFee(uint256)": {
        "params": {
          "bps": "new fee value (less than MAX_BPS)"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "extsload(bytes32)": {
        "params": {
          "slot": "to read from."
        },
        "returns": {
          "val": "stored at the slot."
        }
      },
      "extsload(bytes32[])": {
        "params": {
          "slots": "to read from."
        },
        "returns": {
          "_0": "values stored at the slots."
        }
      },
      "getMarketValue(uint256)": {
        "params": {
          "amount": "amount of LP tokens"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCrvOracle(address)": {
        "params": {
          "_crvOracle": "address of oracle"
        }
      },
      "setCrvSwapSlippageTolerance(uint256)": {
        "params": {
          "_slippageTolerance": "value in bps unit for slippage tolerance"
        }
      },
      "setNotionalCrvHarvestThreshold(uint256)": {
        "params": {
          "_notionalCrvHarvestThreshold": "minimum threshold value (in CRV)"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateDepositCap(uint256)": {
        "params": {
          "newDepositCap": "The new deposit cap in asset amount"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeFee(uint256)": {
        "notice": "changes the fee value for CRV yield generated"
      },
      "closeTokenPosition()": {
        "notice": "closes remaining token position (To be used when reset condition is hit)"
      },
      "extsload(bytes32)": {
        "notice": "Returns a value from the storage."
      },
      "extsload(bytes32[])": {
        "notice": "Returns multiple values from storage."
      },
      "getMarketValue(uint256)": {
        "notice": "compute notional value for given amount of LP tokens"
      },
      "getPriceX128()": {
        "notice": "gives x128 price of 1 tricrypto LP token"
      },
      "getVaultMarketValue()": {
        "notice": "Returns account market value of vault in USDC (settlement token)"
      },
      "grantAllowances()": {
        "notice": "grants one time max allowance to various third parties"
      },
      "rebalance()": {
        "notice": "Rebalance the vault assets"
      },
      "setCrvOracle(address)": {
        "notice": "Sets the CRV to USD oracle address"
      },
      "setCrvSwapSlippageTolerance(uint256)": {
        "notice": "Sets the max allowed slippage tolerance for CRV->WETH->USDT swap"
      },
      "setNotionalCrvHarvestThreshold(uint256)": {
        "notice": "Sets the minimum threshold to harvest CRV rewards"
      },
      "totalAssets()": {
        "notice": "returns the total vault asset balance + staked balance"
      },
      "updateDepositCap(uint256)": {
        "notice": "Set the deposit cap for the vault in asset amount"
      },
      "withdrawFees()": {
        "notice": "withdraw accumulated CRV fees"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 217,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 220,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1395,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 414,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 420,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 422,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 424,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 426,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1007,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 29940,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "asset",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IERC20Metadata)3643"
      },
      {
        "astId": 97,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 209,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 24921,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "rageSettlementToken",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IERC20Metadata)3643"
      },
      {
        "astId": 24924,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "rageClearingHouse",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(IClearingHouse)5742"
      },
      {
        "astId": 24927,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "rageCollateralToken",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(ERC20PresetMinterPauser)3779"
      },
      {
        "astId": 24929,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "rageAccountNo",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 24931,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "ethPoolId",
        "offset": 0,
        "slot": "156",
        "type": "t_uint32"
      },
      {
        "astId": 24934,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "rageVPool",
        "offset": 4,
        "slot": "156",
        "type": "t_contract(IUniswapV3Pool)22317"
      },
      {
        "astId": 24936,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "depositCap",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 24938,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "lastRebalanceTS",
        "offset": 0,
        "slot": "158",
        "type": "t_uint64"
      },
      {
        "astId": 24940,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "rebalancePriceThresholdBps",
        "offset": 8,
        "slot": "158",
        "type": "t_uint16"
      },
      {
        "astId": 24942,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "rebalanceTimeThreshold",
        "offset": 10,
        "slot": "158",
        "type": "t_uint32"
      },
      {
        "astId": 24944,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "keeper",
        "offset": 0,
        "slot": "159",
        "type": "t_address"
      },
      {
        "astId": 27395,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "baseTickLower",
        "offset": 20,
        "slot": "159",
        "type": "t_int24"
      },
      {
        "astId": 27397,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "baseTickUpper",
        "offset": 23,
        "slot": "159",
        "type": "t_int24"
      },
      {
        "astId": 27399,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "baseLiquidity",
        "offset": 0,
        "slot": "160",
        "type": "t_uint128"
      },
      {
        "astId": 27401,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "isReset",
        "offset": 16,
        "slot": "160",
        "type": "t_bool"
      },
      {
        "astId": 27403,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "closePositionSlippageSqrtToleranceBps",
        "offset": 17,
        "slot": "160",
        "type": "t_uint16"
      },
      {
        "astId": 27405,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "resetPositionThresholdBps",
        "offset": 19,
        "slot": "160",
        "type": "t_uint16"
      },
      {
        "astId": 27407,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "minNotionalPositionToCloseThreshold",
        "offset": 21,
        "slot": "160",
        "type": "t_uint64"
      },
      {
        "astId": 30450,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "usdt",
        "offset": 0,
        "slot": "161",
        "type": "t_contract(IERC20)3537"
      },
      {
        "astId": 30453,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "weth",
        "offset": 0,
        "slot": "162",
        "type": "t_contract(IERC20)3537"
      },
      {
        "astId": 30456,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "usdc",
        "offset": 0,
        "slot": "163",
        "type": "t_contract(IERC20)3537"
      },
      {
        "astId": 30459,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "crvToken",
        "offset": 0,
        "slot": "164",
        "type": "t_contract(IERC20)3537"
      },
      {
        "astId": 30462,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "gauge",
        "offset": 0,
        "slot": "165",
        "type": "t_contract(ICurveGauge)26322"
      },
      {
        "astId": 30465,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "uniV3Router",
        "offset": 0,
        "slot": "166",
        "type": "t_contract(ISwapRouter)24833"
      },
      {
        "astId": 30468,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "lpPriceHolder",
        "offset": 0,
        "slot": "167",
        "type": "t_contract(ILPPriceGetter)26427"
      },
      {
        "astId": 30471,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "triCryptoPool",
        "offset": 0,
        "slot": "168",
        "type": "t_contract(ICurveStableSwap)26419"
      },
      {
        "astId": 30474,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "crvOracle",
        "offset": 0,
        "slot": "169",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 30476,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "crvSwapSlippageTolerance",
        "offset": 0,
        "slot": "170",
        "type": "t_uint256"
      },
      {
        "astId": 30478,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "notionalCrvHarvestThreshold",
        "offset": 0,
        "slot": "171",
        "type": "t_uint256"
      },
      {
        "astId": 30484,
        "contract": "contracts/yieldStrategy/CurveYieldStrategy.sol:CurveYieldStrategy",
        "label": "FEE",
        "offset": 0,
        "slot": "172",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20PresetMinterPauser)3779": {
        "encoding": "inplace",
        "label": "contract ERC20PresetMinterPauser",
        "numberOfBytes": "20"
      },
      "t_contract(IClearingHouse)5742": {
        "encoding": "inplace",
        "label": "contract IClearingHouse",
        "numberOfBytes": "20"
      },
      "t_contract(ICurveGauge)26322": {
        "encoding": "inplace",
        "label": "contract ICurveGauge",
        "numberOfBytes": "20"
      },
      "t_contract(ICurveStableSwap)26419": {
        "encoding": "inplace",
        "label": "contract ICurveStableSwap",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3537": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)3643": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(ILPPriceGetter)26427": {
        "encoding": "inplace",
        "label": "contract ILPPriceGetter",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouter)24833": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV3Pool)22317": {
        "encoding": "inplace",
        "label": "contract IUniswapV3Pool",
        "numberOfBytes": "20"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}