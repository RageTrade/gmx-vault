{
  "address": "0x212f250163B890198B382223b8825B7875f9B790",
  "abi": [
    {
      "inputs": [],
      "name": "NegativePrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SlippageToleranceBreached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "asset",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "DepositPeriphery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "breforeSwapLpPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "MAX_BPS",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "MAX_TOLERANCE",
          "type": "uint256"
        }
      ],
      "name": "SlippageToleranceBreachedEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "depositEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sharesMinted",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositUsdc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sharesMinted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositWeth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sharesMinted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_usdt",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC4626",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "contract ISwapRouter",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "contract ILPPriceGetter",
          "name": "_lpOracle",
          "type": "address"
        },
        {
          "internalType": "contract ICurveStableSwap",
          "name": "_stableSwap",
          "type": "address"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "_ethOracle",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpOracle",
      "outputs": [
        {
          "internalType": "contract ILPPriceGetter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableSwap",
      "outputs": [
        {
          "internalType": "contract ICurveStableSwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "updateEthOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRouter",
          "type": "address"
        }
      ],
      "name": "updateSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTolerance",
          "type": "uint256"
        }
      ],
      "name": "updateTolerance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IERC4626",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xec7ca46db59296df7e8c457d867444b7793056c9871843217c7ec14accca1a24",
  "receipt": {
    "to": null,
    "from": "0x4ec0dda0430A54b4796109913545F715B2d89F34",
    "contractAddress": "0x212f250163B890198B382223b8825B7875f9B790",
    "transactionIndex": 0,
    "gasUsed": "12439964",
    "logsBloom": "0x
    "blockHash": "0xf6bbf2eb4907f91a7b540eb314efb41e45fd94c0625ab8887ed79c269ac358ef",
    "transactionHash": "0xec7ca46db59296df7e8c457d867444b7793056c9871843217c7ec14accca1a24",
    "logs": [],
    "blockNumber": 11952225,
    "cumulativeGasUsed": "198444",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b9ed07af1791e08e5978bd9bdec1fd52",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NegativePrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlippageToleranceBreached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"DepositPeriphery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"breforeSwapLpPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MAX_BPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MAX_TOLERANCE\",\"type\":\"uint256\"}],\"name\":\"SlippageToleranceBreachedEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositWeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC4626\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"contract ILPPriceGetter\",\"name\":\"_lpOracle\",\"type\":\"address\"},{\"internalType\":\"contract ICurveStableSwap\",\"name\":\"_stableSwap\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_ethOracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpOracle\",\"outputs\":[{\"internalType\":\"contract ILPPriceGetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwap\",\"outputs\":[{\"internalType\":\"contract ICurveStableSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"updateEthOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"updateSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTolerance\",\"type\":\"uint256\"}],\"name\":\"updateTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"MAX_TOLERANCE\":{\"details\":\"sum of fees + slippage when swapping usdc to usdt\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/yieldStrategy/VaultPeriphery.sol\":\"VaultPeriphery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7825565a4bb2a34a1dc96bbfead755785dfb0df8ef81bd934c43023689685645\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\\n\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0xc66c17058b5874379d9a8c47082c72e4c0baa37811d3f73ce71ec3412fb35a32\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ICurveStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\n/* solhint-disable func-name-mixedcase */\\n/* solhint-disable var-name-mixedcase */\\n\\ninterface ICurveStableSwap {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 token_amount,\\n        uint256 index,\\n        uint256 min_amount\\n    ) external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function exchange(\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        bool\\n    ) external;\\n\\n    function get_dy(\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external view returns (uint256);\\n\\n    function balances(uint256) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[3] memory amounts, bool deposit) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7f08fa8c9caaff39cfbb05b28c9c247e2074a727e2ca2df01ea38375259f6b45\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/curve/ILPPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\ninterface ILPPriceGetter {\\n    function lp_price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbd221005c486996d5f3eab43f89c3fccc4c07a7535c4c638f0ee9428d1888991\",\"license\":\"GPL-2.0-or-later\"},\"contracts/yieldStrategy/VaultPeriphery.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC4626 } from 'contracts/interfaces/IERC4626.sol';\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\n\\nimport { ILPPriceGetter } from '../interfaces/curve/ILPPriceGetter.sol';\\nimport { ICurveStableSwap } from '../interfaces/curve/ICurveStableSwap.sol';\\n\\nimport { AggregatorV3Interface } from '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\n\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\ncontract VaultPeriphery is OwnableUpgradeable {\\n    using FullMath for uint256;\\n\\n    error ZeroValue();\\n    error OutOfBounds();\\n    error NegativePrice();\\n    error SlippageToleranceBreached();\\n\\n    event DepositPeriphery(address indexed owner, address indexed token, uint256 amount, uint256 asset, uint256 shares);\\n\\n    IERC20 public usdc;\\n    IERC20 public usdt;\\n    IERC20 public weth;\\n    IERC20 public lpToken;\\n\\n    IERC4626 public vault;\\n\\n    ISwapRouter public swapRouter;\\n    ILPPriceGetter public lpOracle;\\n    ICurveStableSwap public stableSwap;\\n\\n    AggregatorV3Interface internal ethOracle;\\n\\n    /// @dev sum of fees + slippage when swapping usdc to usdt\\n    uint256 MAX_TOLERANCE = 50;\\n    uint256 MAX_BPS = 10_000;\\n\\n    function initialize(\\n        IERC20 _usdc,\\n        IERC20 _usdt,\\n        IERC20 _weth,\\n        IERC20 _lpToken,\\n        IERC4626 _vault,\\n        ISwapRouter _swapRouter,\\n        ILPPriceGetter _lpOracle,\\n        ICurveStableSwap _stableSwap,\\n        AggregatorV3Interface _ethOracle\\n    ) external initializer {\\n        __Ownable_init();\\n\\n        usdc = _usdc;\\n        usdt = _usdt;\\n        weth = _weth;\\n        vault = _vault;\\n        lpToken = _lpToken;\\n\\n        lpOracle = _lpOracle;\\n        stableSwap = _stableSwap;\\n        swapRouter = _swapRouter;\\n\\n        ethOracle = _ethOracle;\\n\\n        weth.approve(address(stableSwap), type(uint256).max);\\n        usdt.approve(address(stableSwap), type(uint256).max);\\n\\n        usdc.approve(address(swapRouter), type(uint256).max);\\n\\n        lpToken.approve(address(vault), type(uint256).max);\\n    }\\n\\n    function _getEthPrice(AggregatorV3Interface crvOracle) internal view returns (uint256) {\\n        (, int256 answer, , , ) = crvOracle.latestRoundData();\\n        if (answer < 0) revert NegativePrice();\\n        return (uint256(answer));\\n    }\\n\\n    event SlippageToleranceBreachedEvent(\\n        uint256 balance,\\n        uint256 breforeSwapLpPrice,\\n        uint256 amount,\\n        uint256 MAX_BPS,\\n        uint256 MAX_TOLERANCE\\n    );\\n\\n    function depositUsdc(uint256 amount) external returns (uint256 sharesMinted) {\\n        if (amount == 0) revert ZeroValue();\\n        usdc.transferFrom(msg.sender, address(this), amount);\\n\\n        bytes memory path = abi.encodePacked(usdc, uint24(500), usdt);\\n\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n            path: path,\\n            amountIn: amount,\\n            amountOutMinimum: 0,\\n            recipient: address(this),\\n            deadline: block.timestamp\\n        });\\n\\n        uint256 usdtOut = swapRouter.exactInput(params);\\n\\n        uint256 beforeSwapLpPrice = lpOracle.lp_price();\\n\\n        stableSwap.add_liquidity([usdtOut, 0, 0], 0);\\n\\n        uint256 balance = lpToken.balanceOf(address(this));\\n\\n        if (balance.mulDiv(beforeSwapLpPrice, 10**18) < (amount * (MAX_BPS - MAX_TOLERANCE) * 10**12) / MAX_BPS) {\\n            // TODO uncomment\\n            // revert SlippageToleranceBreached();\\n            emit SlippageToleranceBreachedEvent(balance, beforeSwapLpPrice, amount, MAX_BPS, MAX_TOLERANCE);\\n        }\\n\\n        sharesMinted = vault.deposit(balance, msg.sender);\\n        emit DepositPeriphery(msg.sender, address(usdc), amount, balance, sharesMinted);\\n    }\\n\\n    function depositWeth(uint256 amount) external returns (uint256 sharesMinted) {\\n        if (amount == 0) revert ZeroValue();\\n        weth.transferFrom(msg.sender, address(this), amount);\\n\\n        uint256 beforeSwapLpPrice = lpOracle.lp_price();\\n\\n        stableSwap.add_liquidity([0, 0, amount], 0);\\n\\n        uint256 balance = lpToken.balanceOf(address(this));\\n\\n        if (\\n            balance.mulDiv(beforeSwapLpPrice, 10**18) <\\n            _getEthPrice(ethOracle).mulDiv(amount * (MAX_BPS - MAX_TOLERANCE), 10**8 * MAX_BPS)\\n        ) {\\n            // TODO uncomment\\n            // revert SlippageToleranceBreached();\\n            emit SlippageToleranceBreachedEvent(balance, beforeSwapLpPrice, amount, MAX_BPS, MAX_TOLERANCE);\\n        }\\n\\n        sharesMinted = vault.deposit(lpToken.balanceOf(address(this)), msg.sender);\\n        emit DepositPeriphery(msg.sender, address(usdc), amount, balance, sharesMinted);\\n    }\\n\\n    function depositEth() external payable returns (uint256 sharesMinted) {\\n        uint256 amount = msg.value;\\n        if (amount == 0) revert ZeroValue();\\n\\n        uint256 beforeSwapLpPrice = lpOracle.lp_price();\\n\\n        stableSwap.add_liquidity([0, 0, amount], 0);\\n\\n        uint256 balance = lpToken.balanceOf(address(this));\\n\\n        if (\\n            balance.mulDiv(beforeSwapLpPrice, 10**18) <\\n            _getEthPrice(ethOracle).mulDiv(amount * (MAX_BPS - MAX_TOLERANCE), 10**8 * MAX_BPS)\\n        ) {\\n            // TODO uncomment\\n            // revert SlippageToleranceBreached();\\n            emit SlippageToleranceBreachedEvent(balance, beforeSwapLpPrice, amount, MAX_BPS, MAX_TOLERANCE);\\n        }\\n\\n        sharesMinted = vault.deposit(lpToken.balanceOf(address(this)), msg.sender);\\n        emit DepositPeriphery(msg.sender, address(0), amount, balance, sharesMinted);\\n    }\\n\\n    function updateTolerance(uint256 newTolerance) external onlyOwner {\\n        if (newTolerance > MAX_BPS) revert OutOfBounds();\\n        MAX_TOLERANCE = newTolerance;\\n    }\\n\\n    function updateSwapRouter(address newRouter) external onlyOwner {\\n        if (newRouter == address(0)) revert ZeroValue();\\n        swapRouter = ISwapRouter(newRouter);\\n    }\\n\\n    function updateEthOracle(address newOracle) external onlyOwner {\\n        if (newOracle == address(0)) revert ZeroValue();\\n        ethOracle = AggregatorV3Interface(newOracle);\\n    }\\n}\\n\",\"keccak256\":\"0x98a6e0d7c32888e3642cc087e108fbd787cc86767941c255c6015e3335a4d60c\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040526032606e55612710606f5534801561001b57600080fd5b506119918061002b6000396000f3fe6080604052600436106101095760003560e01c8063715018a611610095578063b98b677f11610064578063b98b677f146102b6578063c31c9c07146102d6578063f2fde38b146102f6578063f5e95acb14610316578063fbfa77cf1461033657600080fd5b8063715018a6146102435780638da5cb5b1461025857806398733df0146102765780639e548b7f1461029657600080fd5b80633fc8cef3116100dc5780633fc8cef3146101b9578063439370b1146101d95780635fcbd285146101e1578063690e0dda146102015780636c13f8d71461022157600080fd5b8063062b032f1461010e5780632357928e1461014b5780632f48ab7d146101795780633e413bee14610199575b600080fd5b34801561011a57600080fd5b50606b5461012e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561015757600080fd5b5061016b61016636600461161a565b610356565b604051908152602001610142565b34801561018557600080fd5b5060665461012e906001600160a01b031681565b3480156101a557600080fd5b5060655461012e906001600160a01b031681565b3480156101c557600080fd5b5060675461012e906001600160a01b031681565b61016b6107b9565b3480156101ed57600080fd5b5060685461012e906001600160a01b031681565b34801561020d57600080fd5b5061016b61021c36600461161a565b610b21565b34801561022d57600080fd5b5061024161023c36600461161a565b610ee3565b005b34801561024f57600080fd5b50610241610f3e565b34801561026457600080fd5b506033546001600160a01b031661012e565b34801561028257600080fd5b50610241610291366004611648565b610f74565b3480156102a257600080fd5b50606c5461012e906001600160a01b031681565b3480156102c257600080fd5b506102416102d1366004611648565b610fe7565b3480156102e257600080fd5b50606a5461012e906001600160a01b031681565b34801561030257600080fd5b50610241610311366004611648565b61105a565b34801561032257600080fd5b50610241610331366004611665565b6110f5565b34801561034257600080fd5b5060695461012e906001600160a01b031681565b60008160000361037957604051637c946ed760e01b815260040160405180910390fd5b6065546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156103d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f49190611721565b506065546066546040516bffffffffffffffffffffffff19606093841b81166020830152607d60ea1b60348301529190921b166037820152600090604b0160408051601f1981840301815260a083018252808352306020840152428383015260608301869052600060808401819052606a54925163c04b8d5960e01b8152919450916001600160a01b03169063c04b8d5990610494908590600401611743565b6020604051808303816000875af11580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d791906117d6565b90506000606b60009054906101000a90046001600160a01b03166001600160a01b03166354f0f7d56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561052e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055291906117d6565b606c54604080516060810182528581526000602082018190528183018190529151634515cef360e01b81529394506001600160a01b0390921692634515cef3926105a09290916004016117ef565b600060405180830381600087803b1580156105ba57600080fd5b505af11580156105ce573d6000803e3d6000fd5b50506068546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa15801561061d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064191906117d6565b9050606f54606e54606f54610656919061183d565b6106609089611854565b61066f9064e8d4a51000611854565b6106799190611873565b61068c8284670de0b6b3a7640000611428565b10156106e757606f54606e5460408051848152602081018690529081018a9052606081019290925260808201527f31eff883f84456179a3ff3133408f0908c5ebcae4219c9c47ce66670051f46129060a00160405180910390a15b606954604051636e553f6560e01b8152600481018390523360248201526001600160a01b0390911690636e553f65906044016020604051808303816000875af1158015610738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075c91906117d6565b606554604080518a8152602081018590529081018390529197506001600160a01b03169033907fe9cbb4acfef5baa4563d0097e70de6d95804f768674f44f7f58096a6bb0fe03c9060600160405180910390a35050505050919050565b6000348082036107dc57604051637c946ed760e01b815260040160405180910390fd5b606b54604080516354f0f7d560e01b815290516000926001600160a01b0316916354f0f7d59160048083019260209291908290030181865afa158015610826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084a91906117d6565b606c54604080516060810182526000808252602082018190528183018790529151634515cef360e01b81529394506001600160a01b0390921692634515cef3926108989290916004016117ef565b600060405180830381600087803b1580156108b257600080fd5b505af11580156108c6573d6000803e3d6000fd5b50506068546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015610915573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093991906117d6565b9050610985606e54606f5461094e919061183d565b6109589085611854565b606f54610969906305f5e100611854565b606d5461097e906001600160a01b03166114db565b9190611428565b6109988284670de0b6b3a7640000611428565b10156109f357606f54606e546040805184815260208101869052908101869052606081019290925260808201527f31eff883f84456179a3ff3133408f0908c5ebcae4219c9c47ce66670051f46129060a00160405180910390a15b6069546068546040516370a0823160e01b81523060048201526001600160a01b0392831692636e553f659216906370a0823190602401602060405180830381865afa158015610a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6a91906117d6565b6040516001600160e01b031960e084901b16815260048101919091523360248201526044016020604051808303816000875af1158015610aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad291906117d6565b604080518581526020810184905290810182905290945060009033907fe9cbb4acfef5baa4563d0097e70de6d95804f768674f44f7f58096a6bb0fe03c9060600160405180910390a350505090565b600081600003610b4457604051637c946ed760e01b815260040160405180910390fd5b6067546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbf9190611721565b50606b54604080516354f0f7d560e01b815290516000926001600160a01b0316916354f0f7d59160048083019260209291908290030181865afa158015610c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2e91906117d6565b606c54604080516060810182526000808252602082018190528183018890529151634515cef360e01b81529394506001600160a01b0390921692634515cef392610c7c9290916004016117ef565b600060405180830381600087803b158015610c9657600080fd5b505af1158015610caa573d6000803e3d6000fd5b50506068546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015610cf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1d91906117d6565b9050610d3c606e54606f54610d32919061183d565b6109589086611854565b610d4f8284670de0b6b3a7640000611428565b1015610daa57606f54606e546040805184815260208101869052908101879052606081019290925260808201527f31eff883f84456179a3ff3133408f0908c5ebcae4219c9c47ce66670051f46129060a00160405180910390a15b6069546068546040516370a0823160e01b81523060048201526001600160a01b0392831692636e553f659216906370a0823190602401602060405180830381865afa158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2191906117d6565b6040516001600160e01b031960e084901b16815260048101919091523360248201526044016020604051808303816000875af1158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8991906117d6565b60655460408051878152602081018590529081018390529194506001600160a01b03169033907fe9cbb4acfef5baa4563d0097e70de6d95804f768674f44f7f58096a6bb0fe03c9060600160405180910390a35050919050565b6033546001600160a01b03163314610f165760405162461bcd60e51b8152600401610f0d90611895565b60405180910390fd5b606f54811115610f3957604051632d0483c560e21b815260040160405180910390fd5b606e55565b6033546001600160a01b03163314610f685760405162461bcd60e51b8152600401610f0d90611895565b610f72600061156e565b565b6033546001600160a01b03163314610f9e5760405162461bcd60e51b8152600401610f0d90611895565b6001600160a01b038116610fc557604051637c946ed760e01b815260040160405180910390fd5b606d80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031633146110115760405162461bcd60e51b8152600401610f0d90611895565b6001600160a01b03811661103857604051637c946ed760e01b815260040160405180910390fd5b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031633146110845760405162461bcd60e51b8152600401610f0d90611895565b6001600160a01b0381166110e95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610f0d565b6110f28161156e565b50565b600054610100900460ff166111105760005460ff1615611114565b303b155b6111775760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610f0d565b600054610100900460ff16158015611199576000805461ffff19166101011790555b6111a16115c0565b606580546001600160a01b03199081166001600160a01b038d8116919091179092556066805482168c84161790556067805482168b84169081179091556069805483168a85161790556068805483168b8516179055606b80548316888516179055606c80548316878516908117909155606a805484168a8616179055606d80549093169386169390931790915560405163095ea7b360e01b8152600481019290925260001960248301529063095ea7b3906044016020604051808303816000875af1158015611274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112989190611721565b50606654606c5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af11580156112ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113139190611721565b50606554606a5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af115801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e9190611721565b5060685460695460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af11580156113e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114099190611721565b50801561141c576000805461ff00191690555b50505050505050505050565b6000808060001985870985870292508281108382030391505080600003611461576000841161145657600080fd5b5082900490506114d4565b80841161146d57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561151c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154091906118e9565b5050509150506000811215611568576040516330e53b6960e11b815260040160405180910390fd5b92915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166115e75760405162461bcd60e51b8152600401610f0d90611939565b610f72600054610100900460ff166116115760405162461bcd60e51b8152600401610f0d90611939565b610f723361156e565b60006020828403121561162c57600080fd5b5035919050565b6001600160a01b03811681146110f257600080fd5b60006020828403121561165a57600080fd5b81356114d481611633565b60008060008060008060008060006101208a8c03121561168457600080fd5b893561168f81611633565b985060208a013561169f81611633565b975060408a01356116af81611633565b965060608a01356116bf81611633565b955060808a01356116cf81611633565b945060a08a01356116df81611633565b935060c08a01356116ef81611633565b925060e08a01356116ff81611633565b91506101008a013561171081611633565b809150509295985092959850929598565b60006020828403121561173357600080fd5b815180151581146114d457600080fd5b60006020808352835160a08285015280518060c086015260005b818110156117795782810184015186820160e00152830161175d565b8181111561178b57600060e083880101525b50918501516001600160a01b0381166040860152916040860151606086015260608601516080860152608086015160a086015260e0601f19601f830116860101935050505092915050565b6000602082840312156117e857600080fd5b5051919050565b60808101818460005b60038110156118175781518352602092830192909101906001016117f8565b5050508260608301529392505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561184f5761184f611827565b500390565b600081600019048311821515161561186e5761186e611827565b500290565b60008261189057634e487b7160e01b600052601260045260246000fd5b500490565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b805169ffffffffffffffffffff811681146118e457600080fd5b919050565b600080600080600060a0868803121561190157600080fd5b61190a866118ca565b945060208601519350604086015192506060860151915061192d608087016118ca565b90509295509295909350565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea164736f6c634300080d000a",
  "deployedBytecode": "0x6080604052600436106101095760003560e01c8063715018a611610095578063b98b677f11610064578063b98b677f146102b6578063c31c9c07146102d6578063f2fde38b146102f6578063f5e95acb14610316578063fbfa77cf1461033657600080fd5b8063715018a6146102435780638da5cb5b1461025857806398733df0146102765780639e548b7f1461029657600080fd5b80633fc8cef3116100dc5780633fc8cef3146101b9578063439370b1146101d95780635fcbd285146101e1578063690e0dda146102015780636c13f8d71461022157600080fd5b8063062b032f1461010e5780632357928e1461014b5780632f48ab7d146101795780633e413bee14610199575b600080fd5b34801561011a57600080fd5b50606b5461012e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561015757600080fd5b5061016b61016636600461161a565b610356565b604051908152602001610142565b34801561018557600080fd5b5060665461012e906001600160a01b031681565b3480156101a557600080fd5b5060655461012e906001600160a01b031681565b3480156101c557600080fd5b5060675461012e906001600160a01b031681565b61016b6107b9565b3480156101ed57600080fd5b5060685461012e906001600160a01b031681565b34801561020d57600080fd5b5061016b61021c36600461161a565b610b21565b34801561022d57600080fd5b5061024161023c36600461161a565b610ee3565b005b34801561024f57600080fd5b50610241610f3e565b34801561026457600080fd5b506033546001600160a01b031661012e565b34801561028257600080fd5b50610241610291366004611648565b610f74565b3480156102a257600080fd5b50606c5461012e906001600160a01b031681565b3480156102c257600080fd5b506102416102d1366004611648565b610fe7565b3480156102e257600080fd5b50606a5461012e906001600160a01b031681565b34801561030257600080fd5b50610241610311366004611648565b61105a565b34801561032257600080fd5b50610241610331366004611665565b6110f5565b34801561034257600080fd5b5060695461012e906001600160a01b031681565b60008160000361037957604051637c946ed760e01b815260040160405180910390fd5b6065546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156103d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f49190611721565b506065546066546040516bffffffffffffffffffffffff19606093841b81166020830152607d60ea1b60348301529190921b166037820152600090604b0160408051601f1981840301815260a083018252808352306020840152428383015260608301869052600060808401819052606a54925163c04b8d5960e01b8152919450916001600160a01b03169063c04b8d5990610494908590600401611743565b6020604051808303816000875af11580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d791906117d6565b90506000606b60009054906101000a90046001600160a01b03166001600160a01b03166354f0f7d56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561052e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055291906117d6565b606c54604080516060810182528581526000602082018190528183018190529151634515cef360e01b81529394506001600160a01b0390921692634515cef3926105a09290916004016117ef565b600060405180830381600087803b1580156105ba57600080fd5b505af11580156105ce573d6000803e3d6000fd5b50506068546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa15801561061d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064191906117d6565b9050606f54606e54606f54610656919061183d565b6106609089611854565b61066f9064e8d4a51000611854565b6106799190611873565b61068c8284670de0b6b3a7640000611428565b10156106e757606f54606e5460408051848152602081018690529081018a9052606081019290925260808201527f31eff883f84456179a3ff3133408f0908c5ebcae4219c9c47ce66670051f46129060a00160405180910390a15b606954604051636e553f6560e01b8152600481018390523360248201526001600160a01b0390911690636e553f65906044016020604051808303816000875af1158015610738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075c91906117d6565b606554604080518a8152602081018590529081018390529197506001600160a01b03169033907fe9cbb4acfef5baa4563d0097e70de6d95804f768674f44f7f58096a6bb0fe03c9060600160405180910390a35050505050919050565b6000348082036107dc57604051637c946ed760e01b815260040160405180910390fd5b606b54604080516354f0f7d560e01b815290516000926001600160a01b0316916354f0f7d59160048083019260209291908290030181865afa158015610826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084a91906117d6565b606c54604080516060810182526000808252602082018190528183018790529151634515cef360e01b81529394506001600160a01b0390921692634515cef3926108989290916004016117ef565b600060405180830381600087803b1580156108b257600080fd5b505af11580156108c6573d6000803e3d6000fd5b50506068546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015610915573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093991906117d6565b9050610985606e54606f5461094e919061183d565b6109589085611854565b606f54610969906305f5e100611854565b606d5461097e906001600160a01b03166114db565b9190611428565b6109988284670de0b6b3a7640000611428565b10156109f357606f54606e546040805184815260208101869052908101869052606081019290925260808201527f31eff883f84456179a3ff3133408f0908c5ebcae4219c9c47ce66670051f46129060a00160405180910390a15b6069546068546040516370a0823160e01b81523060048201526001600160a01b0392831692636e553f659216906370a0823190602401602060405180830381865afa158015610a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6a91906117d6565b6040516001600160e01b031960e084901b16815260048101919091523360248201526044016020604051808303816000875af1158015610aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad291906117d6565b604080518581526020810184905290810182905290945060009033907fe9cbb4acfef5baa4563d0097e70de6d95804f768674f44f7f58096a6bb0fe03c9060600160405180910390a350505090565b600081600003610b4457604051637c946ed760e01b815260040160405180910390fd5b6067546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbf9190611721565b50606b54604080516354f0f7d560e01b815290516000926001600160a01b0316916354f0f7d59160048083019260209291908290030181865afa158015610c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2e91906117d6565b606c54604080516060810182526000808252602082018190528183018890529151634515cef360e01b81529394506001600160a01b0390921692634515cef392610c7c9290916004016117ef565b600060405180830381600087803b158015610c9657600080fd5b505af1158015610caa573d6000803e3d6000fd5b50506068546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015610cf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1d91906117d6565b9050610d3c606e54606f54610d32919061183d565b6109589086611854565b610d4f8284670de0b6b3a7640000611428565b1015610daa57606f54606e546040805184815260208101869052908101879052606081019290925260808201527f31eff883f84456179a3ff3133408f0908c5ebcae4219c9c47ce66670051f46129060a00160405180910390a15b6069546068546040516370a0823160e01b81523060048201526001600160a01b0392831692636e553f659216906370a0823190602401602060405180830381865afa158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2191906117d6565b6040516001600160e01b031960e084901b16815260048101919091523360248201526044016020604051808303816000875af1158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8991906117d6565b60655460408051878152602081018590529081018390529194506001600160a01b03169033907fe9cbb4acfef5baa4563d0097e70de6d95804f768674f44f7f58096a6bb0fe03c9060600160405180910390a35050919050565b6033546001600160a01b03163314610f165760405162461bcd60e51b8152600401610f0d90611895565b60405180910390fd5b606f54811115610f3957604051632d0483c560e21b815260040160405180910390fd5b606e55565b6033546001600160a01b03163314610f685760405162461bcd60e51b8152600401610f0d90611895565b610f72600061156e565b565b6033546001600160a01b03163314610f9e5760405162461bcd60e51b8152600401610f0d90611895565b6001600160a01b038116610fc557604051637c946ed760e01b815260040160405180910390fd5b606d80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031633146110115760405162461bcd60e51b8152600401610f0d90611895565b6001600160a01b03811661103857604051637c946ed760e01b815260040160405180910390fd5b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031633146110845760405162461bcd60e51b8152600401610f0d90611895565b6001600160a01b0381166110e95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610f0d565b6110f28161156e565b50565b600054610100900460ff166111105760005460ff1615611114565b303b155b6111775760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610f0d565b600054610100900460ff16158015611199576000805461ffff19166101011790555b6111a16115c0565b606580546001600160a01b03199081166001600160a01b038d8116919091179092556066805482168c84161790556067805482168b84169081179091556069805483168a85161790556068805483168b8516179055606b80548316888516179055606c80548316878516908117909155606a805484168a8616179055606d80549093169386169390931790915560405163095ea7b360e01b8152600481019290925260001960248301529063095ea7b3906044016020604051808303816000875af1158015611274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112989190611721565b50606654606c5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af11580156112ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113139190611721565b50606554606a5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af115801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e9190611721565b5060685460695460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af11580156113e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114099190611721565b50801561141c576000805461ff00191690555b50505050505050505050565b6000808060001985870985870292508281108382030391505080600003611461576000841161145657600080fd5b5082900490506114d4565b80841161146d57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561151c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154091906118e9565b5050509150506000811215611568576040516330e53b6960e11b815260040160405180910390fd5b92915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166115e75760405162461bcd60e51b8152600401610f0d90611939565b610f72600054610100900460ff166116115760405162461bcd60e51b8152600401610f0d90611939565b610f723361156e565b60006020828403121561162c57600080fd5b5035919050565b6001600160a01b03811681146110f257600080fd5b60006020828403121561165a57600080fd5b81356114d481611633565b60008060008060008060008060006101208a8c03121561168457600080fd5b893561168f81611633565b985060208a013561169f81611633565b975060408a01356116af81611633565b965060608a01356116bf81611633565b955060808a01356116cf81611633565b945060a08a01356116df81611633565b935060c08a01356116ef81611633565b925060e08a01356116ff81611633565b91506101008a013561171081611633565b809150509295985092959850929598565b60006020828403121561173357600080fd5b815180151581146114d457600080fd5b60006020808352835160a08285015280518060c086015260005b818110156117795782810184015186820160e00152830161175d565b8181111561178b57600060e083880101525b50918501516001600160a01b0381166040860152916040860151606086015260608601516080860152608086015160a086015260e0601f19601f830116860101935050505092915050565b6000602082840312156117e857600080fd5b5051919050565b60808101818460005b60038110156118175781518352602092830192909101906001016117f8565b5050508260608301529392505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561184f5761184f611827565b500390565b600081600019048311821515161561186e5761186e611827565b500290565b60008261189057634e487b7160e01b600052601260045260246000fd5b500490565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b805169ffffffffffffffffffff811681146118e457600080fd5b919050565b600080600080600060a0868803121561190157600080fd5b61190a866118ca565b945060208601519350604086015192506060860151915061192d608087016118ca565b90509295509295909350565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea164736f6c634300080d000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "MAX_TOLERANCE": {
        "details": "sum of fees + slippage when swapping usdc to usdt"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 217,
        "contract": "contracts/yieldStrategy/VaultPeriphery.sol:VaultPeriphery",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 220,
        "contract": "contracts/yieldStrategy/VaultPeriphery.sol:VaultPeriphery",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1395,
        "contract": "contracts/yieldStrategy/VaultPeriphery.sol:VaultPeriphery",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 97,
        "contract": "contracts/yieldStrategy/VaultPeriphery.sol:VaultPeriphery",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 209,
        "contract": "contracts/yieldStrategy/VaultPeriphery.sol:VaultPeriphery",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 31632,
        "contract": "contracts/yieldStrategy/VaultPeriphery.sol:VaultPeriphery",
        "label": "usdc",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IERC20)3537"
      },
      {
        "astId": 31635,
        "contract": "contracts/yieldStrategy/VaultPeriphery.sol:VaultPeriphery",
        "label": "usdt",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IERC20)3537"
      },
      {
        "astId": 31638,
        "contract": "contracts/yieldStrategy/VaultPeriphery.sol:VaultPeriphery",
        "label": "weth",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IERC20)3537"
      },
      {
        "astId": 31641,
        "contract": "contracts/yieldStrategy/VaultPeriphery.sol:VaultPeriphery",
        "label": "lpToken",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IERC20)3537"
      },
      {
        "astId": 31644,
        "contract": "contracts/yieldStrategy/VaultPeriphery.sol:VaultPeriphery",
        "label": "vault",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IERC4626)26740"
      },
      {
        "astId": 31647,
        "contract": "contracts/yieldStrategy/VaultPeriphery.sol:VaultPeriphery",
        "label": "swapRouter",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(ISwapRouter)25325"
      },
      {
        "astId": 31650,
        "contract": "contracts/yieldStrategy/VaultPeriphery.sol:VaultPeriphery",
        "label": "lpOracle",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(ILPPriceGetter)26919"
      },
      {
        "astId": 31653,
        "contract": "contracts/yieldStrategy/VaultPeriphery.sol:VaultPeriphery",
        "label": "stableSwap",
        "offset": 0,
        "slot": "108",
        "type": "t_contract(ICurveStableSwap)26911"
      },
      {
        "astId": 31656,
        "contract": "contracts/yieldStrategy/VaultPeriphery.sol:VaultPeriphery",
        "label": "ethOracle",
        "offset": 0,
        "slot": "109",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 31660,
        "contract": "contracts/yieldStrategy/VaultPeriphery.sol:VaultPeriphery",
        "label": "MAX_TOLERANCE",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 31663,
        "contract": "contracts/yieldStrategy/VaultPeriphery.sol:VaultPeriphery",
        "label": "MAX_BPS",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(ICurveStableSwap)26911": {
        "encoding": "inplace",
        "label": "contract ICurveStableSwap",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3537": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC4626)26740": {
        "encoding": "inplace",
        "label": "contract IERC4626",
        "numberOfBytes": "20"
      },
      "t_contract(ILPPriceGetter)26919": {
        "encoding": "inplace",
        "label": "contract ILPPriceGetter",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouter)25325": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}