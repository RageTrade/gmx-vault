{
  "address": "0x1cAd90b3dCF2eE6D8a6AC39755Ea6F792d3c8387",
  "abi": [
    {
      "inputs": [],
      "name": "CYS_NEGATIVE_CRV_PRICE",
      "type": "error"
    }
  ],
  "transactionHash": "0xef675def2f5228466aec0956a711a05694c4c285cd873cdf7022beea6097747e",
  "receipt": {
    "to": null,
    "from": "0x400348d0db7e757277a0a06fc68b5da038973C15",
    "contractAddress": "0x1cAd90b3dCF2eE6D8a6AC39755Ea6F792d3c8387",
    "transactionIndex": 0,
    "gasUsed": "8105978",
    "logsBloom": "0x
    "blockHash": "0x2bbab4d33b2c91905b6053a011b760fc79cbfcc625357284bc75abd4ac87bdf2",
    "transactionHash": "0xef675def2f5228466aec0956a711a05694c4c285cd873cdf7022beea6097747e",
    "logs": [],
    "blockNumber": 17185561,
    "cumulativeGasUsed": "3623278",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "720eef4d41842041e0d0951423a1e4e4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CYS_NEGATIVE_CRV_PRICE\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/SwapManager.sol\":\"SwapManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":340},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/curve/ICurveStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\n/* solhint-disable func-name-mixedcase */\\n/* solhint-disable var-name-mixedcase */\\n\\ninterface ICurveStableSwap {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 token_amount,\\n        uint256 index,\\n        uint256 min_amount\\n    ) external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function exchange(\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        bool\\n    ) external;\\n\\n    function get_dy(\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external view returns (uint256);\\n\\n    function balances(uint256) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[3] memory amounts, bool deposit) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7f08fa8c9caaff39cfbb05b28c9c247e2074a727e2ca2df01ea38375259f6b45\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/SwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\nimport { ICurveStableSwap } from '../interfaces/curve/ICurveStableSwap.sol';\\n\\nimport { AggregatorV3Interface } from '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\n\\n/* solhint-disable not-rely-on-time */\\n\\nlibrary SwapManager {\\n    error CYS_NEGATIVE_CRV_PRICE();\\n\\n    uint256 internal constant MAX_BPS = 10_000;\\n\\n    function _getCrvPrice(AggregatorV3Interface crvOracle) internal view returns (uint256) {\\n        (, int256 answer, , , ) = crvOracle.latestRoundData();\\n        if (answer < 0) revert CYS_NEGATIVE_CRV_PRICE();\\n        return (uint256(answer));\\n    }\\n\\n    function swapUsdcToUsdtAndAddLiquidity(\\n        uint256 amount,\\n        uint256 slippage,\\n        bytes memory path,\\n        ISwapRouter uniV3Router,\\n        ICurveStableSwap triCrypto\\n    ) external {\\n        uint256 minOut = (amount * (MAX_BPS - slippage)) / MAX_BPS;\\n\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n            path: path,\\n            amountIn: amount,\\n            amountOutMinimum: minOut,\\n            recipient: address(this),\\n            deadline: block.timestamp\\n        });\\n\\n        uint256 usdtOut = uniV3Router.exactInput(params);\\n\\n        // USDT, WBTC, WETH\\n        uint256[3] memory amounts = [usdtOut, uint256(0), uint256(0)];\\n        triCrypto.add_liquidity(amounts, 0);\\n    }\\n\\n    function swapUsdtToUsdc(\\n        uint256 amount,\\n        uint256 slippage,\\n        bytes memory path,\\n        ISwapRouter uniV3Router\\n    ) external returns (uint256 usdcOut) {\\n        uint256 minOut = (amount * (MAX_BPS - slippage)) / MAX_BPS;\\n\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n            path: path,\\n            amountIn: amount,\\n            amountOutMinimum: minOut,\\n            recipient: address(this),\\n            deadline: block.timestamp\\n        });\\n\\n        usdcOut = uniV3Router.exactInput(params);\\n    }\\n\\n    function swapCrvToUsdtAndAddLiquidity(\\n        uint256 crvAmount,\\n        uint256 crvSwapSlippageTolerance,\\n        AggregatorV3Interface crvOracle,\\n        bytes memory path,\\n        ISwapRouter uniV3Router,\\n        ICurveStableSwap triCrypto\\n    ) external returns (uint256 usdtOut) {\\n        uint256 minOut = (_getCrvPrice(crvOracle) * crvAmount * (MAX_BPS - crvSwapSlippageTolerance)) / MAX_BPS;\\n        // should not underflow because crvAmount > crv swap threshold\\n        minOut = ((minOut * (10**6)) / 10**18) / 10**8;\\n\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n            path: path,\\n            amountIn: crvAmount,\\n            amountOutMinimum: minOut,\\n            recipient: address(this),\\n            deadline: block.timestamp\\n        });\\n\\n        usdtOut = uniV3Router.exactInput(params);\\n\\n        uint256[3] memory amounts = [usdtOut, uint256(0), uint256(0)];\\n        triCrypto.add_liquidity(amounts, 0);\\n    }\\n}\\n\",\"keccak256\":\"0xe92279ea0b952d2a6d37db92feb90b39c97797880ec2c4fe28489a5a3155c0fd\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6108dc61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806330267db91461005057806369b6f5dc14610072578063abd9ebe5146100a4575b600080fd5b81801561005c57600080fd5b5061007061006b3660046105aa565b6100c4565b005b81801561007e57600080fd5b5061009261008d366004610622565b61020a565b60405190815260200160405180910390f35b8180156100b057600080fd5b506100926100bf3660046106ab565b610395565b60006127106100d38682610724565b6100dd908861073b565b6100e7919061075a565b6040805160a08101825286815230602082015242818301526060810189905260808101839052905163c04b8d5960e01b8152919250906000906001600160a01b0386169063c04b8d599061013f90859060040161077c565b6020604051808303816000875af115801561015e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610182919061080f565b604080516060810182528281526000602082018190528183018190529151634515cef360e01b8152929350916001600160a01b03871691634515cef3916101cd918591600401610828565b600060405180830381600087803b1580156101e757600080fd5b505af11580156101fb573d6000803e3d6000fd5b50505050505050505050505050565b60008061271061021a8882610724565b896102248961045c565b61022e919061073b565b610238919061073b565b610242919061075a565b90506305f5e100670de0b6b3a764000061025f83620f424061073b565b610269919061075a565b610273919061075a565b6040805160a0810182528781523060208201524281830152606081018b905260808101839052905163c04b8d5960e01b8152919250906001600160a01b0386169063c04b8d59906102c890849060040161077c565b6020604051808303816000875af11580156102e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030b919061080f565b604080516060810182528281526000602082018190528183018190529151634515cef360e01b8152929550916001600160a01b03871691634515cef391610356918591600401610828565b600060405180830381600087803b15801561037057600080fd5b505af1158015610384573d6000803e3d6000fd5b505050505050509695505050505050565b6000806127106103a58682610724565b6103af908861073b565b6103b9919061075a565b6040805160a08101825286815230602082015242818301526060810189905260808101839052905163c04b8d5960e01b8152919250906001600160a01b0385169063c04b8d599061040e90849060040161077c565b6020604051808303816000875af115801561042d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610451919061080f565b979650505050505050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561049d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c1919061087f565b50505091505060008112156104e95760405163033e96f360e21b815260040160405180910390fd5b92915050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261051657600080fd5b813567ffffffffffffffff80821115610531576105316104ef565b604051601f8301601f19908116603f01168101908282118183101715610559576105596104ef565b8160405283815286602085880101111561057257600080fd5b836020870160208301376000602085830101528094505050505092915050565b6001600160a01b03811681146105a757600080fd5b50565b600080600080600060a086880312156105c257600080fd5b8535945060208601359350604086013567ffffffffffffffff8111156105e757600080fd5b6105f388828901610505565b935050606086013561060481610592565b9150608086013561061481610592565b809150509295509295909350565b60008060008060008060c0878903121561063b57600080fd5b8635955060208701359450604087013561065481610592565b9350606087013567ffffffffffffffff81111561067057600080fd5b61067c89828a01610505565b935050608087013561068d81610592565b915060a087013561069d81610592565b809150509295509295509295565b600080600080608085870312156106c157600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156106e657600080fd5b6106f287828801610505565b925050606085013561070381610592565b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b6000828210156107365761073661070e565b500390565b60008160001904831182151516156107555761075561070e565b500290565b60008261077757634e487b7160e01b600052601260045260246000fd5b500490565b60006020808352835160a08285015280518060c086015260005b818110156107b25782810184015186820160e001528301610796565b818111156107c457600060e083880101525b50918501516001600160a01b0381166040860152916040860151606086015260608601516080860152608086015160a086015260e0601f19601f830116860101935050505092915050565b60006020828403121561082157600080fd5b5051919050565b60808101818460005b6003811015610850578151835260209283019290910190600101610831565b5050508260608301529392505050565b805169ffffffffffffffffffff8116811461087a57600080fd5b919050565b600080600080600060a0868803121561089757600080fd5b6108a086610860565b94506020860151935060408601519250606086015191506108c360808701610860565b9050929550929590935056fea164736f6c634300080e000a",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806330267db91461005057806369b6f5dc14610072578063abd9ebe5146100a4575b600080fd5b81801561005c57600080fd5b5061007061006b3660046105aa565b6100c4565b005b81801561007e57600080fd5b5061009261008d366004610622565b61020a565b60405190815260200160405180910390f35b8180156100b057600080fd5b506100926100bf3660046106ab565b610395565b60006127106100d38682610724565b6100dd908861073b565b6100e7919061075a565b6040805160a08101825286815230602082015242818301526060810189905260808101839052905163c04b8d5960e01b8152919250906000906001600160a01b0386169063c04b8d599061013f90859060040161077c565b6020604051808303816000875af115801561015e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610182919061080f565b604080516060810182528281526000602082018190528183018190529151634515cef360e01b8152929350916001600160a01b03871691634515cef3916101cd918591600401610828565b600060405180830381600087803b1580156101e757600080fd5b505af11580156101fb573d6000803e3d6000fd5b50505050505050505050505050565b60008061271061021a8882610724565b896102248961045c565b61022e919061073b565b610238919061073b565b610242919061075a565b90506305f5e100670de0b6b3a764000061025f83620f424061073b565b610269919061075a565b610273919061075a565b6040805160a0810182528781523060208201524281830152606081018b905260808101839052905163c04b8d5960e01b8152919250906001600160a01b0386169063c04b8d59906102c890849060040161077c565b6020604051808303816000875af11580156102e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030b919061080f565b604080516060810182528281526000602082018190528183018190529151634515cef360e01b8152929550916001600160a01b03871691634515cef391610356918591600401610828565b600060405180830381600087803b15801561037057600080fd5b505af1158015610384573d6000803e3d6000fd5b505050505050509695505050505050565b6000806127106103a58682610724565b6103af908861073b565b6103b9919061075a565b6040805160a08101825286815230602082015242818301526060810189905260808101839052905163c04b8d5960e01b8152919250906001600160a01b0385169063c04b8d599061040e90849060040161077c565b6020604051808303816000875af115801561042d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610451919061080f565b979650505050505050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561049d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c1919061087f565b50505091505060008112156104e95760405163033e96f360e21b815260040160405180910390fd5b92915050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261051657600080fd5b813567ffffffffffffffff80821115610531576105316104ef565b604051601f8301601f19908116603f01168101908282118183101715610559576105596104ef565b8160405283815286602085880101111561057257600080fd5b836020870160208301376000602085830101528094505050505092915050565b6001600160a01b03811681146105a757600080fd5b50565b600080600080600060a086880312156105c257600080fd5b8535945060208601359350604086013567ffffffffffffffff8111156105e757600080fd5b6105f388828901610505565b935050606086013561060481610592565b9150608086013561061481610592565b809150509295509295909350565b60008060008060008060c0878903121561063b57600080fd5b8635955060208701359450604087013561065481610592565b9350606087013567ffffffffffffffff81111561067057600080fd5b61067c89828a01610505565b935050608087013561068d81610592565b915060a087013561069d81610592565b809150509295509295509295565b600080600080608085870312156106c157600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156106e657600080fd5b6106f287828801610505565b925050606085013561070381610592565b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b6000828210156107365761073661070e565b500390565b60008160001904831182151516156107555761075561070e565b500290565b60008261077757634e487b7160e01b600052601260045260246000fd5b500490565b60006020808352835160a08285015280518060c086015260005b818110156107b25782810184015186820160e001528301610796565b818111156107c457600060e083880101525b50918501516001600160a01b0381166040860152916040860151606086015260608601516080860152608086015160a086015260e0601f19601f830116860101935050505092915050565b60006020828403121561082157600080fd5b5051919050565b60808101818460005b6003811015610850578151835260209283019290910190600101610831565b5050508260608301529392505050565b805169ffffffffffffffffffff8116811461087a57600080fd5b919050565b600080600080600060a0868803121561089757600080fd5b6108a086610860565b94506020860151935060408601519250606086015191506108c360808701610860565b9050929550929590935056fea164736f6c634300080e000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}